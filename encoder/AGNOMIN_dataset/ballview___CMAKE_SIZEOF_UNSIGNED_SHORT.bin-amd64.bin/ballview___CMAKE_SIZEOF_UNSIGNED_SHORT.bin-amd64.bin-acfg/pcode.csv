_init, (register, 0x200, 1) INT_LESS (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x20b, 1) INT_SBORROW (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
_init, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
_init, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_init, (register, 0x0, 8) COPY (ram, 0x600ff8, 8)
_init, (register, 0x200, 1) COPY (const, 0x0, 1)
_init, (register, 0x20b, 1) COPY (const, 0x0, 1)
_init, (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x0, 8)
_init, (register, 0x207, 1) INT_SLESS (unique, 0x59300, 8) , (const, 0x0, 8)
_init, (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8)
_init, (unique, 0x12c00, 8) INT_AND (unique, 0x59300, 8) , (const, 0xff, 8)
_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_init,  ---  CBRANCH (ram, 0x400645, 8) , (register, 0x206, 1)
_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x400645, 8)
_init,  ---  CALL (ram, 0x400670, 8)
_init, (register, 0x200, 1) INT_CARRY (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x20b, 1) INT_SCARRY (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
_init, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
_init, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
_init, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_init, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
_init,  ---  RETURN (register, 0x288, 8)
FUN_00400650, (unique, 0xe780, 8) COPY (ram, 0x601008, 8)
FUN_00400650, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
FUN_00400650,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
FUN_00400650,  ---  BRANCHIND (ram, 0x601010, 8)
__libc_start_main,  ---  BRANCHIND (ram, 0x601018, 8)
__gmon_start__,  ---  BRANCHIND (ram, 0x601020, 8)
main, (register, 0x38, 8) INT_SEXT (register, 0x38, 4)
main, (unique, 0x3200, 8) INT_ADD (register, 0x38, 8) , (const, 0x601040, 8)
main, (unique, 0xbb00, 1) LOAD (const, 0x1b1, 4) , (unique, 0x3200, 8)
main, (register, 0x0, 4) INT_SEXT (unique, 0xbb00, 1)
main, (register, 0x0, 8) INT_ZEXT (register, 0x0, 4)
main, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
main, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
main,  ---  RETURN (register, 0x288, 8)
_start, (register, 0x200, 1) COPY (const, 0x0, 1)
_start, (register, 0x20b, 1) COPY (const, 0x0, 1)
_start, (register, 0x28, 4) INT_XOR (register, 0x28, 4) , (register, 0x28, 4)
_start, (register, 0x28, 8) INT_ZEXT (register, 0x28, 4)
_start, (register, 0x207, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_start, (register, 0x206, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_start, (unique, 0x12c00, 4) INT_AND (register, 0x28, 4) , (const, 0xff, 4)
_start, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 4)
_start, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_start, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_start, (register, 0x88, 8) COPY (register, 0x10, 8)
_start, (register, 0x30, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
_start, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
_start, (register, 0x10, 8) COPY (register, 0x20, 8)
_start, (register, 0x200, 1) COPY (const, 0x0, 1)
_start, (register, 0x20b, 1) COPY (const, 0x0, 1)
_start, (register, 0x20, 8) INT_AND (register, 0x20, 8) , (const, 0xfffffffffffffff0, 8)
_start, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
_start, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
_start, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
_start, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_start, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_start, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_start, (unique, 0xe780, 8) COPY (register, 0x0, 8)
_start, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_start,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
_start, (unique, 0xe780, 8) COPY (register, 0x20, 8)
_start, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_start,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
_start, (register, 0x80, 8) COPY (const, 0x400800, 8)
_start, (register, 0x8, 8) COPY (const, 0x400790, 8)
_start, (register, 0x38, 8) COPY (const, 0x400680, 8)
_start, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_start,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x4006b4, 8)
_start,  ---  CALL (ram, 0x400660, 8)
_start,  ---  BRANCH (ram, 0x4006b4, 8)
deregister_tm_clones, (register, 0x0, 8) COPY (const, 0x601067, 8)
deregister_tm_clones, (unique, 0xe780, 8) COPY (register, 0x28, 8)
deregister_tm_clones, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
deregister_tm_clones,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
deregister_tm_clones, (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (const, 0x601060, 8)
deregister_tm_clones, (register, 0x20b, 1) INT_SBORROW (register, 0x0, 8) , (const, 0x601060, 8)
deregister_tm_clones, (register, 0x0, 8) INT_SUB (register, 0x0, 8) , (const, 0x601060, 8)
deregister_tm_clones, (register, 0x207, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8)
deregister_tm_clones, (register, 0x206, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
deregister_tm_clones, (unique, 0x12c00, 8) INT_AND (register, 0x0, 8) , (const, 0xff, 8)
deregister_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
deregister_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
deregister_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
deregister_tm_clones, (register, 0x200, 1) INT_LESS (register, 0x0, 8) , (const, 0xe, 8)
deregister_tm_clones, (register, 0x20b, 1) INT_SBORROW (register, 0x0, 8) , (const, 0xe, 8)
deregister_tm_clones, (unique, 0x28300, 8) INT_SUB (register, 0x0, 8) , (const, 0xe, 8)
deregister_tm_clones, (register, 0x207, 1) INT_SLESS (unique, 0x28300, 8) , (const, 0x0, 8)
deregister_tm_clones, (register, 0x206, 1) INT_EQUAL (unique, 0x28300, 8) , (const, 0x0, 8)
deregister_tm_clones, (unique, 0x12c00, 8) INT_AND (unique, 0x28300, 8) , (const, 0xff, 8)
deregister_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
deregister_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
deregister_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
deregister_tm_clones, (register, 0x28, 8) COPY (register, 0x20, 8)
deregister_tm_clones, (unique, 0xc780, 1) BOOL_OR (register, 0x200, 1) , (register, 0x206, 1)
deregister_tm_clones,  ---  CBRANCH (ram, 0x4006f0, 8) , (unique, 0xc780, 1)
deregister_tm_clones, (register, 0x0, 8) COPY (const, 0x0, 8)
deregister_tm_clones, (register, 0x200, 1) COPY (const, 0x0, 1)
deregister_tm_clones, (register, 0x20b, 1) COPY (const, 0x0, 1)
deregister_tm_clones, (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x0, 8)
deregister_tm_clones, (register, 0x207, 1) INT_SLESS (unique, 0x59300, 8) , (const, 0x0, 8)
deregister_tm_clones, (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8)
deregister_tm_clones, (unique, 0x12c00, 8) INT_AND (unique, 0x59300, 8) , (const, 0xff, 8)
deregister_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
deregister_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
deregister_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
deregister_tm_clones,  ---  CBRANCH (ram, 0x4006f0, 8) , (register, 0x206, 1)
deregister_tm_clones, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
deregister_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
deregister_tm_clones, (register, 0x38, 8) COPY (const, 0x601060, 8)
deregister_tm_clones,  ---  BRANCHIND (register, 0x0, 8)
deregister_tm_clones, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
deregister_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
deregister_tm_clones, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
deregister_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
deregister_tm_clones,  ---  RETURN (register, 0x288, 8)
register_tm_clones, (register, 0x30, 8) COPY (const, 0x601060, 8)
register_tm_clones, (unique, 0xe780, 8) COPY (register, 0x28, 8)
register_tm_clones, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
register_tm_clones,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
register_tm_clones, (register, 0x200, 1) INT_LESS (register, 0x30, 8) , (const, 0x601060, 8)
register_tm_clones, (register, 0x20b, 1) INT_SBORROW (register, 0x30, 8) , (const, 0x601060, 8)
register_tm_clones, (register, 0x30, 8) INT_SUB (register, 0x30, 8) , (const, 0x601060, 8)
register_tm_clones, (register, 0x207, 1) INT_SLESS (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x12c00, 8) INT_AND (register, 0x30, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
register_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
register_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x51b80, 4) INT_AND (const, 0x3, 4) , (const, 0x3f, 4)
register_tm_clones, (unique, 0x51c00, 8) COPY (register, 0x30, 8)
register_tm_clones, (register, 0x30, 8) INT_SRIGHT (register, 0x30, 8) , (unique, 0x51b80, 4)
register_tm_clones, (unique, 0x15980, 1) INT_NOTEQUAL (unique, 0x51b80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x15a00, 4) INT_SUB (unique, 0x51b80, 4) , (const, 0x1, 4)
register_tm_clones, (unique, 0x15a80, 8) INT_SRIGHT (unique, 0x51c00, 8) , (unique, 0x15a00, 4)
register_tm_clones, (unique, 0x15b00, 8) INT_AND (unique, 0x15a80, 8) , (const, 0x1, 8)
register_tm_clones, (unique, 0x15c00, 1) INT_NOTEQUAL (unique, 0x15b00, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x15c80, 1) BOOL_NEGATE (unique, 0x15980, 1)
register_tm_clones, (unique, 0x15d00, 1) INT_AND (unique, 0x15c80, 1) , (register, 0x200, 1)
register_tm_clones, (unique, 0x15d80, 1) INT_AND (unique, 0x15980, 1) , (unique, 0x15c00, 1)
register_tm_clones, (register, 0x200, 1) INT_OR (unique, 0x15d00, 1) , (unique, 0x15d80, 1)
register_tm_clones, (unique, 0x15f00, 1) INT_EQUAL (unique, 0x51b80, 4) , (const, 0x1, 4)
register_tm_clones, (unique, 0x15f80, 1) BOOL_NEGATE (unique, 0x15f00, 1)
register_tm_clones, (register, 0x20b, 1) INT_AND (unique, 0x15f80, 1) , (register, 0x20b, 1)
register_tm_clones, (unique, 0x12e80, 1) INT_NOTEQUAL (unique, 0x51b80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x12f80, 1) INT_SLESS (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x13000, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13080, 1) INT_AND (unique, 0x13000, 1) , (register, 0x207, 1)
register_tm_clones, (unique, 0x13100, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x12f80, 1)
register_tm_clones, (register, 0x207, 1) INT_OR (unique, 0x13080, 1) , (unique, 0x13100, 1)
register_tm_clones, (unique, 0x13280, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x13300, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13380, 1) INT_AND (unique, 0x13300, 1) , (register, 0x206, 1)
register_tm_clones, (unique, 0x13400, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13280, 1)
register_tm_clones, (register, 0x206, 1) INT_OR (unique, 0x13380, 1) , (unique, 0x13400, 1)
register_tm_clones, (unique, 0x13500, 8) INT_AND (register, 0x30, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x13580, 1) POPCOUNT (unique, 0x13500, 8)
register_tm_clones, (unique, 0x13600, 1) INT_AND (unique, 0x13580, 1) , (const, 0x1, 1)
register_tm_clones, (unique, 0x13700, 1) INT_EQUAL (unique, 0x13600, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x13780, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13800, 1) INT_AND (unique, 0x13780, 1) , (register, 0x202, 1)
register_tm_clones, (unique, 0x13880, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13700, 1)
register_tm_clones, (register, 0x202, 1) INT_OR (unique, 0x13800, 1) , (unique, 0x13880, 1)
register_tm_clones, (register, 0x28, 8) COPY (register, 0x20, 8)
register_tm_clones, (register, 0x0, 8) COPY (register, 0x30, 8)
register_tm_clones, (unique, 0x57880, 4) INT_AND (const, 0x3f, 4) , (const, 0x3f, 4)
register_tm_clones, (unique, 0x57900, 8) COPY (register, 0x0, 8)
register_tm_clones, (register, 0x0, 8) INT_RIGHT (register, 0x0, 8) , (unique, 0x57880, 4)
register_tm_clones, (unique, 0x16100, 1) INT_NOTEQUAL (unique, 0x57880, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x16180, 4) INT_SUB (unique, 0x57880, 4) , (const, 0x1, 4)
register_tm_clones, (unique, 0x16200, 8) INT_RIGHT (unique, 0x57900, 8) , (unique, 0x16180, 4)
register_tm_clones, (unique, 0x16280, 8) INT_AND (unique, 0x16200, 8) , (const, 0x1, 8)
register_tm_clones, (unique, 0x16380, 1) INT_NOTEQUAL (unique, 0x16280, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x16400, 1) BOOL_NEGATE (unique, 0x16100, 1)
register_tm_clones, (unique, 0x16480, 1) INT_AND (unique, 0x16400, 1) , (register, 0x200, 1)
register_tm_clones, (unique, 0x16500, 1) INT_AND (unique, 0x16100, 1) , (unique, 0x16380, 1)
register_tm_clones, (register, 0x200, 1) INT_OR (unique, 0x16480, 1) , (unique, 0x16500, 1)
register_tm_clones, (unique, 0x16680, 1) INT_EQUAL (unique, 0x57880, 4) , (const, 0x1, 4)
register_tm_clones, (unique, 0x16780, 1) INT_SLESS (unique, 0x57900, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x16800, 1) BOOL_NEGATE (unique, 0x16680, 1)
register_tm_clones, (unique, 0x16880, 1) INT_AND (unique, 0x16800, 1) , (register, 0x20b, 1)
register_tm_clones, (unique, 0x16900, 1) INT_AND (unique, 0x16680, 1) , (unique, 0x16780, 1)
register_tm_clones, (register, 0x20b, 1) INT_OR (unique, 0x16880, 1) , (unique, 0x16900, 1)
register_tm_clones, (unique, 0x12e80, 1) INT_NOTEQUAL (unique, 0x57880, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x12f80, 1) INT_SLESS (register, 0x0, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x13000, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13080, 1) INT_AND (unique, 0x13000, 1) , (register, 0x207, 1)
register_tm_clones, (unique, 0x13100, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x12f80, 1)
register_tm_clones, (register, 0x207, 1) INT_OR (unique, 0x13080, 1) , (unique, 0x13100, 1)
register_tm_clones, (unique, 0x13280, 1) INT_EQUAL (register, 0x0, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x13300, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13380, 1) INT_AND (unique, 0x13300, 1) , (register, 0x206, 1)
register_tm_clones, (unique, 0x13400, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13280, 1)
register_tm_clones, (register, 0x206, 1) INT_OR (unique, 0x13380, 1) , (unique, 0x13400, 1)
register_tm_clones, (unique, 0x13500, 8) INT_AND (register, 0x0, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x13580, 1) POPCOUNT (unique, 0x13500, 8)
register_tm_clones, (unique, 0x13600, 1) INT_AND (unique, 0x13580, 1) , (const, 0x1, 1)
register_tm_clones, (unique, 0x13700, 1) INT_EQUAL (unique, 0x13600, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x13780, 1) BOOL_NEGATE (unique, 0x12e80, 1)
register_tm_clones, (unique, 0x13800, 1) INT_AND (unique, 0x13780, 1) , (register, 0x202, 1)
register_tm_clones, (unique, 0x13880, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13700, 1)
register_tm_clones, (register, 0x202, 1) INT_OR (unique, 0x13800, 1) , (unique, 0x13880, 1)
register_tm_clones, (register, 0x200, 1) INT_CARRY (register, 0x30, 8) , (register, 0x0, 8)
register_tm_clones, (register, 0x20b, 1) INT_SCARRY (register, 0x30, 8) , (register, 0x0, 8)
register_tm_clones, (register, 0x30, 8) INT_ADD (register, 0x30, 8) , (register, 0x0, 8)
register_tm_clones, (register, 0x207, 1) INT_SLESS (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x12c00, 8) INT_AND (register, 0x30, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
register_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
register_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0xbe80, 1) COPY (const, 0x1, 1)
register_tm_clones, (unique, 0x51780, 8) INT_AND (register, 0x30, 8) , (const, 0x1, 8)
register_tm_clones, (register, 0x200, 1) INT_NOTEQUAL (unique, 0x51780, 8) , (const, 0x0, 8)
register_tm_clones, (register, 0x20b, 1) COPY (const, 0x0, 1)
register_tm_clones, (register, 0x30, 8) INT_SRIGHT (register, 0x30, 8) , (const, 0x1, 4)
register_tm_clones, (register, 0x207, 1) INT_SLESS (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (register, 0x206, 1) INT_EQUAL (register, 0x30, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x12c00, 8) INT_AND (register, 0x30, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
register_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
register_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
register_tm_clones,  ---  CBRANCH (ram, 0x400738, 8) , (register, 0x206, 1)
register_tm_clones, (register, 0x0, 8) COPY (const, 0x0, 8)
register_tm_clones, (register, 0x200, 1) COPY (const, 0x0, 1)
register_tm_clones, (register, 0x20b, 1) COPY (const, 0x0, 1)
register_tm_clones, (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x0, 8)
register_tm_clones, (register, 0x207, 1) INT_SLESS (unique, 0x59300, 8) , (const, 0x0, 8)
register_tm_clones, (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8)
register_tm_clones, (unique, 0x12c00, 8) INT_AND (unique, 0x59300, 8) , (const, 0xff, 8)
register_tm_clones, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
register_tm_clones, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
register_tm_clones, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
register_tm_clones,  ---  CBRANCH (ram, 0x400738, 8) , (register, 0x206, 1)
register_tm_clones, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
register_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
register_tm_clones, (register, 0x38, 8) COPY (const, 0x601060, 8)
register_tm_clones,  ---  BRANCHIND (register, 0x0, 8)
register_tm_clones, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
register_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
register_tm_clones, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
register_tm_clones, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
register_tm_clones,  ---  RETURN (register, 0x288, 8)
__do_global_dtors_aux, (register, 0x200, 1) INT_LESS (ram, 0x60105f, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (register, 0x20b, 1) INT_SBORROW (ram, 0x60105f, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x27d00, 1) INT_SUB (ram, 0x60105f, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (register, 0x207, 1) INT_SLESS (unique, 0x27d00, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (register, 0x206, 1) INT_EQUAL (unique, 0x27d00, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x12c00, 1) INT_AND (unique, 0x27d00, 1) , (const, 0xff, 1)
__do_global_dtors_aux, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 1)
__do_global_dtors_aux, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__do_global_dtors_aux, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1)
__do_global_dtors_aux,  ---  CBRANCH (ram, 0x40075a, 8) , (unique, 0xc680, 1)
__do_global_dtors_aux, (unique, 0xe780, 8) COPY (register, 0x28, 8)
__do_global_dtors_aux, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__do_global_dtors_aux,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__do_global_dtors_aux, (register, 0x28, 8) COPY (register, 0x20, 8)
__do_global_dtors_aux, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__do_global_dtors_aux,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x400752, 8)
__do_global_dtors_aux,  ---  CALL (ram, 0x4006c0, 8)
__do_global_dtors_aux, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__do_global_dtors_aux, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__do_global_dtors_aux, (ram, 0x60105f, 1) COPY (const, 0x1, 1)
__do_global_dtors_aux, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__do_global_dtors_aux, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__do_global_dtors_aux,  ---  RETURN (register, 0x288, 8)
frame_dummy, (register, 0x38, 8) COPY (const, 0x600e20, 8)
frame_dummy, (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)
frame_dummy, (register, 0x200, 1) INT_LESS (unique, 0xbe00, 8) , (const, 0x0, 8)
frame_dummy, (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)
frame_dummy, (register, 0x20b, 1) INT_SBORROW (unique, 0xbe00, 8) , (const, 0x0, 8)
frame_dummy, (unique, 0xbe00, 8) LOAD (const, 0x1b1, 4) , (register, 0x38, 8)
frame_dummy, (unique, 0x28300, 8) INT_SUB (unique, 0xbe00, 8) , (const, 0x0, 8)
frame_dummy, (register, 0x207, 1) INT_SLESS (unique, 0x28300, 8) , (const, 0x0, 8)
frame_dummy, (register, 0x206, 1) INT_EQUAL (unique, 0x28300, 8) , (const, 0x0, 8)
frame_dummy, (unique, 0x12c00, 8) INT_AND (unique, 0x28300, 8) , (const, 0xff, 8)
frame_dummy, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
frame_dummy, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
frame_dummy, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
frame_dummy, (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1)
frame_dummy,  ---  CBRANCH (ram, 0x400770, 8) , (unique, 0xc680, 1)
frame_dummy,  ---  BRANCH (ram, 0x400700, 8)
frame_dummy, (register, 0x0, 8) COPY (const, 0x0, 8)
frame_dummy, (register, 0x200, 1) COPY (const, 0x0, 1)
frame_dummy, (register, 0x20b, 1) COPY (const, 0x0, 1)
frame_dummy, (unique, 0x59300, 8) INT_AND (register, 0x0, 8) , (register, 0x0, 8)
frame_dummy, (register, 0x207, 1) INT_SLESS (unique, 0x59300, 8) , (const, 0x0, 8)
frame_dummy, (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8)
frame_dummy, (unique, 0x12c00, 8) INT_AND (unique, 0x59300, 8) , (const, 0xff, 8)
frame_dummy, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
frame_dummy, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
frame_dummy, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
frame_dummy,  ---  CBRANCH (ram, 0x40076b, 8) , (register, 0x206, 1)
frame_dummy, (unique, 0xe780, 8) COPY (register, 0x28, 8)
frame_dummy, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
frame_dummy,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
frame_dummy, (register, 0x28, 8) COPY (register, 0x20, 8)
frame_dummy, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
frame_dummy,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x400780, 8)
frame_dummy,  ---  CALLIND (register, 0x0, 8)
frame_dummy, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
frame_dummy, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
frame_dummy,  ---  BRANCH (ram, 0x400700, 8)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0xb8, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0xb8, 4) COPY (register, 0x38, 4)
__libc_csu_init, (register, 0xb8, 8) INT_ZEXT (register, 0xb8, 4)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0xb0, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0xb0, 8) COPY (register, 0x30, 8)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0xa8, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0xa8, 8) COPY (register, 0x10, 8)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0xa0, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0xa0, 8) COPY (const, 0x600e10, 8)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0x28, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0x28, 8) COPY (const, 0x600e18, 8)
__libc_csu_init, (unique, 0xe780, 8) COPY (register, 0x18, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (unique, 0xe780, 8)
__libc_csu_init, (register, 0x200, 1) INT_LESS (register, 0x28, 8) , (register, 0xa0, 8)
__libc_csu_init, (register, 0x20b, 1) INT_SBORROW (register, 0x28, 8) , (register, 0xa0, 8)
__libc_csu_init, (register, 0x28, 8) INT_SUB (register, 0x28, 8) , (register, 0xa0, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (register, 0x28, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (register, 0x28, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (register, 0x28, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (register, 0x200, 1) COPY (const, 0x0, 1)
__libc_csu_init, (register, 0x20b, 1) COPY (const, 0x0, 1)
__libc_csu_init, (register, 0x18, 4) INT_XOR (register, 0x18, 4) , (register, 0x18, 4)
__libc_csu_init, (register, 0x18, 8) INT_ZEXT (register, 0x18, 4)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (register, 0x18, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (register, 0x18, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x12c00, 4) INT_AND (register, 0x18, 4) , (const, 0xff, 4)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 4)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x51b80, 4) INT_AND (const, 0x3, 4) , (const, 0x3f, 4)
__libc_csu_init, (unique, 0x51c00, 8) COPY (register, 0x28, 8)
__libc_csu_init, (register, 0x28, 8) INT_SRIGHT (register, 0x28, 8) , (unique, 0x51b80, 4)
__libc_csu_init, (unique, 0x15980, 1) INT_NOTEQUAL (unique, 0x51b80, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x15a00, 4) INT_SUB (unique, 0x51b80, 4) , (const, 0x1, 4)
__libc_csu_init, (unique, 0x15a80, 8) INT_SRIGHT (unique, 0x51c00, 8) , (unique, 0x15a00, 4)
__libc_csu_init, (unique, 0x15b00, 8) INT_AND (unique, 0x15a80, 8) , (const, 0x1, 8)
__libc_csu_init, (unique, 0x15c00, 1) INT_NOTEQUAL (unique, 0x15b00, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x15c80, 1) BOOL_NEGATE (unique, 0x15980, 1)
__libc_csu_init, (unique, 0x15d00, 1) INT_AND (unique, 0x15c80, 1) , (register, 0x200, 1)
__libc_csu_init, (unique, 0x15d80, 1) INT_AND (unique, 0x15980, 1) , (unique, 0x15c00, 1)
__libc_csu_init, (register, 0x200, 1) INT_OR (unique, 0x15d00, 1) , (unique, 0x15d80, 1)
__libc_csu_init, (unique, 0x15f00, 1) INT_EQUAL (unique, 0x51b80, 4) , (const, 0x1, 4)
__libc_csu_init, (unique, 0x15f80, 1) BOOL_NEGATE (unique, 0x15f00, 1)
__libc_csu_init, (register, 0x20b, 1) INT_AND (unique, 0x15f80, 1) , (register, 0x20b, 1)
__libc_csu_init, (unique, 0x12e80, 1) INT_NOTEQUAL (unique, 0x51b80, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x12f80, 1) INT_SLESS (register, 0x28, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x13000, 1) BOOL_NEGATE (unique, 0x12e80, 1)
__libc_csu_init, (unique, 0x13080, 1) INT_AND (unique, 0x13000, 1) , (register, 0x207, 1)
__libc_csu_init, (unique, 0x13100, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x12f80, 1)
__libc_csu_init, (register, 0x207, 1) INT_OR (unique, 0x13080, 1) , (unique, 0x13100, 1)
__libc_csu_init, (unique, 0x13280, 1) INT_EQUAL (register, 0x28, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x13300, 1) BOOL_NEGATE (unique, 0x12e80, 1)
__libc_csu_init, (unique, 0x13380, 1) INT_AND (unique, 0x13300, 1) , (register, 0x206, 1)
__libc_csu_init, (unique, 0x13400, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13280, 1)
__libc_csu_init, (register, 0x206, 1) INT_OR (unique, 0x13380, 1) , (unique, 0x13400, 1)
__libc_csu_init, (unique, 0x13500, 8) INT_AND (register, 0x28, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x13580, 1) POPCOUNT (unique, 0x13500, 8)
__libc_csu_init, (unique, 0x13600, 1) INT_AND (unique, 0x13580, 1) , (const, 0x1, 1)
__libc_csu_init, (unique, 0x13700, 1) INT_EQUAL (unique, 0x13600, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x13780, 1) BOOL_NEGATE (unique, 0x12e80, 1)
__libc_csu_init, (unique, 0x13800, 1) INT_AND (unique, 0x13780, 1) , (register, 0x202, 1)
__libc_csu_init, (unique, 0x13880, 1) INT_AND (unique, 0x12e80, 1) , (unique, 0x13700, 1)
__libc_csu_init, (register, 0x202, 1) INT_OR (unique, 0x13800, 1) , (unique, 0x13880, 1)
__libc_csu_init, (register, 0x200, 1) INT_LESS (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x20b, 1) INT_SBORROW (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x4007c3, 8)
__libc_csu_init,  ---  CALL (ram, 0x400630, 8)
__libc_csu_init, (register, 0x200, 1) COPY (const, 0x0, 1)
__libc_csu_init, (register, 0x20b, 1) COPY (const, 0x0, 1)
__libc_csu_init, (unique, 0x59300, 8) INT_AND (register, 0x28, 8) , (register, 0x28, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (unique, 0x59300, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (unique, 0x59300, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (unique, 0x59300, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init,  ---  CBRANCH (ram, 0x4007e6, 8) , (register, 0x206, 1)
__libc_csu_init, (unique, 0x3f00, 8) INT_MULT (register, 0x0, 8) , (const, 0x1, 8)
__libc_csu_init, (unique, 0x4000, 8) INT_ADD (register, 0x0, 8) , (unique, 0x3f00, 8)
__libc_csu_init, (register, 0x10, 8) COPY (register, 0xa8, 8)
__libc_csu_init, (register, 0x30, 8) COPY (register, 0xb0, 8)
__libc_csu_init, (register, 0x38, 4) COPY (register, 0xb8, 4)
__libc_csu_init, (register, 0x38, 8) INT_ZEXT (register, 0x38, 4)
__libc_csu_init, (unique, 0x3300, 8) INT_MULT (register, 0x18, 8) , (const, 0x8, 8)
__libc_csu_init, (unique, 0x3400, 8) INT_ADD (register, 0xa0, 8) , (unique, 0x3300, 8)
__libc_csu_init, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  STORE (const, 0x1b1, 8) , (register, 0x20, 8) , (const, 0x4007dd, 8)
__libc_csu_init, (unique, 0xbd80, 8) LOAD (const, 0x1b1, 4) , (unique, 0x3400, 8)
__libc_csu_init,  ---  CALLIND (unique, 0xbd80, 8)
__libc_csu_init, (register, 0x200, 1) INT_CARRY (register, 0x18, 8) , (const, 0x1, 8)
__libc_csu_init, (register, 0x20b, 1) INT_SCARRY (register, 0x18, 8) , (const, 0x1, 8)
__libc_csu_init, (register, 0x18, 8) INT_ADD (register, 0x18, 8) , (const, 0x1, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (register, 0x18, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (register, 0x18, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (register, 0x18, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (register, 0x200, 1) INT_LESS (register, 0x18, 8) , (register, 0x28, 8)
__libc_csu_init, (register, 0x20b, 1) INT_SBORROW (register, 0x18, 8) , (register, 0x28, 8)
__libc_csu_init, (unique, 0x28700, 8) INT_SUB (register, 0x18, 8) , (register, 0x28, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (unique, 0x28700, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (unique, 0x28700, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (unique, 0x28700, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0xc680, 1) BOOL_NEGATE (register, 0x206, 1)
__libc_csu_init,  ---  CBRANCH (ram, 0x4007d0, 8) , (unique, 0xc680, 1)
__libc_csu_init, (register, 0x200, 1) INT_CARRY (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x20b, 1) INT_SCARRY (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
__libc_csu_init, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
__libc_csu_init, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
__libc_csu_init, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
__libc_csu_init, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
__libc_csu_init, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
__libc_csu_init, (register, 0x18, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x28, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0xa0, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0xa8, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0xb0, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0xb8, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_init, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_init,  ---  RETURN (register, 0x288, 8)
__libc_csu_fini, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
__libc_csu_fini, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
__libc_csu_fini,  ---  RETURN (register, 0x288, 8)
_fini, (register, 0x200, 1) INT_LESS (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x20b, 1) INT_SBORROW (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x20, 8) INT_SUB (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
_fini, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
_fini, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
_fini, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_fini, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_fini, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_fini, (register, 0x200, 1) INT_CARRY (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x20b, 1) INT_SCARRY (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
_fini, (register, 0x207, 1) INT_SLESS (register, 0x20, 8) , (const, 0x0, 8)
_fini, (register, 0x206, 1) INT_EQUAL (register, 0x20, 8) , (const, 0x0, 8)
_fini, (unique, 0x12c00, 8) INT_AND (register, 0x20, 8) , (const, 0xff, 8)
_fini, (unique, 0x12c80, 1) POPCOUNT (unique, 0x12c00, 8)
_fini, (unique, 0x12d00, 1) INT_AND (unique, 0x12c80, 1) , (const, 0x1, 1)
_fini, (register, 0x202, 1) INT_EQUAL (unique, 0x12d00, 1) , (const, 0x0, 1)
_fini, (register, 0x288, 8) LOAD (const, 0x1b1, 8) , (register, 0x20, 8)
_fini, (register, 0x20, 8) INT_ADD (register, 0x20, 8) , (const, 0x8, 8)
_fini,  ---  RETURN (register, 0x288, 8)
