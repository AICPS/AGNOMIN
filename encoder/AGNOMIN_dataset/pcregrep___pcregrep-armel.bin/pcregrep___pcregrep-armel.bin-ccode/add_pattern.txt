
patstr * add_pattern(char *s,patstr *after)

{
  patstr *ppVar1;
  patstr *ppVar2;
  patstr *ppVar3;
  bool bVar4;
  
  ppVar1 = (patstr *)malloc(0x10);
  if (ppVar1 == (patstr *)0x0) {
    fwrite("pcregrep: malloc failed\n",1,0x18,stderr);
                    /* WARNING: Subroutine does not return */
    pcregrep_exit(2);
  }
  ppVar2 = (patstr *)strlen(s);
  if ((patstr *)0x2000 < ppVar2) {
    __fprintf_chk(stderr,1,"pcregrep: pattern is too long (limit is %d bytes)\n",0x2000);
    return (patstr *)0x0;
  }
  ppVar1->string = s;
  bVar4 = after == (patstr *)0x0;
  if (!bVar4) {
    ppVar2 = ppVar1;
  }
  ppVar1->next = (patstr *)0x0;
  if (bVar4) {
    ppVar2 = ppVar1;
  }
  ppVar1->compiled = (pcre *)0x0;
  ppVar1->hint = (pcre_extra *)0x0;
  if (!bVar4) {
    ppVar3 = after->next;
    after->next = ppVar1;
    ppVar1->next = ppVar3;
  }
  return ppVar2;
}

