
int handle_option(int letter,int options)

{
  undefined4 uVar1;
  undefined4 uVar2;
  char *pcVar3;
  int iVar4;
  option_item *poVar5;
  char *__s;
  char s [4];
  
  uVar1 = stdout;
  iVar4 = __stack_chk_guard;
  switch(letter) {
  case 0:
    break;
  case 1:
    break;
  case 2:
    break;
  case 3:
    break;
  case 4:
    break;
  case 5:
    break;
  case 6:
    break;
  case 7:
    break;
  case 8:
    break;
  case 9:
    break;
  case 10:
    break;
  case 0xb:
    break;
  case 0xc:
    break;
  case 0xd:
    break;
  case 0xe:
    break;
  case 0xf:
    break;
  case 0x10:
    break;
  case 0x11:
    break;
  case 0x12:
    break;
  case 0x13:
    break;
  case 0x14:
    break;
  case 0x15:
    break;
  case 0x16:
    break;
  case 0x17:
    break;
  case 0x18:
    break;
  case 0x19:
    break;
  case 0x1a:
    break;
  case 0x1b:
    break;
  case 0x1c:
    break;
  case 0x1d:
    break;
  case 0x1e:
    break;
  case 0x1f:
    break;
  case 0x20:
    break;
  case 0x21:
    break;
  case 0x22:
    break;
  case 0x23:
    break;
  case 0x24:
    break;
  case 0x25:
    break;
  case 0x26:
    break;
  case 0x27:
    break;
  case 0x28:
    break;
  case 0x29:
    break;
  case 0x2a:
    break;
  case 0x2b:
    break;
  case 0x2c:
    break;
  case 0x2d:
    break;
  case 0x2e:
    break;
  case 0x2f:
    break;
  case 0x30:
    break;
  case 0x31:
    break;
  case 0x32:
    break;
  case 0x33:
    break;
  case 0x34:
    break;
  case 0x35:
    break;
  case 0x36:
    break;
  case 0x37:
    break;
  case 0x38:
    break;
  case 0x39:
    break;
  case 0x3a:
    break;
  case 0x3b:
    break;
  case 0x3c:
    break;
  case 0x3d:
    break;
  case 0x3e:
    break;
  case 0x3f:
    break;
  case 0x40:
    break;
  case 0x41:
    break;
  case 0x42:
    break;
  case 0x43:
    break;
  case 0x44:
    break;
  case 0x45:
    break;
  case 0x46:
    process_options = process_options | 4;
    goto LAB_00015af4;
  case 0x47:
    break;
  case 0x48:
    filenames = 4;
    goto LAB_00015af4;
  case 0x49:
    binary_files = 1;
    goto LAB_00015af4;
  case 0x4a:
    break;
  case 0x4b:
    break;
  case 0x4c:
    filenames = 3;
    goto LAB_00015af4;
  case 0x4d:
    options = options | 0x40002;
    multiline = 1;
    goto LAB_00015af4;
  case 0x4e:
    break;
  case 0x4f:
    break;
  case 0x50:
    break;
  case 0x51:
    break;
  case 0x52:
    break;
  case 0x53:
    break;
  case 0x54:
    break;
  case 0x55:
    break;
  case 0x56:
    uVar2 = pcre_version();
    __fprintf_chk(uVar1,1,"pcregrep version %s\n",uVar2);
                    /* WARNING: Subroutine does not return */
    pcregrep_exit(0);
  case 0x57:
    break;
  case 0x58:
    break;
  case 0x59:
    break;
  case 0x5a:
    break;
  case 0x5b:
    break;
  case 0x5c:
    break;
  case 0x5d:
    break;
  case 0x5e:
    break;
  case 0x5f:
    break;
  case 0x60:
    break;
  case 0x61:
    binary_files = 2;
    goto LAB_00015af4;
  case 0x62:
    break;
  case 99:
    count_only = 1;
    goto LAB_00015af4;
  case 100:
    break;
  case 0x65:
    break;
  case 0x66:
    break;
  case 0x67:
    break;
  case 0x68:
    filenames = 0;
    goto LAB_00015af4;
  case 0x69:
    options = options | 1;
    goto LAB_00015af4;
  case 0x6a:
    break;
  case 0x6b:
    break;
  case 0x6c:
    omit_zero_count = 1;
    filenames = 2;
    goto LAB_00015af4;
  case 0x6d:
    break;
  case 0x6e:
    number = 1;
    goto LAB_00015af4;
  case 0x6f:
    only_matching_last = add_number(0,only_matching_last);
    if (only_matching == (omstr *)0x0) {
      only_matching = only_matching_last;
    }
    goto LAB_00015af4;
  case 0x70:
    break;
  case 0x71:
    quiet = 1;
    goto LAB_00015af4;
  case 0x72:
    dee_action = 2;
    goto LAB_00015af4;
  case 0x73:
    silent = 1;
    goto LAB_00015af4;
  case 0x74:
    break;
  case 0x75:
    options = options | 0x800;
    utf8 = 1;
    goto LAB_00015af4;
  case 0x76:
    invert = 1;
    goto LAB_00015af4;
  case 0x77:
    process_options = process_options | 1;
    goto LAB_00015af4;
  case 0x78:
    process_options = process_options | 2;
LAB_00015af4:
    if (iVar4 == __stack_chk_guard) {
      return options;
    }
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  case -0x10:
    study_options = study_options & 0xfffffffe;
    goto LAB_00015af4;
  case -0xf:
    break;
  case -0xe:
    break;
  case -0xd:
    break;
  case -0xc:
    line_buffered = 1;
    goto LAB_00015af4;
  case -0xb:
    file_offsets = 1;
    goto LAB_00015af4;
  case -10:
    number = 1;
    line_offsets = 1;
    goto LAB_00015af4;
  case -9:
    break;
  case -8:
    break;
  case -7:
    break;
  case -6:
    break;
  case -5:
    break;
  case -4:
    puts("Usage: pcregrep [OPTION]... [PATTERN] [FILE1 FILE2 ...]");
    puts("Search for PATTERN in each FILE or standard input.");
    puts("PATTERN must be present if neither -e nor -f is used.");
    puts("\"-\" can be used as a file name to mean STDIN.");
    puts("All files are read as plain files, without any interpretation.\n");
    puts("Example: pcregrep -i \'hello.*world\' menu.h main.c\n");
    puts("Options:");
    if (optionlist[0].one_char != 0) {
      poVar5 = optionlist;
      iVar4 = optionlist[0].one_char;
      do {
        __s = poVar5->long_name;
        pcVar3 = strchr(__s,0x5f);
        if (pcVar3 == (char *)0x0) {
          if (iVar4 < 1) {
            s = 0x202020;
LAB_00015dd4:
            iVar4 = __printf_chk(1,"  %s --%s",s,__s);
          }
          else {
            if (*__s != '\0') {
              __sprintf_chk(s,1,4,&DAT_000167c4,iVar4);
              __s = poVar5->long_name;
              goto LAB_00015dd4;
            }
            iVar4 = __printf_chk(1,"  -%c",iVar4);
          }
          iVar4 = 0x1f - iVar4;
          if (iVar4 < 1) {
            iVar4 = 1;
          }
          __printf_chk(1,"%.*s%s\n",iVar4,"                           ",poVar5->help_text);
        }
        iVar4 = poVar5[1].one_char;
        poVar5 = poVar5 + 1;
      } while (iVar4 != 0);
    }
    puts("\nNumbers may be followed by K or M, e.g. --buffer-size=100K.");
    __printf_chk(1,"The default value for --buffer-size is %d.\n",0x5000);
    puts("When reading patterns or file names from a file, trailing white");
    puts("space is removed and blank lines are ignored.");
    __printf_chk(1,"The maximum size of any pattern is %d bytes.\n",0x2000);
    puts("\nWith no FILEs, read standard input. If fewer than two FILEs given, assume -h.");
    puts("Exit status is 0 if any matches, 1 if no matches, and 2 if trouble.");
                    /* WARNING: Subroutine does not return */
    pcregrep_exit(0);
  case -3:
    break;
  case -2:
    break;
  case -1:
  }
  iVar4 = __fprintf_chk(stderr,1,"pcregrep: Unknown option -%c\n",letter);
  iVar4 = usage(iVar4);
                    /* WARNING: Subroutine does not return */
  pcregrep_exit(iVar4);
}

