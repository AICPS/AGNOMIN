_init, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_init, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_init, (register, 0x58, 4) COPY (const, 0x10a34, 4)
_init,  ---  CALL (ram, 0x111ec, 4)
_init, (register, 0x80, 4) COPY (register, 0x54, 4)
_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_init, (register, 0x54, 4) COPY (register, 0x80, 4)
_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_init,  ---  RETURN (register, 0x5c, 4)
calloc, (register, 0x50, 4) COPY (const, 0x10a54, 4)
calloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
calloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
calloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
calloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
calloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
calloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
calloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
calloc, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
calloc, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
calloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
calloc, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
calloc, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
calloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x5b8, 4)
calloc, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
calloc, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
calloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
calloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
calloc, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
calloc,  ---  BRANCHIND (register, 0x5c, 4)
raise, (register, 0x50, 4) COPY (const, 0x10a60, 4)
raise, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
raise, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
raise, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
raise, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
raise, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
raise, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
raise, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
raise, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
raise, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
raise, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
raise, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
raise, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
raise, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x5b0, 4)
raise, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
raise, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
raise, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
raise, (register, 0x69, 1) COPY (register, 0xb0, 1)
raise, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
raise,  ---  BRANCHIND (register, 0x5c, 4)
strcmp, (register, 0x50, 4) COPY (const, 0x10a6c, 4)
strcmp, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strcmp, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strcmp, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strcmp, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strcmp, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strcmp, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strcmp, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strcmp, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strcmp, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strcmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strcmp, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strcmp, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strcmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x5a8, 4)
strcmp, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strcmp, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strcmp, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strcmp, (register, 0x69, 1) COPY (register, 0xb0, 1)
strcmp, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strcmp,  ---  BRANCHIND (register, 0x5c, 4)
strtol, (register, 0x50, 4) COPY (const, 0x10a78, 4)
strtol, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strtol, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strtol, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strtol, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strtol, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strtol, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strtol, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strtol, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strtol, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strtol, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strtol, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strtol, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strtol, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x5a0, 4)
strtol, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strtol, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strtol, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strtol, (register, 0x69, 1) COPY (register, 0xb0, 1)
strtol, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strtol,  ---  BRANCHIND (register, 0x5c, 4)
free, (register, 0x50, 4) COPY (const, 0x10a84, 4)
free, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
free, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
free, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
free, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
free, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
free, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
free, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
free, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
free, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
free, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
free, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
free, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
free, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x598, 4)
free, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
free, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
free, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
free, (register, 0x69, 1) COPY (register, 0xb0, 1)
free, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
free,  ---  BRANCHIND (register, 0x5c, 4)
memcpy, (register, 0x50, 4) COPY (const, 0x10a90, 4)
memcpy, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
memcpy, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
memcpy, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
memcpy, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
memcpy, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
memcpy, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
memcpy, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
memcpy, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
memcpy, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
memcpy, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
memcpy, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
memcpy, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
memcpy, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x590, 4)
memcpy, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
memcpy, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
memcpy, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
memcpy, (register, 0x69, 1) COPY (register, 0xb0, 1)
memcpy, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
memcpy,  ---  BRANCHIND (register, 0x5c, 4)
__memset_chk, (register, 0x50, 4) COPY (const, 0x10a9c, 4)
__memset_chk, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__memset_chk, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__memset_chk, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__memset_chk, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__memset_chk, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__memset_chk, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__memset_chk, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__memset_chk, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__memset_chk, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__memset_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__memset_chk, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__memset_chk, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__memset_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x588, 4)
__memset_chk, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__memset_chk, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__memset_chk, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__memset_chk, (register, 0x69, 1) COPY (register, 0xb0, 1)
__memset_chk, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__memset_chk,  ---  BRANCHIND (register, 0x5c, 4)
time, (register, 0x50, 4) COPY (const, 0x10aa8, 4)
time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
time, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
time, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
time, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
time, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
time, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
time, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
time, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x580, 4)
time, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
time, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
time, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
time, (register, 0x69, 1) COPY (register, 0xb0, 1)
time, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
time,  ---  BRANCHIND (register, 0x5c, 4)
memcmp, (register, 0x50, 4) COPY (const, 0x10ab4, 4)
memcmp, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
memcmp, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
memcmp, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
memcmp, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
memcmp, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
memcmp, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
memcmp, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
memcmp, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
memcmp, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
memcmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
memcmp, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
memcmp, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
memcmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x578, 4)
memcmp, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
memcmp, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
memcmp, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
memcmp, (register, 0x69, 1) COPY (register, 0xb0, 1)
memcmp, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
memcmp,  ---  BRANCHIND (register, 0x5c, 4)
ctime, (register, 0x50, 4) COPY (const, 0x10ac0, 4)
ctime, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
ctime, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
ctime, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ctime, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
ctime, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ctime, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ctime, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ctime, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
ctime, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
ctime, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
ctime, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
ctime, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
ctime, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x570, 4)
ctime, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
ctime, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
ctime, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ctime, (register, 0x69, 1) COPY (register, 0xb0, 1)
ctime, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
ctime,  ---  BRANCHIND (register, 0x5c, 4)
__stack_chk_fail, (register, 0x50, 4) COPY (const, 0x10acc, 4)
__stack_chk_fail, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__stack_chk_fail, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__stack_chk_fail, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__stack_chk_fail, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__stack_chk_fail, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__stack_chk_fail, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__stack_chk_fail, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__stack_chk_fail, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__stack_chk_fail, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__stack_chk_fail, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__stack_chk_fail, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__stack_chk_fail, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__stack_chk_fail, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x568, 4)
__stack_chk_fail, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__stack_chk_fail, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__stack_chk_fail, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__stack_chk_fail, (register, 0x69, 1) COPY (register, 0xb0, 1)
__stack_chk_fail, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__stack_chk_fail,  ---  BRANCHIND (register, 0x5c, 4)
realloc, (register, 0x50, 4) COPY (const, 0x10ad8, 4)
realloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
realloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
realloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
realloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
realloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
realloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
realloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
realloc, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
realloc, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
realloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
realloc, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
realloc, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
realloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x560, 4)
realloc, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
realloc, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
realloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
realloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
realloc, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
realloc,  ---  BRANCHIND (register, 0x5c, 4)
perror, (register, 0x50, 4) COPY (const, 0x10ae4, 4)
perror, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
perror, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
perror, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
perror, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
perror, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
perror, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
perror, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
perror, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
perror, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
perror, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
perror, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
perror, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
perror, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x558, 4)
perror, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
perror, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
perror, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
perror, (register, 0x69, 1) COPY (register, 0xb0, 1)
perror, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
perror,  ---  BRANCHIND (register, 0x5c, 4)
fwrite, (register, 0x50, 4) COPY (const, 0x10af0, 4)
fwrite, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fwrite, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fwrite, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fwrite, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fwrite, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fwrite, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fwrite, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fwrite, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fwrite, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fwrite, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fwrite, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fwrite, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fwrite, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x550, 4)
fwrite, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fwrite, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fwrite, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fwrite, (register, 0x69, 1) COPY (register, 0xb0, 1)
fwrite, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fwrite,  ---  BRANCHIND (register, 0x5c, 4)
fread, (register, 0x50, 4) COPY (const, 0x10afc, 4)
fread, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fread, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fread, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fread, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fread, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fread, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fread, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fread, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fread, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fread, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fread, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fread, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fread, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x548, 4)
fread, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fread, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fread, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fread, (register, 0x69, 1) COPY (register, 0xb0, 1)
fread, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fread,  ---  BRANCHIND (register, 0x5c, 4)
error, (register, 0x50, 4) COPY (const, 0x10b08, 4)
error, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
error, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
error, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
error, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
error, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
error, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
error, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
error, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
error, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
error, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
error, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
error, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
error, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x540, 4)
error, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
error, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
error, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
error, (register, 0x69, 1) COPY (register, 0xb0, 1)
error, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
error,  ---  BRANCHIND (register, 0x5c, 4)
getenv, (register, 0x50, 4) COPY (const, 0x10b14, 4)
getenv, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
getenv, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
getenv, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
getenv, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
getenv, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
getenv, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
getenv, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
getenv, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
getenv, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
getenv, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
getenv, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
getenv, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
getenv, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x538, 4)
getenv, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
getenv, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
getenv, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
getenv, (register, 0x69, 1) COPY (register, 0xb0, 1)
getenv, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
getenv,  ---  BRANCHIND (register, 0x5c, 4)
puts, (register, 0x50, 4) COPY (const, 0x10b20, 4)
puts, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
puts, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
puts, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
puts, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
puts, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
puts, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
puts, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
puts, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
puts, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
puts, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
puts, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
puts, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
puts, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x530, 4)
puts, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
puts, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
puts, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
puts, (register, 0x69, 1) COPY (register, 0xb0, 1)
puts, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
puts,  ---  BRANCHIND (register, 0x5c, 4)
malloc, (register, 0x50, 4) COPY (const, 0x10b2c, 4)
malloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
malloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
malloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
malloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
malloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
malloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
malloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
malloc, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
malloc, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
malloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
malloc, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
malloc, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
malloc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x528, 4)
malloc, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
malloc, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
malloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
malloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
malloc, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
malloc,  ---  BRANCHIND (register, 0x5c, 4)
__libc_start_main, (register, 0x50, 4) COPY (const, 0x10b38, 4)
__libc_start_main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__libc_start_main, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__libc_start_main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__libc_start_main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__libc_start_main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__libc_start_main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__libc_start_main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__libc_start_main, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__libc_start_main, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__libc_start_main, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__libc_start_main, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__libc_start_main, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__libc_start_main, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x520, 4)
__libc_start_main, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__libc_start_main, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__libc_start_main, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__libc_start_main, (register, 0x69, 1) COPY (register, 0xb0, 1)
__libc_start_main, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__libc_start_main,  ---  BRANCHIND (register, 0x5c, 4)
localtime, (register, 0x50, 4) COPY (const, 0x10b44, 4)
localtime, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
localtime, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
localtime, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
localtime, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
localtime, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
localtime, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
localtime, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
localtime, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
localtime, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
localtime, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
localtime, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
localtime, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
localtime, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x518, 4)
localtime, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
localtime, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
localtime, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
localtime, (register, 0x69, 1) COPY (register, 0xb0, 1)
localtime, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
localtime,  ---  BRANCHIND (register, 0x5c, 4)
__ctype_b_loc, (register, 0x50, 4) COPY (const, 0x10b5c, 4)
__ctype_b_loc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__ctype_b_loc, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__ctype_b_loc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__ctype_b_loc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__ctype_b_loc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__ctype_b_loc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__ctype_b_loc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__ctype_b_loc, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__ctype_b_loc, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__ctype_b_loc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__ctype_b_loc, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__ctype_b_loc, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__ctype_b_loc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x508, 4)
__ctype_b_loc, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__ctype_b_loc, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__ctype_b_loc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__ctype_b_loc, (register, 0x69, 1) COPY (register, 0xb0, 1)
__ctype_b_loc, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__ctype_b_loc,  ---  BRANCHIND (register, 0x5c, 4)
exit, (register, 0x50, 4) COPY (const, 0x10b68, 4)
exit, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
exit, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
exit, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
exit, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
exit, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
exit, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
exit, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
exit, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
exit, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
exit, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
exit, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
exit, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
exit, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x500, 4)
exit, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
exit, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
exit, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
exit, (register, 0x69, 1) COPY (register, 0xb0, 1)
exit, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
exit,  ---  BRANCHIND (register, 0x5c, 4)
strlen, (register, 0x50, 4) COPY (const, 0x10b74, 4)
strlen, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strlen, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strlen, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strlen, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strlen, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strlen, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strlen, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strlen, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strlen, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strlen, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strlen, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strlen, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strlen, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4f8, 4)
strlen, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strlen, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strlen, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strlen, (register, 0x69, 1) COPY (register, 0xb0, 1)
strlen, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strlen,  ---  BRANCHIND (register, 0x5c, 4)
strchr, (register, 0x50, 4) COPY (const, 0x10b80, 4)
strchr, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strchr, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strchr, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strchr, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strchr, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strchr, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strchr, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strchr, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strchr, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strchr, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strchr, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strchr, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strchr, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4f0, 4)
strchr, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strchr, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strchr, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strchr, (register, 0x69, 1) COPY (register, 0xb0, 1)
strchr, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strchr,  ---  BRANCHIND (register, 0x5c, 4)
__sprintf_chk, (register, 0x50, 4) COPY (const, 0x10b8c, 4)
__sprintf_chk, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__sprintf_chk, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__sprintf_chk, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__sprintf_chk, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__sprintf_chk, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__sprintf_chk, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__sprintf_chk, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__sprintf_chk, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__sprintf_chk, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__sprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__sprintf_chk, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__sprintf_chk, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__sprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4e8, 4)
__sprintf_chk, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__sprintf_chk, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__sprintf_chk, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__sprintf_chk, (register, 0x69, 1) COPY (register, 0xb0, 1)
__sprintf_chk, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__sprintf_chk,  ---  BRANCHIND (register, 0x5c, 4)
memset, (register, 0x50, 4) COPY (const, 0x10b98, 4)
memset, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
memset, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
memset, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
memset, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
memset, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
memset, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
memset, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
memset, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
memset, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
memset, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
memset, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
memset, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
memset, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4e0, 4)
memset, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
memset, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
memset, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
memset, (register, 0x69, 1) COPY (register, 0xb0, 1)
memset, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
memset,  ---  BRANCHIND (register, 0x5c, 4)
strncpy, (register, 0x50, 4) COPY (const, 0x10ba4, 4)
strncpy, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strncpy, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strncpy, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strncpy, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strncpy, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strncpy, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strncpy, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strncpy, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strncpy, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strncpy, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strncpy, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strncpy, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strncpy, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4d8, 4)
strncpy, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strncpy, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strncpy, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strncpy, (register, 0x69, 1) COPY (register, 0xb0, 1)
strncpy, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strncpy,  ---  BRANCHIND (register, 0x5c, 4)
__printf_chk, (register, 0x50, 4) COPY (const, 0x10bb0, 4)
__printf_chk, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__printf_chk, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__printf_chk, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__printf_chk, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__printf_chk, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__printf_chk, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__printf_chk, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__printf_chk, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__printf_chk, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__printf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__printf_chk, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__printf_chk, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__printf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4d0, 4)
__printf_chk, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__printf_chk, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__printf_chk, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__printf_chk, (register, 0x69, 1) COPY (register, 0xb0, 1)
__printf_chk, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__printf_chk,  ---  BRANCHIND (register, 0x5c, 4)
__fprintf_chk, (register, 0x50, 4) COPY (const, 0x10bbc, 4)
__fprintf_chk, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__fprintf_chk, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__fprintf_chk, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__fprintf_chk, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__fprintf_chk, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__fprintf_chk, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__fprintf_chk, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__fprintf_chk, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__fprintf_chk, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__fprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__fprintf_chk, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__fprintf_chk, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__fprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4c8, 4)
__fprintf_chk, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__fprintf_chk, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__fprintf_chk, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__fprintf_chk, (register, 0x69, 1) COPY (register, 0xb0, 1)
__fprintf_chk, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__fprintf_chk,  ---  BRANCHIND (register, 0x5c, 4)
fclose, (register, 0x50, 4) COPY (const, 0x10bc8, 4)
fclose, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fclose, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fclose, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fclose, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fclose, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fclose, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fclose, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fclose, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fclose, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fclose, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fclose, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fclose, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fclose, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4c0, 4)
fclose, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fclose, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fclose, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fclose, (register, 0x69, 1) COPY (register, 0xb0, 1)
fclose, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fclose,  ---  BRANCHIND (register, 0x5c, 4)
fputc, (register, 0x50, 4) COPY (const, 0x10bd4, 4)
fputc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fputc, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fputc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fputc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fputc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fputc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fputc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fputc, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fputc, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fputc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fputc, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fputc, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fputc, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4b8, 4)
fputc, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fputc, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fputc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fputc, (register, 0x69, 1) COPY (register, 0xb0, 1)
fputc, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fputc,  ---  BRANCHIND (register, 0x5c, 4)
fopen64, (register, 0x50, 4) COPY (const, 0x10be0, 4)
fopen64, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fopen64, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fopen64, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fopen64, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fopen64, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fopen64, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fopen64, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fopen64, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fopen64, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fopen64, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fopen64, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fopen64, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fopen64, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4b0, 4)
fopen64, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fopen64, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fopen64, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fopen64, (register, 0x69, 1) COPY (register, 0xb0, 1)
fopen64, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fopen64,  ---  BRANCHIND (register, 0x5c, 4)
fseek, (register, 0x50, 4) COPY (const, 0x10bec, 4)
fseek, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fseek, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fseek, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fseek, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fseek, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fseek, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fseek, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fseek, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fseek, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fseek, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fseek, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fseek, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fseek, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4a8, 4)
fseek, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fseek, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fseek, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fseek, (register, 0x69, 1) COPY (register, 0xb0, 1)
fseek, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fseek,  ---  BRANCHIND (register, 0x5c, 4)
fputs, (register, 0x50, 4) COPY (const, 0x10bf8, 4)
fputs, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
fputs, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
fputs, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fputs, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
fputs, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fputs, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fputs, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fputs, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
fputs, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
fputs, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
fputs, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
fputs, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
fputs, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x4a0, 4)
fputs, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
fputs, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
fputs, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fputs, (register, 0x69, 1) COPY (register, 0xb0, 1)
fputs, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
fputs,  ---  BRANCHIND (register, 0x5c, 4)
strncmp, (register, 0x50, 4) COPY (const, 0x10c04, 4)
strncmp, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
strncmp, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
strncmp, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
strncmp, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
strncmp, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
strncmp, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
strncmp, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
strncmp, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
strncmp, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
strncmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
strncmp, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
strncmp, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
strncmp, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x498, 4)
strncmp, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
strncmp, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
strncmp, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
strncmp, (register, 0x69, 1) COPY (register, 0xb0, 1)
strncmp, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
strncmp,  ---  BRANCHIND (register, 0x5c, 4)
abort, (register, 0x50, 4) COPY (const, 0x10c10, 4)
abort, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
abort, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
abort, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
abort, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
abort, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
abort, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
abort, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
abort, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
abort, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
abort, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
abort, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
abort, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
abort, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x490, 4)
abort, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
abort, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
abort, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
abort, (register, 0x69, 1) COPY (register, 0xb0, 1)
abort, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
abort,  ---  BRANCHIND (register, 0x5c, 4)
__snprintf_chk, (register, 0x50, 4) COPY (const, 0x10c1c, 4)
__snprintf_chk, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
__snprintf_chk, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
__snprintf_chk, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__snprintf_chk, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
__snprintf_chk, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__snprintf_chk, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__snprintf_chk, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__snprintf_chk, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
__snprintf_chk, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
__snprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
__snprintf_chk, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__snprintf_chk, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__snprintf_chk, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x488, 4)
__snprintf_chk, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
__snprintf_chk, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
__snprintf_chk, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__snprintf_chk, (register, 0x69, 1) COPY (register, 0xb0, 1)
__snprintf_chk, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
__snprintf_chk,  ---  BRANCHIND (register, 0x5c, 4)
ftello64, (register, 0x50, 4) COPY (const, 0x10c28, 4)
ftello64, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
ftello64, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
ftello64, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ftello64, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
ftello64, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ftello64, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ftello64, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ftello64, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
ftello64, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
ftello64, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
ftello64, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
ftello64, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
ftello64, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x480, 4)
ftello64, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
ftello64, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
ftello64, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ftello64, (register, 0x69, 1) COPY (register, 0xb0, 1)
ftello64, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
ftello64,  ---  BRANCHIND (register, 0x5c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x2c, 4) COPY (const, 0x5f08, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
main, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
main, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
main, (register, 0x3c, 4) COPY (const, 0x627c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
main, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x3c, 4) , (const, 0xffff, 4)
main, (register, 0x3c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x40, 4) COPY (const, 0x6284, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main, (register, 0x34, 4) COPY (register, 0x20, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x30, 4) COPY (register, 0x24, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x40, 4) , (const, 0xffff, 4)
main, (register, 0x40, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x44, 4) COPY (register, 0x20, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
main, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
main, (register, 0x38, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
main, (register, 0x58, 4) COPY (const, 0x10c78, 4)
main,  ---  CALL (ram, 0x12c38, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
main, (register, 0x28, 4) COPY (const, 0x54d0, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x111ac, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
main, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x4c, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x20, 4) COPY (register, 0x34, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
main, (register, 0x24, 4) COPY (register, 0x30, 4)
main, (register, 0x58, 4) COPY (const, 0x10c9c, 4)
main,  ---  CALL (ram, 0x13ea0, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
main, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
main, (unique, 0x3b680, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b680, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b680, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main,  ---  CBRANCH (ram, 0x1103c, 4) , (register, 0x61, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x20, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x1, 4)
main, (register, 0x2c, 4) INT_SUB (register, 0x20, 4) , (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x79, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x79, 4) , (register, 0x2c, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x79, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x79, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
main, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
main, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
main,  ---  CBRANCH (ram, 0x10cb0, 4) , (unique, 0x2680, 1)
main, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
main, (unique, 0x1780, 4) INT_ADD (const, 0x10cac, 4) , (const, 0x8, 4)
main, (unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (unique, 0x7800, 4)
main, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
main, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
main, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
main, (register, 0x69, 1) COPY (register, 0xb0, 1)
main, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
main,  ---  BRANCHIND (register, 0x5c, 4)
main,  ---  BRANCH (ram, 0x11030, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x24, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x28, 4) COPY (const, 0xa, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x48, 4) COPY (const, 0x60d8, 4)
main, (register, 0x58, 4) COPY (const, 0x10eb0, 4)
main,  ---  CALL (ram, 0x10a70, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
main, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
main,  ---  CBRANCH (ram, 0x1119c, 4) , (unique, 0x2280, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
main, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x0, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x68, 1) COPY (register, 0x62, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
main, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
main, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
main,  ---  CBRANCH (ram, 0x10c78, 4) , (unique, 0x2480, 1)
main, (register, 0x20, 4) COPY (const, 0x5574, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x10edc, 4)
main,  ---  CALL (ram, 0x1213c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x24, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x10, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x2c, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x20, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x30, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x44, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x10f30, 4)
main,  ---  CALL (ram, 0x12c5c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x8, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x14, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
main, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x24, 4) COPY (const, 0x550c, 4)
main, (register, 0x2c, 4) COPY (const, 0x5538, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
main, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x10f78, 4)
main,  ---  CALL (ram, 0x10ba8, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x10f80, 4)
main,  ---  CALL (ram, 0x10b60, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x24, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x28, 4) COPY (const, 0xa, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x10f90, 4)
main,  ---  CALL (ram, 0x10a70, 4)
main, (register, 0x2c, 4) COPY (const, 0x60d8, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
main, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
main,  ---  CBRANCH (ram, 0x10c78, 4) , (unique, 0x2180, 1)
main, (register, 0x20, 4) COPY (const, 0x54dc, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x10fb0, 4)
main,  ---  CALL (ram, 0x1213c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x18, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x1c, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0xc, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x2c, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x20, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x30, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x2c, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x1c, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main,  ---  BRANCH (ram, 0x10c78, 4)
main, (register, 0x58, 4) COPY (const, 0x11034, 4)
main,  ---  CALL (ram, 0x112d8, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x1103c, 4)
main,  ---  CALL (ram, 0x10b60, 4)
main, (register, 0x38, 4) COPY (const, 0x61f8, 4)
main, (register, 0x48, 4) COPY (const, 0x6214, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x38, 4) , (const, 0xffff, 4)
main, (register, 0x38, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x68, 1) COPY (register, 0x62, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x34, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x2c, 4)
main, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x2c, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
main, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2600, 1)
main,  ---  CBRANCH (ram, 0x11054, 4) , (unique, 0x2680, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
main, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
main,  ---  CBRANCH (ram, 0x11134, 4) , (unique, 0x2480, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main,  ---  CBRANCH (ram, 0x11124, 4) , (register, 0x61, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x30, 4) COPY (const, 0x6214, 4)
main, (register, 0x58, 4) COPY (const, 0x1106c, 4)
main,  ---  CALL (ram, 0x12750, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x11078, 4)
main,  ---  CALL (ram, 0x12750, 4)
main, (register, 0x2c, 4) COPY (const, 0x6278, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
main, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
main, (register, 0x58, 4) COPY (const, 0x1108c, 4)
main,  ---  CALL (ram, 0x11c48, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x11094, 4)
main,  ---  CALL (ram, 0x10aa0, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x28, 4)
main, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x2c, 4) COPY (const, 0x5440, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x28, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x68, 1) COPY (register, 0x62, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x20, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x24, 4)
main, (unique, 0x3ba80, 4) INT_SUB (register, 0x20, 4) , (register, 0x24, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
main, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
main,  ---  CBRANCH (ram, 0x110b0, 4) , (unique, 0x2680, 1)
main, (register, 0x34, 4) COPY (register, 0x20, 4)
main, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
main,  ---  CBRANCH (ram, 0x110b4, 4) , (unique, 0x2680, 1)
main, (register, 0x34, 4) COPY (register, 0x24, 4)
main, (register, 0x20, 4) COPY (const, 0x6280, 4)
main, (register, 0x2c, 4) COPY (register, 0x28, 4)
main, (register, 0x24, 4) COPY (register, 0x34, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x110c8, 4)
main,  ---  CALL (ram, 0x11ab0, 4)
main, (register, 0x2c, 4) COPY (const, 0x55d0, 4)
main, (register, 0x20, 4) COPY (register, 0x34, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x24, 4) COPY (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x28, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x110e0, 4)
main,  ---  CALL (ram, 0x116c0, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x14, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main,  ---  CBRANCH (ram, 0x11118, 4) , (register, 0x61, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x2c, 4) COPY (const, 0x54c8, 4)
main, (register, 0x28, 4) COPY (const, 0x54c0, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
main, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
main, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
main,  ---  CBRANCH (ram, 0x11108, 4) , (unique, 0x2680, 1)
main, (register, 0x20, 4) COPY (register, 0x2c, 4)
main, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
main,  ---  CBRANCH (ram, 0x1110c, 4) , (unique, 0x2680, 1)
main, (register, 0x20, 4) COPY (register, 0x28, 4)
main, (register, 0x58, 4) COPY (const, 0x11110, 4)
main,  ---  CALL (ram, 0x11378, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x20, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (register, 0x58, 4) COPY (const, 0x11118, 4)
main,  ---  CALL (ram, 0x10b60, 4)
main, (register, 0x20, 4) COPY (const, 0x527c, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main,  ---  BRANCH (ram, 0x1110c, 4)
main, (register, 0x20, 4) COPY (const, 0x55c0, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x11130, 4)
main,  ---  CALL (ram, 0x12c5c, 4)
main,  ---  BRANCH (ram, 0x11060, 4)
main, (register, 0x20, 4) COPY (register, 0x4c, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x48, 4) , (const, 0xffff, 4)
main, (register, 0x48, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x11140, 4)
main,  ---  CALL (ram, 0x12750, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
main, (register, 0x3c, 4) COPY (register, 0x38, 4)
main,  ---  BRANCH (ram, 0x11164, 4)
main, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
main, (unique, 0x8480, 4) INT_ADD (register, 0x30, 4) , (unique, 0x7800, 4)
main, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
main, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
main, (register, 0x50, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x28, 4) COPY (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x66, 1) COPY (register, 0x68, 1)
main, (register, 0x67, 1) COPY (register, 0x63, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
main,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
main, (register, 0x58, 4) COPY (const, 0x11164, 4)
main,  ---  CALL (ram, 0x1277c, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
main, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x68, 1) COPY (register, 0x62, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x34, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x2c, 4)
main, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x2c, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
main, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
main, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
main,  ---  CBRANCH (ram, 0x1114c, 4) , (unique, 0x2480, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x18, 4)
main, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x2c, 4) COPY (const, 0x6214, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
main, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
main, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
main, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
main, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
main, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
main, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
main, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
main, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
main, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
main, (register, 0x62, 1) COPY (register, 0x66, 1)
main, (register, 0x61, 1) COPY (register, 0x65, 1)
main, (register, 0x60, 1) COPY (register, 0x64, 1)
main, (register, 0x63, 1) COPY (register, 0x67, 1)
main,  ---  CBRANCH (ram, 0x11058, 4) , (register, 0x61, 1)
main, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
main, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x2c, 4) COPY (const, 0x620c, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
main, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
main, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
main, (register, 0x58, 4) COPY (const, 0x11198, 4)
main,  ---  CALL (ram, 0x12b40, 4)
main,  ---  BRANCH (ram, 0x11058, 4)
main, (register, 0x20, 4) COPY (const, 0x5540, 4)
main, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
main, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
main, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
main, (register, 0x58, 4) COPY (const, 0x111a8, 4)
main,  ---  CALL (ram, 0x1213c, 4)
main,  ---  BRANCH (ram, 0x10ec0, 4)
_start, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_start, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_start, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_start, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_start, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_start, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_start, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_start, (register, 0x4c, 4) COPY (const, 0x0, 4)
_start, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
_start, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
_start, (register, 0x66, 1) COPY (register, 0x68, 1)
_start, (register, 0x67, 1) COPY (register, 0x63, 1)
_start, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_start, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_start, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_start, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_start, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_start, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_start, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_start, (register, 0x58, 4) COPY (const, 0x0, 4)
_start, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
_start, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
_start, (register, 0x66, 1) COPY (register, 0x68, 1)
_start, (register, 0x67, 1) COPY (register, 0x63, 1)
_start, (unique, 0x8800, 4) COPY (register, 0x54, 4)
_start, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
_start, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
_start, (register, 0x28, 4) COPY (register, 0x54, 4)
_start, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
_start,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x28, 4)
_start, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
_start,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x20, 4)
_start, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x111e0, 4)
_start, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
_start,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x50, 4)
_start, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x111e4, 4)
_start, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x111e8, 4)
_start, (register, 0x58, 4) COPY (const, 0x111dc, 4)
_start,  ---  CALL (ram, 0x10b30, 4)
_start, (register, 0x58, 4) COPY (const, 0x111e0, 4)
_start,  ---  CALL (ram, 0x10c08, 4)
call_weak_fn, (register, 0x50, 4) COPY (const, 0x10b50, 4)
call_weak_fn, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15000, 4) , (const, 0x1f, 4)
call_weak_fn, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
call_weak_fn, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
call_weak_fn, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
call_weak_fn, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
call_weak_fn, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
call_weak_fn, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
call_weak_fn, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x15000, 4)
call_weak_fn, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x15000, 4)
call_weak_fn, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x15000, 4)
call_weak_fn, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x510, 4)
call_weak_fn, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
call_weak_fn, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
call_weak_fn, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x69, 1) COPY (register, 0xb0, 1)
call_weak_fn, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
call_weak_fn,  ---  BRANCHIND (register, 0x5c, 4)
call_weak_fn, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x11208, 4)
call_weak_fn, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x1120c, 4)
call_weak_fn, (unique, 0x1780, 4) INT_ADD (const, 0x111f4, 4) , (const, 0x8, 4)
call_weak_fn, (register, 0x68, 1) COPY (register, 0x62, 1)
call_weak_fn, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
call_weak_fn, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
call_weak_fn, (register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
call_weak_fn, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
call_weak_fn, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
call_weak_fn, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
call_weak_fn, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
call_weak_fn, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
call_weak_fn, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
call_weak_fn, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
call_weak_fn, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
call_weak_fn, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
call_weak_fn, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
call_weak_fn, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
call_weak_fn, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
call_weak_fn, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x62, 1) COPY (register, 0x66, 1)
call_weak_fn, (register, 0x61, 1) COPY (register, 0x65, 1)
call_weak_fn, (register, 0x60, 1) COPY (register, 0x64, 1)
call_weak_fn, (register, 0x63, 1) COPY (register, 0x67, 1)
call_weak_fn, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
call_weak_fn,  ---  CBRANCH (ram, 0x11204, 4) , (unique, 0x2680, 1)
call_weak_fn, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
call_weak_fn, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
call_weak_fn, (register, 0x69, 1) COPY (register, 0xb0, 1)
call_weak_fn, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
call_weak_fn,  ---  RETURN (register, 0x5c, 4)
call_weak_fn,  ---  BRANCH (ram, 0x10b48, 4)
deregister_tm_clones, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x11234, 4)
deregister_tm_clones, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x11238, 4)
deregister_tm_clones, (register, 0x68, 1) COPY (register, 0x62, 1)
deregister_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x2c, 4)
deregister_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x20, 4)
deregister_tm_clones, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x20, 4)
deregister_tm_clones, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
deregister_tm_clones, (unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
deregister_tm_clones, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
deregister_tm_clones, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
deregister_tm_clones, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
deregister_tm_clones, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
deregister_tm_clones, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
deregister_tm_clones, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
deregister_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (const, 0x6, 4) , (register, 0x2c, 4)
deregister_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x6, 4)
deregister_tm_clones, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x6, 4)
deregister_tm_clones, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x62, 1) COPY (register, 0x66, 1)
deregister_tm_clones, (register, 0x61, 1) COPY (register, 0x65, 1)
deregister_tm_clones, (register, 0x60, 1) COPY (register, 0x64, 1)
deregister_tm_clones, (register, 0x63, 1) COPY (register, 0x67, 1)
deregister_tm_clones, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
deregister_tm_clones, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
deregister_tm_clones, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
deregister_tm_clones,  ---  CBRANCH (ram, 0x11224, 4) , (unique, 0x2680, 1)
deregister_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
deregister_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
deregister_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
deregister_tm_clones,  ---  RETURN (register, 0x5c, 4)
deregister_tm_clones, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x1123c, 4)
deregister_tm_clones, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
deregister_tm_clones, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
deregister_tm_clones, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
deregister_tm_clones, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
deregister_tm_clones, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
deregister_tm_clones, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
deregister_tm_clones, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
deregister_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
deregister_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
deregister_tm_clones, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x62, 1) COPY (register, 0x66, 1)
deregister_tm_clones, (register, 0x61, 1) COPY (register, 0x65, 1)
deregister_tm_clones, (register, 0x60, 1) COPY (register, 0x64, 1)
deregister_tm_clones, (register, 0x63, 1) COPY (register, 0x67, 1)
deregister_tm_clones, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
deregister_tm_clones,  ---  CBRANCH (ram, 0x11230, 4) , (unique, 0x2680, 1)
deregister_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
deregister_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
deregister_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
deregister_tm_clones,  ---  RETURN (register, 0x5c, 4)
deregister_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
deregister_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
deregister_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
deregister_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
deregister_tm_clones,  ---  BRANCHIND (register, 0x5c, 4)
register_tm_clones, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x11270, 4)
register_tm_clones, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
register_tm_clones, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
register_tm_clones, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
register_tm_clones, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
register_tm_clones, (register, 0x2c, 4) COPY (const, 0x2, 4)
register_tm_clones, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x66, 1) COPY (register, 0x68, 1)
register_tm_clones, (register, 0x67, 1) COPY (register, 0x63, 1)
register_tm_clones, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x11274, 4)
register_tm_clones, (register, 0x68, 1) COPY (register, 0x62, 1)
register_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x24, 4)
register_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x20, 4)
register_tm_clones, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (register, 0x20, 4)
register_tm_clones, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
register_tm_clones, (unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
register_tm_clones, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
register_tm_clones, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x2, 4)
register_tm_clones, (register, 0x24, 4) COPY (unique, 0x4100, 4)
register_tm_clones, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x66, 1) COPY (register, 0x68, 1)
register_tm_clones, (register, 0x67, 1) COPY (register, 0x63, 1)
register_tm_clones, (register, 0x24, 4) INT_DIV (register, 0x24, 4) , (register, 0x2c, 4)
register_tm_clones, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
register_tm_clones, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
register_tm_clones, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
register_tm_clones, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
register_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
register_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x62, 1) COPY (register, 0x66, 1)
register_tm_clones, (register, 0x61, 1) COPY (register, 0x65, 1)
register_tm_clones, (register, 0x60, 1) COPY (register, 0x64, 1)
register_tm_clones, (register, 0x63, 1) COPY (register, 0x67, 1)
register_tm_clones, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
register_tm_clones,  ---  CBRANCH (ram, 0x11260, 4) , (unique, 0x2680, 1)
register_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
register_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
register_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
register_tm_clones,  ---  RETURN (register, 0x5c, 4)
register_tm_clones, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x11278, 4)
register_tm_clones, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
register_tm_clones, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
register_tm_clones, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
register_tm_clones, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
register_tm_clones, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
register_tm_clones, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
register_tm_clones, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
register_tm_clones, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x62, 1) COPY (register, 0x66, 1)
register_tm_clones, (register, 0x61, 1) COPY (register, 0x65, 1)
register_tm_clones, (register, 0x60, 1) COPY (register, 0x64, 1)
register_tm_clones, (register, 0x63, 1) COPY (register, 0x67, 1)
register_tm_clones, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
register_tm_clones,  ---  CBRANCH (ram, 0x1126c, 4) , (unique, 0x2680, 1)
register_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
register_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
register_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
register_tm_clones,  ---  RETURN (register, 0x5c, 4)
register_tm_clones, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
register_tm_clones, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
register_tm_clones, (register, 0x69, 1) COPY (register, 0xb0, 1)
register_tm_clones, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
register_tm_clones,  ---  BRANCHIND (register, 0x5c, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__do_global_dtors_aux,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (const, 0x112a0, 4)
__do_global_dtors_aux, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
__do_global_dtors_aux, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
__do_global_dtors_aux, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__do_global_dtors_aux, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__do_global_dtors_aux, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__do_global_dtors_aux, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__do_global_dtors_aux, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__do_global_dtors_aux, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x62, 1) COPY (register, 0x66, 1)
__do_global_dtors_aux, (register, 0x61, 1) COPY (register, 0x65, 1)
__do_global_dtors_aux, (register, 0x60, 1) COPY (register, 0x64, 1)
__do_global_dtors_aux, (register, 0x63, 1) COPY (register, 0x67, 1)
__do_global_dtors_aux, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__do_global_dtors_aux, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__do_global_dtors_aux,  ---  CBRANCH (ram, 0x11290, 4) , (unique, 0x2680, 1)
__do_global_dtors_aux, (register, 0x80, 4) COPY (register, 0x54, 4)
__do_global_dtors_aux, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x54, 4) COPY (register, 0x80, 4)
__do_global_dtors_aux, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__do_global_dtors_aux, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x69, 1) COPY (register, 0xb0, 1)
__do_global_dtors_aux, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__do_global_dtors_aux,  ---  RETURN (register, 0x5c, 4)
__do_global_dtors_aux, (register, 0x58, 4) COPY (const, 0x11294, 4)
__do_global_dtors_aux,  ---  CALL (ram, 0x11210, 4)
__do_global_dtors_aux, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__do_global_dtors_aux, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__do_global_dtors_aux, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__do_global_dtors_aux, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__do_global_dtors_aux, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__do_global_dtors_aux, (register, 0x2c, 4) COPY (const, 0x1, 4)
__do_global_dtors_aux, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x66, 1) COPY (register, 0x68, 1)
__do_global_dtors_aux, (register, 0x67, 1) COPY (register, 0x63, 1)
__do_global_dtors_aux, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (unique, 0x6a380, 1) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
__do_global_dtors_aux,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (unique, 0x6a380, 1)
__do_global_dtors_aux, (register, 0x80, 4) COPY (register, 0x54, 4)
__do_global_dtors_aux, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__do_global_dtors_aux, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__do_global_dtors_aux, (register, 0x54, 4) COPY (register, 0x80, 4)
__do_global_dtors_aux, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__do_global_dtors_aux, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__do_global_dtors_aux, (register, 0x69, 1) COPY (register, 0xb0, 1)
__do_global_dtors_aux, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__do_global_dtors_aux,  ---  RETURN (register, 0x5c, 4)
frame_dummy, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
frame_dummy,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
frame_dummy, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
frame_dummy,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
frame_dummy, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
frame_dummy, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
frame_dummy, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x112d0, 4)
frame_dummy, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
frame_dummy, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
frame_dummy, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
frame_dummy, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
frame_dummy, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
frame_dummy, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
frame_dummy, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
frame_dummy, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
frame_dummy, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
frame_dummy, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
frame_dummy, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x62, 1) COPY (register, 0x66, 1)
frame_dummy, (register, 0x61, 1) COPY (register, 0x65, 1)
frame_dummy, (register, 0x60, 1) COPY (register, 0x64, 1)
frame_dummy, (register, 0x63, 1) COPY (register, 0x67, 1)
frame_dummy,  ---  CBRANCH (ram, 0x112c8, 4) , (register, 0x61, 1)
frame_dummy, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x112d4, 4)
frame_dummy, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
frame_dummy, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
frame_dummy, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
frame_dummy, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
frame_dummy, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
frame_dummy, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
frame_dummy, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
frame_dummy, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
frame_dummy, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
frame_dummy, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x62, 1) COPY (register, 0x66, 1)
frame_dummy, (register, 0x61, 1) COPY (register, 0x65, 1)
frame_dummy, (register, 0x60, 1) COPY (register, 0x64, 1)
frame_dummy, (register, 0x63, 1) COPY (register, 0x67, 1)
frame_dummy,  ---  CBRANCH (ram, 0x112c8, 4) , (register, 0x61, 1)
frame_dummy, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
frame_dummy, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
frame_dummy, (register, 0x69, 1) COPY (register, 0xb0, 1)
frame_dummy, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
frame_dummy, (register, 0x58, 4) COPY (const, 0x112c8, 4)
frame_dummy,  ---  CALLIND (register, 0x5c, 4)
frame_dummy, (register, 0x80, 4) COPY (register, 0x54, 4)
frame_dummy, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
frame_dummy, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
frame_dummy, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
frame_dummy, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
frame_dummy, (register, 0x54, 4) COPY (register, 0x80, 4)
frame_dummy,  ---  BRANCH (ram, 0x11240, 4)
give_usage, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
give_usage,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
give_usage, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
give_usage,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
give_usage, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
give_usage, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
give_usage, (register, 0x2c, 4) COPY (const, 0x627c, 4)
give_usage, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
give_usage, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
give_usage, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
give_usage, (register, 0x24, 4) COPY (const, 0x50a0, 4)
give_usage, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
give_usage, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
give_usage, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
give_usage, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
give_usage, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
give_usage, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
give_usage, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
give_usage, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
give_usage, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
give_usage, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
give_usage, (register, 0x20, 4) COPY (const, 0x1, 4)
give_usage, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
give_usage, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
give_usage, (register, 0x66, 1) COPY (register, 0x68, 1)
give_usage, (register, 0x67, 1) COPY (register, 0x63, 1)
give_usage, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
give_usage, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
give_usage, (register, 0x58, 4) COPY (const, 0x112f8, 4)
give_usage,  ---  CALL (ram, 0x10ba8, 4)
give_usage, (register, 0x80, 4) COPY (register, 0x54, 4)
give_usage, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
give_usage, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
give_usage, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
give_usage, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
give_usage, (register, 0x54, 4) COPY (register, 0x80, 4)
give_usage,  ---  BRANCH (ram, 0x1226c, 4)
update_system_time, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
update_system_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
update_system_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_system_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
update_system_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_system_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
update_system_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_system_time, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_system_time, (register, 0x34, 4) COPY (const, 0x5f08, 4)
update_system_time, (register, 0x2c, 4) COPY (const, 0x6278, 4)
update_system_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_system_time, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
update_system_time, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_system_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_system_time, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
update_system_time, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_system_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
update_system_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_system_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_system_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_system_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
update_system_time, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
update_system_time, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
update_system_time, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_system_time, (register, 0x30, 4) COPY (register, 0x20, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
update_system_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_system_time, (register, 0x24, 4) COPY (register, 0x54, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
update_system_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
update_system_time, (register, 0x58, 4) COPY (const, 0x11330, 4)
update_system_time,  ---  CALL (ram, 0x12aec, 4)
update_system_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_system_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_system_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_system_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_system_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
update_system_time, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
update_system_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_system_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_system_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_system_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_system_time,  ---  CBRANCH (ram, 0x1135c, 4) , (register, 0x61, 1)
update_system_time, (register, 0x58, 4) COPY (const, 0x1133c, 4)
update_system_time,  ---  CALL (ram, 0x12ab8, 4)
update_system_time, (register, 0x28, 4) COPY (register, 0x20, 4)
update_system_time, (register, 0x20, 4) COPY (register, 0x54, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x20, 4)
update_system_time, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_system_time, (register, 0x68, 1) COPY (register, 0x62, 1)
update_system_time, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x30, 4)
update_system_time, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x30, 4)
update_system_time, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x30, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x20, 4)
update_system_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
update_system_time, (register, 0x58, 4) COPY (const, 0x11354, 4)
update_system_time,  ---  CALL (ram, 0x12b04, 4)
update_system_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_system_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_system_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_system_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_system_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
update_system_time, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
update_system_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_system_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_system_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_system_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_system_time, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
update_system_time,  ---  CBRANCH (ram, 0x11338, 4) , (unique, 0x1a80, 1)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
update_system_time, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_system_time, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
update_system_time, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_system_time, (register, 0x68, 1) COPY (register, 0x62, 1)
update_system_time, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
update_system_time, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
update_system_time, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
update_system_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_system_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_system_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_system_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_system_time, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
update_system_time,  ---  CBRANCH (ram, 0x11374, 4) , (unique, 0x1a80, 1)
update_system_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
update_system_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_system_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_system_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_system_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_system_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_system_time, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
update_system_time, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
update_system_time, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
update_system_time, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
update_system_time, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
update_system_time, (register, 0x80, 4) COPY (register, 0x54, 4)
update_system_time, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_system_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_system_time, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_system_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_system_time, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_system_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_system_time, (register, 0x54, 4) COPY (register, 0x80, 4)
update_system_time, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
update_system_time, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
update_system_time, (register, 0x69, 1) COPY (register, 0xb0, 1)
update_system_time, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
update_system_time,  ---  RETURN (register, 0x5c, 4)
update_system_time, (register, 0x58, 4) COPY (const, 0x11378, 4)
update_system_time,  ---  CALL (ram, 0x10ac4, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
do_statistics, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x44, 4) COPY (const, 0x5f08, 4)
do_statistics, (register, 0x34, 4) COPY (const, 0x6214, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x44, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x44, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (register, 0x4c, 4) COPY (register, 0x20, 4)
do_statistics, (unique, 0x25480, 4) INT_MULT (const, 0x2, 4) , (const, 0x4, 4)
do_statistics, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (unique, 0x25480, 4)
do_statistics, (register, 0x80, 4) COPY (register, 0x54, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x340, 8)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2c, 4) , (register, 0x54, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x2c, 4)
do_statistics, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x2c, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
do_statistics, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x24, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x113ac, 4)
do_statistics,  ---  CALL (ram, 0x12aec, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics,  ---  CBRANCH (ram, 0x11528, 4) , (register, 0x61, 1)
do_statistics, (unique, 0x1f500, 4) INT_ADD (const, 0x113b4, 4) , (const, 0x8, 4)
do_statistics, (unique, 0x1f580, 4) INT_AND (unique, 0x1f500, 4) , (const, 0xfffffffc, 4)
do_statistics, (unique, 0x1f680, 4) INT_ADD (unique, 0x1f580, 4) , (const, 0x184, 4)
do_statistics, (register, 0x340, 8) LOAD (const, 0x1a1, 8) , (unique, 0x1f680, 4)
do_statistics, (register, 0x40, 4) COPY (const, 0x520c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x38, 4) COPY (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x40, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x40, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (register, 0x48, 4) COPY (register, 0x34, 4)
do_statistics, (register, 0x20, 4) COPY (register, 0x30, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x113d0, 4)
do_statistics,  ---  CALL (ram, 0x12ab0, 4)
do_statistics, (register, 0x3c, 4) COPY (register, 0x20, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
do_statistics, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics,  ---  CBRANCH (ram, 0x113f4, 4) , (register, 0x61, 1)
do_statistics, (register, 0x24, 4) COPY (register, 0x3c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x28, 4) COPY (const, 0x20, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (register, 0x58, 4) COPY (const, 0x113ec, 4)
do_statistics,  ---  CALL (ram, 0x129f0, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics,  ---  CBRANCH (ram, 0x1146c, 4) , (register, 0x61, 1)
do_statistics, (register, 0x20, 4) COPY (register, 0x30, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x113fc, 4)
do_statistics,  ---  CALL (ram, 0x12ab8, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
do_statistics, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (register, 0x68, 1) COPY (register, 0x62, 1)
do_statistics, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
do_statistics,  ---  CBRANCH (ram, 0x1146c, 4) , (register, 0x61, 1)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x11424, 4) , (unique, 0x1a80, 1)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0xc, 4)
do_statistics, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics,  ---  CBRANCH (ram, 0x1146c, 4) , (register, 0x61, 1)
do_statistics, (register, 0x33c, 4) COPY (register, 0x2c, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x10, 4)
do_statistics, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x20, 4) COPY (const, 0x8, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
do_statistics, (register, 0x28, 4) COPY (const, 0x5210, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x2c, 4) COPY (const, 0x20, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (unique, 0x30d80, 8) INT_ZEXT (register, 0x33c, 4)
do_statistics, (register, 0x338, 8) INT2FLOAT (unique, 0x30d80, 8)
do_statistics, (register, 0x24, 4) COPY (const, 0x5214, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
do_statistics,  ---  CBRANCH (ram, 0x1145c, 4) , (unique, 0x2680, 1)
do_statistics, (register, 0x28, 4) COPY (register, 0x40, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x20, 4) COPY (const, 0x1, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (register, 0x338, 8) FLOAT_DIV (register, 0x338, 8) , (register, 0x340, 8)
do_statistics, (unique, 0x1f280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x1f280, 4) , (register, 0x338, 8)
do_statistics, (register, 0x58, 4) COPY (const, 0x1146c, 4)
do_statistics,  ---  CALL (ram, 0x10ba8, 4)
do_statistics, (register, 0x20, 4) COPY (register, 0x30, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x11474, 4)
do_statistics,  ---  CALL (ram, 0x12bcc, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x1147c, 4)
do_statistics,  ---  CALL (ram, 0x12b04, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x113c8, 4) , (unique, 0x1a80, 1)
do_statistics, (register, 0x33c, 4) COPY (register, 0x38, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x14, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x1f500, 4) INT_ADD (const, 0x1148c, 4) , (const, 0x8, 4)
do_statistics, (unique, 0x1f580, 4) INT_AND (unique, 0x1f500, 4) , (const, 0xfffffffc, 4)
do_statistics, (unique, 0x1f680, 4) INT_ADD (unique, 0x1f580, 4) , (const, 0xac, 4)
do_statistics, (register, 0x330, 8) LOAD (const, 0x1a1, 8) , (unique, 0x1f680, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x30d80, 8) INT_ZEXT (register, 0x33c, 4)
do_statistics, (register, 0x338, 8) INT2FLOAT (unique, 0x30d80, 8)
do_statistics, (register, 0x338, 8) FLOAT_DIV (register, 0x338, 8) , (register, 0x330, 8)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x114f0, 4) , (unique, 0x1a80, 1)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x10, 4)
do_statistics, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (register, 0x2c, 4) COPY (const, 0x5210, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (register, 0x28, 4) COPY (const, 0x520c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (register, 0x24, 4) COPY (const, 0x5234, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x114c4, 4) , (unique, 0x2680, 1)
do_statistics, (register, 0x28, 4) COPY (register, 0x2c, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x20, 4) COPY (const, 0x1, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (unique, 0x1f080, 4) COPY (register, 0x54, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x1f080, 4) , (register, 0x338, 8)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0xb, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x2c, 4) COPY (const, 0xb, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (register, 0x58, 4) COPY (const, 0x114d4, 4)
do_statistics,  ---  CALL (ram, 0x10ba8, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
do_statistics, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (register, 0x68, 1) COPY (register, 0x62, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
do_statistics, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x1153c, 4) , (unique, 0x1a80, 1)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x2c, 4)
do_statistics, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
do_statistics, (register, 0x80, 4) COPY (register, 0x54, 4)
do_statistics, (unique, 0x25e80, 4) INT_MULT (const, 0x2, 4) , (const, 0x4, 4)
do_statistics, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (unique, 0x25e80, 4)
do_statistics, (register, 0x340, 8) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x8, 4)
do_statistics, (register, 0x80, 4) COPY (register, 0x54, 4)
do_statistics, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_statistics, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_statistics, (register, 0x54, 4) COPY (register, 0x80, 4)
do_statistics, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
do_statistics, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
do_statistics, (register, 0x69, 1) COPY (register, 0xb0, 1)
do_statistics, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
do_statistics,  ---  RETURN (register, 0x5c, 4)
do_statistics, (unique, 0x11180, 8) COPY (const, 0x0, 8)
do_statistics, (unique, 0x17e00, 1) COPY (const, 0x0, 1)
do_statistics, (unique, 0x17f00, 8) COPY (const, 0x0, 8)
do_statistics, (unique, 0x17280, 1) FLOAT_LESS (register, 0x338, 8) , (unique, 0x17f00, 8)
do_statistics, (unique, 0x17380, 1) FLOAT_EQUAL (register, 0x338, 8) , (unique, 0x17f00, 8)
do_statistics, (unique, 0x17480, 1) FLOAT_LESSEQUAL (unique, 0x17f00, 8) , (register, 0x338, 8)
do_statistics, (unique, 0x17500, 1) FLOAT_NAN (register, 0x338, 8)
do_statistics, (unique, 0x17580, 1) FLOAT_NAN (unique, 0x17f00, 8)
do_statistics, (unique, 0x17680, 1) INT_OR (unique, 0x17500, 1) , (unique, 0x17580, 1)
do_statistics, (unique, 0x17700, 4) INT_AND (register, 0xb4, 4) , (const, 0xfffffff, 4)
do_statistics, (unique, 0x17780, 4) INT_ZEXT (unique, 0x17280, 1)
do_statistics, (unique, 0x17800, 4) INT_LEFT (unique, 0x17780, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x17880, 4) INT_OR (unique, 0x17700, 4) , (unique, 0x17800, 4)
do_statistics, (unique, 0x17900, 4) INT_ZEXT (unique, 0x17380, 1)
do_statistics, (unique, 0x17980, 4) INT_LEFT (unique, 0x17900, 4) , (const, 0x1e, 4)
do_statistics, (unique, 0x17a00, 4) INT_OR (unique, 0x17880, 4) , (unique, 0x17980, 4)
do_statistics, (unique, 0x17a80, 4) INT_ZEXT (unique, 0x17480, 1)
do_statistics, (unique, 0x17b00, 4) INT_LEFT (unique, 0x17a80, 4) , (const, 0x1d, 4)
do_statistics, (unique, 0x17b80, 4) INT_OR (unique, 0x17a00, 4) , (unique, 0x17b00, 4)
do_statistics, (unique, 0x17c00, 4) INT_ZEXT (unique, 0x17680, 1)
do_statistics, (unique, 0x17c80, 4) INT_LEFT (unique, 0x17c00, 4) , (const, 0x1c, 4)
do_statistics, (register, 0xb4, 4) INT_OR (unique, 0x17b80, 4) , (unique, 0x17c80, 4)
do_statistics, (register, 0x5c, 4) COPY (register, 0xb4, 4)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x11508, 4) , (unique, 0x1a80, 1)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0xc, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics,  ---  CBRANCH (ram, 0x114d4, 4) , (register, 0x61, 1)
do_statistics, (register, 0x24, 4) COPY (const, 0x5224, 4)
do_statistics, (register, 0x28, 4) COPY (register, 0x4c, 4)
do_statistics, (unique, 0x1f080, 4) COPY (register, 0x54, 4)
do_statistics,  ---  STORE (const, 0x1a1, 8) , (unique, 0x1f080, 4) , (register, 0x338, 8)
do_statistics, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_statistics, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
do_statistics, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0xb, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x2c, 4) COPY (const, 0xb, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x20, 4) COPY (const, 0x1, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_statistics, (register, 0x66, 1) COPY (register, 0x68, 1)
do_statistics, (register, 0x67, 1) COPY (register, 0x63, 1)
do_statistics, (register, 0x58, 4) COPY (const, 0x11524, 4)
do_statistics,  ---  CALL (ram, 0x10ba8, 4)
do_statistics,  ---  BRANCH (ram, 0x114d4, 4)
do_statistics, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x14, 4)
do_statistics, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_statistics, (unique, 0x1f500, 4) INT_ADD (const, 0x1152c, 4) , (const, 0x8, 4)
do_statistics, (unique, 0x1f580, 4) INT_AND (unique, 0x1f500, 4) , (const, 0xfffffffc, 4)
do_statistics, (unique, 0x1f680, 4) INT_ADD (unique, 0x1f580, 4) , (const, 0x14, 4)
do_statistics, (register, 0x338, 8) LOAD (const, 0x1a1, 8) , (unique, 0x1f680, 4)
do_statistics, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_statistics, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_statistics, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_statistics, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_statistics, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_statistics, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_statistics, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_statistics, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_statistics, (register, 0x62, 1) COPY (register, 0x66, 1)
do_statistics, (register, 0x61, 1) COPY (register, 0x65, 1)
do_statistics, (register, 0x60, 1) COPY (register, 0x64, 1)
do_statistics, (register, 0x63, 1) COPY (register, 0x67, 1)
do_statistics, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_statistics,  ---  CBRANCH (ram, 0x114fc, 4) , (unique, 0x1a80, 1)
do_statistics,  ---  BRANCH (ram, 0x114a0, 4)
do_statistics, (register, 0x58, 4) COPY (const, 0x11540, 4)
do_statistics,  ---  CALL (ram, 0x10ac4, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
update_user_time, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x34, 4) COPY (const, 0x5f08, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x20, 4) , (register, 0x54, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x3c, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time, (register, 0x38, 4) COPY (register, 0x20, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
update_user_time, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x40, 4) COPY (register, 0x28, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
update_user_time, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
update_user_time,  ---  CBRANCH (ram, 0x11640, 4) , (unique, 0x2280, 1)
update_user_time, (register, 0x30, 4) COPY (const, 0x6214, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
update_user_time, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time,  ---  CBRANCH (ram, 0x115f4, 4) , (register, 0x61, 1)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time,  ---  CBRANCH (ram, 0x115ac, 4) , (register, 0x61, 1)
update_user_time, (register, 0x24, 4) COPY (register, 0x38, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x28, 4) COPY (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (register, 0x58, 4) COPY (const, 0x115a4, 4)
update_user_time,  ---  CALL (ram, 0x129f0, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time,  ---  CBRANCH (ram, 0x115f4, 4) , (register, 0x61, 1)
update_user_time, (register, 0x33c, 4) COPY (register, 0x3c, 4)
update_user_time, (unique, 0x1f500, 4) INT_ADD (const, 0x115b0, 4) , (const, 0x8, 4)
update_user_time, (unique, 0x1f580, 4) INT_AND (unique, 0x1f500, 4) , (const, 0xfffffffc, 4)
update_user_time, (unique, 0x1f680, 4) INT_ADD (unique, 0x1f580, 4) , (const, 0x100, 4)
update_user_time, (register, 0x330, 8) LOAD (const, 0x1a1, 8) , (unique, 0x1f680, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
update_user_time, (register, 0x2c, 4) COPY (const, 0x620c, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (unique, 0x30f00, 8) INT_SEXT (register, 0x33c, 4)
update_user_time, (register, 0x338, 8) INT2FLOAT (unique, 0x30f00, 8)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x24, 4) COPY (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x28, 4) COPY (const, 0x52b0, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
update_user_time, (register, 0x2c, 4) COPY (register, 0x24, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (register, 0x338, 8) FLOAT_DIV (register, 0x338, 8) , (register, 0x330, 8)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x24, 4) COPY (const, 0x1, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (unique, 0x1f080, 4) COPY (register, 0x54, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x1f080, 4) , (register, 0x338, 8)
update_user_time, (register, 0x58, 4) COPY (const, 0x115f4, 4)
update_user_time,  ---  CALL (ram, 0x10bb4, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x24, 4) COPY (register, 0x38, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x28, 4) COPY (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (register, 0x30, 4) COPY (const, 0x6214, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x11608, 4)
update_user_time,  ---  CALL (ram, 0x129f0, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (register, 0x40, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time,  ---  CBRANCH (ram, 0x11684, 4) , (register, 0x61, 1)
update_user_time, (register, 0x20, 4) COPY (register, 0x40, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x1161c, 4)
update_user_time,  ---  CALL (ram, 0x12ab8, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
update_user_time, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
update_user_time, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
update_user_time, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x68, 1) COPY (register, 0x62, 1)
update_user_time, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x24, 4)
update_user_time, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x28, 4)
update_user_time, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x28, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
update_user_time, (register, 0x62, 1) COPY (register, 0x66, 1)
update_user_time, (register, 0x61, 1) COPY (register, 0x65, 1)
update_user_time, (register, 0x60, 1) COPY (register, 0x64, 1)
update_user_time, (register, 0x63, 1) COPY (register, 0x67, 1)
update_user_time, (register, 0x68, 1) COPY (register, 0x62, 1)
update_user_time, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x3c, 4)
update_user_time, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x3c, 4)
update_user_time, (register, 0x24, 4) INT_ADD (register, 0x2c, 4) , (register, 0x3c, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
update_user_time, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
update_user_time,  ---  CBRANCH (ram, 0x116b0, 4) , (unique, 0x1a80, 1)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
update_user_time, (register, 0x80, 4) COPY (register, 0x54, 4)
update_user_time, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
update_user_time, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
update_user_time, (register, 0x54, 4) COPY (register, 0x80, 4)
update_user_time, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
update_user_time, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
update_user_time, (register, 0x69, 1) COPY (register, 0xb0, 1)
update_user_time, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
update_user_time,  ---  RETURN (register, 0x5c, 4)
update_user_time, (register, 0x30, 4) COPY (const, 0x620c, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x11650, 4)
update_user_time,  ---  CALL (ram, 0x12ddc, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (register, 0x28, 4) COPY (const, 0x5244, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x24, 4) COPY (const, 0x1, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x2c, 4) COPY (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (register, 0x58, 4) COPY (const, 0x11674, 4)
update_user_time,  ---  CALL (ram, 0x10bb4, 4)
update_user_time, (register, 0x20, 4) COPY (const, 0x5280, 4)
update_user_time, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
update_user_time, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
update_user_time, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x11680, 4)
update_user_time,  ---  CALL (ram, 0x1213c, 4)
update_user_time,  ---  BRANCH (ram, 0x11578, 4)
update_user_time, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x30, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
update_user_time, (register, 0x24, 4) COPY (register, 0x38, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x28, 4) COPY (const, 0x20, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0xfffffff8, 4)
update_user_time,  ---  STORE (const, 0x1a1, 8) , (register, 0x30, 4) , (register, 0x40, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x1169c, 4)
update_user_time,  ---  CALL (ram, 0x1277c, 4)
update_user_time, (register, 0x24, 4) COPY (register, 0x30, 4)
update_user_time, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
update_user_time, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
update_user_time, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
update_user_time, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
update_user_time, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
update_user_time, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
update_user_time, (register, 0x28, 4) COPY (const, 0x4, 4)
update_user_time, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
update_user_time, (register, 0x66, 1) COPY (register, 0x68, 1)
update_user_time, (register, 0x67, 1) COPY (register, 0x63, 1)
update_user_time, (register, 0x40, 4) COPY (register, 0x20, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x116ac, 4)
update_user_time,  ---  CALL (ram, 0x12ac0, 4)
update_user_time,  ---  BRANCH (ram, 0x11614, 4)
update_user_time, (register, 0x58, 4) COPY (const, 0x116b4, 4)
update_user_time,  ---  CALL (ram, 0x10ac4, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
log_everyone_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x44, 4) COPY (const, 0x5f08, 4)
log_everyone_out, (register, 0x50, 4) COPY (const, 0x6278, 4)
log_everyone_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_everyone_out, (unique, 0x3f300, 4) INT_AND (register, 0x44, 4) , (const, 0xffff, 4)
log_everyone_out, (register, 0x44, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_everyone_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_everyone_out, (unique, 0x3f300, 4) INT_AND (register, 0x50, 4) , (const, 0xffff, 4)
log_everyone_out, (register, 0x50, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x10, 4) , (register, 0x54, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x10, 4)
log_everyone_out, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x10, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_everyone_out, (register, 0x40, 4) COPY (register, 0x20, 4)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_everyone_out, (register, 0x3c, 4) COPY (register, 0x24, 4)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
log_everyone_out, (register, 0x24, 4) COPY (register, 0x54, 4)
log_everyone_out, (register, 0x38, 4) COPY (register, 0x28, 4)
log_everyone_out, (register, 0x48, 4) COPY (register, 0x2c, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x116fc, 4)
log_everyone_out,  ---  CALL (ram, 0x12aec, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11724, 4) , (unique, 0x1a80, 1)
log_everyone_out,  ---  BRANCH (ram, 0x1176c, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11710, 4) , (unique, 0x2680, 1)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x20, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
log_everyone_out,  ---  CBRANCH (ram, 0x11754, 4) , (register, 0x61, 1)
log_everyone_out, (register, 0x20, 4) COPY (register, 0x54, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x1171c, 4)
log_everyone_out,  ---  CALL (ram, 0x12b04, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x1176c, 4) , (register, 0x61, 1)
log_everyone_out, (register, 0x20, 4) COPY (register, 0x30, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x1172c, 4)
log_everyone_out,  ---  CALL (ram, 0x12ab8, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3b980, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (register, 0x34, 4) COPY (register, 0x20, 4)
log_everyone_out,  ---  CBRANCH (ram, 0x11708, 4) , (register, 0x61, 1)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x20, 4)
log_everyone_out, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_everyone_out, (register, 0x28, 4) COPY (register, 0x48, 4)
log_everyone_out, (register, 0x68, 1) COPY (register, 0x62, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x40, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x24, 4)
log_everyone_out, (register, 0x24, 4) INT_SUB (register, 0x40, 4) , (register, 0x24, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x11748, 4)
log_everyone_out,  ---  CALL (ram, 0x11550, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11750, 4) , (unique, 0x2680, 1)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x20, 4)
log_everyone_out,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11714, 4) , (unique, 0x1a80, 1)
log_everyone_out, (register, 0x20, 4) COPY (register, 0x30, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x1175c, 4)
log_everyone_out,  ---  CALL (ram, 0x12bcc, 4)
log_everyone_out, (register, 0x20, 4) COPY (register, 0x54, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x11764, 4)
log_everyone_out,  ---  CALL (ram, 0x12b04, 4)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11724, 4) , (unique, 0x1a80, 1)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
log_everyone_out, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_everyone_out, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_everyone_out, (register, 0x68, 1) COPY (register, 0x62, 1)
log_everyone_out, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
log_everyone_out, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
log_everyone_out, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_everyone_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_everyone_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_everyone_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_everyone_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_everyone_out,  ---  CBRANCH (ram, 0x11784, 4) , (unique, 0x1a80, 1)
log_everyone_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
log_everyone_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_everyone_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_everyone_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_everyone_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_everyone_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_everyone_out, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x10, 4)
log_everyone_out, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x10, 4)
log_everyone_out, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
log_everyone_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x80, 4) COPY (register, 0x54, 4)
log_everyone_out, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_everyone_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_everyone_out, (register, 0x54, 4) COPY (register, 0x80, 4)
log_everyone_out, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
log_everyone_out, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
log_everyone_out, (register, 0x69, 1) COPY (register, 0xb0, 1)
log_everyone_out, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
log_everyone_out,  ---  RETURN (register, 0x5c, 4)
log_everyone_out, (register, 0x58, 4) COPY (const, 0x11788, 4)
log_everyone_out,  ---  CALL (ram, 0x10ac4, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
log_in, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x30, 4) COPY (const, 0x5f08, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
log_in, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x28, 4) INT_ZEXT (unique, 0x3ca00, 1)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
log_in, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x34, 4) , (register, 0x54, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x34, 4)
log_in, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x34, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_in, (register, 0x34, 4) COPY (register, 0x20, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
log_in, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
log_in, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_in,  ---  CBRANCH (ram, 0x117dc, 4) , (unique, 0x1a80, 1)
log_in, (register, 0x2c, 4) COPY (const, 0x6214, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
log_in, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1c, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_in,  ---  CBRANCH (ram, 0x11844, 4) , (unique, 0x1a80, 1)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
log_in, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x68, 1) COPY (register, 0x62, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
log_in, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
log_in, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_in,  ---  CBRANCH (ram, 0x11904, 4) , (unique, 0x1a80, 1)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x34, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x34, 4)
log_in, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_in, (register, 0x80, 4) COPY (register, 0x54, 4)
log_in, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_in, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_in, (register, 0x54, 4) COPY (register, 0x80, 4)
log_in, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
log_in, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
log_in, (register, 0x69, 1) COPY (register, 0xb0, 1)
log_in, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
log_in,  ---  RETURN (register, 0x5c, 4)
log_in, (register, 0x38, 4) COPY (const, 0x6278, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x8, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x8, 4)
log_in, (register, 0x3c, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x38, 4) , (const, 0xffff, 4)
log_in, (register, 0x38, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (register, 0x24, 4) COPY (register, 0x3c, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x20, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
log_in, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x58, 4) COPY (const, 0x117f8, 4)
log_in,  ---  CALL (ram, 0x129f0, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
log_in, (register, 0x40, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in,  ---  CBRANCH (ram, 0x118cc, 4) , (register, 0x61, 1)
log_in, (register, 0x38, 4) COPY (const, 0x6214, 4)
log_in, (register, 0x58, 4) COPY (const, 0x11808, 4)
log_in,  ---  CALL (ram, 0x12ab8, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x38, 4) , (const, 0xffff, 4)
log_in, (register, 0x38, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (register, 0x3c, 4) COPY (register, 0x20, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_in,  ---  CBRANCH (ram, 0x11890, 4) , (unique, 0x1a80, 1)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x20, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_in, (register, 0x62, 1) COPY (register, 0x66, 1)
log_in, (register, 0x61, 1) COPY (register, 0x65, 1)
log_in, (register, 0x60, 1) COPY (register, 0x64, 1)
log_in, (register, 0x63, 1) COPY (register, 0x67, 1)
log_in, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_in,  ---  CBRANCH (ram, 0x11870, 4) , (unique, 0x1a80, 1)
log_in, (register, 0x20, 4) COPY (register, 0x3c, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x24, 4) INT_ADD (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x20, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (register, 0x58, 4) COPY (const, 0x11838, 4)
log_in,  ---  CALL (ram, 0x10b9c, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x154, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x20, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
log_in,  ---  BRANCH (ram, 0x117c4, 4)
log_in, (register, 0x34, 4) COPY (const, 0x620c, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
log_in, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
log_in, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x58, 4) COPY (const, 0x11854, 4)
log_in,  ---  CALL (ram, 0x12ddc, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x20, 4) COPY (const, 0x52c8, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x24, 4) COPY (const, 0x1, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x33, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x33, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
log_in, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (register, 0x58, 4) COPY (const, 0x1186c, 4)
log_in,  ---  CALL (ram, 0x10ae8, 4)
log_in,  ---  BRANCH (ram, 0x117c4, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x154, 4)
log_in, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x28, 4) COPY (const, 0x532c, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x20, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
log_in, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (register, 0x20, 4) COPY (register, 0x3c, 4)
log_in, (register, 0x68, 1) COPY (register, 0x62, 1)
log_in, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x24, 4)
log_in, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x2c, 4)
log_in, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (register, 0x2c, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x58, 4) COPY (const, 0x1188c, 4)
log_in,  ---  CALL (ram, 0x11550, 4)
log_in,  ---  BRANCH (ram, 0x11828, 4)
log_in, (register, 0x44, 4) COPY (const, 0x620c, 4)
log_in, (register, 0x20, 4) COPY (register, 0x40, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x44, 4) , (const, 0xffff, 4)
log_in, (register, 0x44, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (register, 0x58, 4) COPY (const, 0x118a0, 4)
log_in,  ---  CALL (ram, 0x12ab0, 4)
log_in, (register, 0x40, 4) COPY (register, 0x20, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
log_in, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x58, 4) COPY (const, 0x118ac, 4)
log_in,  ---  CALL (ram, 0x12ddc, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
log_in, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x28, 4) COPY (const, 0x52fc, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
log_in, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_in, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
log_in, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x24, 4) COPY (const, 0x1, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x2c, 4) COPY (const, 0x20, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (register, 0x58, 4) COPY (const, 0x118c8, 4)
log_in,  ---  CALL (ram, 0x10bb4, 4)
log_in,  ---  BRANCH (ram, 0x1181c, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x24, 4) INT_ADD (register, 0x34, 4) , (const, 0x2c, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x20, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (register, 0x58, 4) COPY (const, 0x118dc, 4)
log_in,  ---  CALL (ram, 0x10b9c, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x154, 4)
log_in, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (register, 0x24, 4) COPY (register, 0x3c, 4)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
log_in, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x20, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
log_in,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
log_in, (register, 0x58, 4) COPY (const, 0x118f4, 4)
log_in,  ---  CALL (ram, 0x1277c, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x24, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_in, (unique, 0x2e80, 4) INT_RIGHT (const, 0x24, 4) , (const, 0x1f, 4)
log_in, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_in, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_in, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_in, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_in, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_in, (register, 0x28, 4) COPY (const, 0x24, 4)
log_in, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_in, (register, 0x66, 1) COPY (register, 0x68, 1)
log_in, (register, 0x67, 1) COPY (register, 0x63, 1)
log_in, (register, 0x58, 4) COPY (const, 0x11900, 4)
log_in,  ---  CALL (ram, 0x12ac0, 4)
log_in,  ---  BRANCH (ram, 0x117c4, 4)
log_in, (register, 0x58, 4) COPY (const, 0x11908, 4)
log_in,  ---  CALL (ram, 0x10ac4, 4)
log_out, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
log_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
log_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
log_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
log_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_out,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
log_out, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x30, 4) COPY (register, 0x20, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
log_out, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x54, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_out,  ---  CBRANCH (ram, 0x1193c, 4) , (unique, 0x1a80, 1)
log_out, (register, 0x2c, 4) COPY (const, 0x6214, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
log_out, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1c, 4)
log_out, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_out, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
log_out,  ---  CBRANCH (ram, 0x1198c, 4) , (unique, 0x1a80, 1)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x80, 4) COPY (register, 0x54, 4)
log_out, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x54, 4) COPY (register, 0x80, 4)
log_out, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
log_out, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
log_out, (register, 0x69, 1) COPY (register, 0xb0, 1)
log_out, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
log_out,  ---  RETURN (register, 0x5c, 4)
log_out, (register, 0x2c, 4) COPY (const, 0x6278, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x8, 4)
log_out, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x8, 4)
log_out, (register, 0x34, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
log_out, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (register, 0x24, 4) COPY (register, 0x34, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x28, 4) COPY (const, 0x20, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_out, (register, 0x66, 1) COPY (register, 0x68, 1)
log_out, (register, 0x67, 1) COPY (register, 0x63, 1)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x58, 4) COPY (const, 0x11958, 4)
log_out,  ---  CALL (ram, 0x129f0, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
log_out, (register, 0x38, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
log_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_out,  ---  CBRANCH (ram, 0x119bc, 4) , (register, 0x61, 1)
log_out, (register, 0x58, 4) COPY (const, 0x11964, 4)
log_out,  ---  CALL (ram, 0x12ab8, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x20, 4)
log_out, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x28, 4) COPY (const, 0x5338, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
log_out, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
log_out, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (register, 0x68, 1) COPY (register, 0x62, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x24, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x2c, 4)
log_out, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (register, 0x2c, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x58, 4) COPY (const, 0x1197c, 4)
log_out,  ---  CALL (ram, 0x11550, 4)
log_out, (register, 0x20, 4) COPY (register, 0x38, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x80, 4) COPY (register, 0x54, 4)
log_out, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x54, 4) COPY (register, 0x80, 4)
log_out,  ---  BRANCH (ram, 0x12bcc, 4)
log_out, (register, 0x30, 4) COPY (const, 0x620c, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
log_out, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_out, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x58, 4) COPY (const, 0x1199c, 4)
log_out,  ---  CALL (ram, 0x12ddc, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_out, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x20, 4) COPY (const, 0x52c8, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
log_out, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x24, 4) COPY (const, 0x1, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x66, 1) COPY (register, 0x68, 1)
log_out, (register, 0x67, 1) COPY (register, 0x63, 1)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x33, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x28, 4) COPY (const, 0x33, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
log_out, (register, 0x66, 1) COPY (register, 0x68, 1)
log_out, (register, 0x67, 1) COPY (register, 0x63, 1)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
log_out, (register, 0x80, 4) COPY (register, 0x54, 4)
log_out, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
log_out, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
log_out, (register, 0x54, 4) COPY (register, 0x80, 4)
log_out,  ---  BRANCH (ram, 0x10ae8, 4)
log_out, (register, 0x2c, 4) COPY (const, 0x6214, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
log_out, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1c, 4)
log_out, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
log_out, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
log_out, (register, 0x62, 1) COPY (register, 0x66, 1)
log_out, (register, 0x61, 1) COPY (register, 0x65, 1)
log_out, (register, 0x60, 1) COPY (register, 0x64, 1)
log_out, (register, 0x63, 1) COPY (register, 0x67, 1)
log_out,  ---  CBRANCH (ram, 0x11934, 4) , (register, 0x61, 1)
log_out, (register, 0x30, 4) COPY (const, 0x620c, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
log_out, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_out, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x58, 4) COPY (const, 0x119e0, 4)
log_out,  ---  CALL (ram, 0x12ddc, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
log_out, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
log_out, (register, 0x28, 4) COPY (const, 0x5340, 4)
log_out, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
log_out,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
log_out, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
log_out, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
log_out, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x24, 4) COPY (const, 0x1, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
log_out, (register, 0x66, 1) COPY (register, 0x68, 1)
log_out, (register, 0x67, 1) COPY (register, 0x63, 1)
log_out, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
log_out, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
log_out, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
log_out, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
log_out, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
log_out, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
log_out, (register, 0x2c, 4) COPY (const, 0x20, 4)
log_out, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
log_out, (register, 0x66, 1) COPY (register, 0x68, 1)
log_out, (register, 0x67, 1) COPY (register, 0x63, 1)
log_out, (register, 0x58, 4) COPY (const, 0x119fc, 4)
log_out,  ---  CALL (ram, 0x10bb4, 4)
log_out,  ---  BRANCH (ram, 0x11934, 4)
midnight_after_me, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
midnight_after_me, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
midnight_after_me, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
midnight_after_me, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
midnight_after_me, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x34, 4) COPY (const, 0x5f08, 4)
midnight_after_me, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
midnight_after_me, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
midnight_after_me, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_LESSEQUAL (const, 0x38, 4) , (register, 0x54, 4)
midnight_after_me, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x38, 4)
midnight_after_me, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x38, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x30, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
midnight_after_me, (register, 0x58, 4) COPY (const, 0x11a28, 4)
midnight_after_me,  ---  CALL (ram, 0x10b3c, 4)
midnight_after_me, (register, 0x50, 4) COPY (register, 0x20, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x20, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x20, 4)
midnight_after_me, (register, 0x38, 4) INT_ADD (register, 0x20, 4) , (const, 0x20, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8380, 4) INT_ADD (register, 0x50, 4) , (const, 0xfffffff4, 4)
midnight_after_me, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
midnight_after_me, (register, 0x58, 4) COPY (register, 0x30, 4)
midnight_after_me, (unique, 0x8380, 4) INT_ADD (register, 0x50, 4) , (const, 0xfffffff8, 4)
midnight_after_me, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8380, 4) INT_ADD (register, 0x50, 4) , (const, 0xfffffffc, 4)
midnight_after_me, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
midnight_after_me, (register, 0x68, 1) COPY (register, 0x62, 1)
midnight_after_me, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x50, 4)
midnight_after_me, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x38, 4)
midnight_after_me, (unique, 0x3ba80, 4) INT_SUB (register, 0x50, 4) , (register, 0x38, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x62, 1) COPY (register, 0x66, 1)
midnight_after_me, (register, 0x61, 1) COPY (register, 0x65, 1)
midnight_after_me, (register, 0x60, 1) COPY (register, 0x64, 1)
midnight_after_me, (register, 0x63, 1) COPY (register, 0x67, 1)
midnight_after_me, (register, 0x80, 4) COPY (register, 0x58, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x58, 4) COPY (register, 0x80, 4)
midnight_after_me, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
midnight_after_me,  ---  CBRANCH (ram, 0x11a30, 4) , (unique, 0x1a80, 1)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x2c, 4) COPY (const, 0x0, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x66, 1) COPY (register, 0x68, 1)
midnight_after_me, (register, 0x67, 1) COPY (register, 0x63, 1)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x50, 4) INT_NEGATE (const, 0x0, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x66, 1) COPY (register, 0x68, 1)
midnight_after_me, (register, 0x67, 1) COPY (register, 0x63, 1)
midnight_after_me, (register, 0x80, 4) COPY (register, 0x30, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x30, 4) COPY (register, 0x80, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
midnight_after_me, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
midnight_after_me, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
midnight_after_me,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
midnight_after_me, (register, 0x58, 4) COPY (const, 0x11a94, 4)
midnight_after_me,  ---  CALL (ram, 0x1466c, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
midnight_after_me, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
midnight_after_me, (register, 0x68, 1) COPY (register, 0x62, 1)
midnight_after_me, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
midnight_after_me, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
midnight_after_me, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x62, 1) COPY (register, 0x66, 1)
midnight_after_me, (register, 0x61, 1) COPY (register, 0x65, 1)
midnight_after_me, (register, 0x60, 1) COPY (register, 0x64, 1)
midnight_after_me, (register, 0x63, 1) COPY (register, 0x67, 1)
midnight_after_me, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
midnight_after_me,  ---  CBRANCH (ram, 0x11aac, 4) , (unique, 0x1a80, 1)
midnight_after_me, (unique, 0x2e80, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
midnight_after_me, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
midnight_after_me, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
midnight_after_me, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
midnight_after_me, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
midnight_after_me, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
midnight_after_me, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x38, 4)
midnight_after_me, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x38, 4)
midnight_after_me, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
midnight_after_me, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x80, 4) COPY (register, 0x54, 4)
midnight_after_me, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
midnight_after_me, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
midnight_after_me, (register, 0x54, 4) COPY (register, 0x80, 4)
midnight_after_me, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
midnight_after_me, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
midnight_after_me, (register, 0x69, 1) COPY (register, 0xb0, 1)
midnight_after_me, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
midnight_after_me,  ---  RETURN (register, 0x5c, 4)
midnight_after_me, (register, 0x58, 4) COPY (const, 0x11ab0, 4)
midnight_after_me,  ---  CALL (ram, 0x10ac4, 4)
do_totals, (register, 0x50, 4) COPY (const, 0x5f08, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
do_totals, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
do_totals, (unique, 0x3f300, 4) INT_AND (register, 0x50, 4) , (const, 0xffff, 4)
do_totals, (register, 0x50, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_totals, (register, 0x34, 4) COPY (register, 0x20, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x12c, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0x12c, 4) , (register, 0x54, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x12c, 4)
do_totals, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x12c, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
do_totals, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x3c, 4) COPY (register, 0x28, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
do_totals, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x30, 4) COPY (register, 0x24, 4)
do_totals, (register, 0x68, 1) COPY (register, 0x62, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x24, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x20, 4)
do_totals, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x20, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x150, 4)
do_totals, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x124, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
do_totals, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
do_totals, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
do_totals,  ---  CBRANCH (ram, 0x11be8, 4) , (unique, 0x2600, 1)
do_totals, (register, 0x40, 4) COPY (register, 0x2c, 4)
do_totals, (register, 0x38, 4) COPY (const, 0x6214, 4)
do_totals, (register, 0x2c, 4) COPY (const, 0x5378, 4)
do_totals, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
do_totals, (unique, 0x3f300, 4) INT_AND (register, 0x38, 4) , (const, 0xffff, 4)
do_totals, (register, 0x38, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_totals, (register, 0x4c, 4) COPY (const, 0x5070, 4)
do_totals, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_totals, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
do_totals, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_totals, (register, 0x48, 4) COPY (register, 0x38, 4)
do_totals, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_totals, (unique, 0x3f300, 4) INT_AND (register, 0x4c, 4) , (const, 0xffff, 4)
do_totals, (register, 0x4c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_totals,  ---  BRANCH (ram, 0x11b24, 4)
do_totals, (register, 0x20, 4) COPY (register, 0x30, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11b18, 4)
do_totals,  ---  CALL (ram, 0x11a00, 4)
do_totals, (register, 0x68, 1) COPY (register, 0x62, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x30, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x20, 4)
do_totals, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x20, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
do_totals, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
do_totals, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
do_totals,  ---  CBRANCH (ram, 0x11be8, 4) , (unique, 0x2600, 1)
do_totals, (register, 0x2c, 4) COPY (register, 0x44, 4)
do_totals, (register, 0x24, 4) COPY (register, 0x3c, 4)
do_totals, (register, 0x28, 4) COPY (register, 0x40, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11b34, 4)
do_totals,  ---  CALL (ram, 0x116c0, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x14, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals,  ---  CBRANCH (ram, 0x11b10, 4) , (register, 0x61, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x128, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x128, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x128, 4)
do_totals, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x128, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0xa, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0xa, 4) , (register, 0x2c, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0xa, 4)
do_totals, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0xa, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0xfffffef8, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (register, 0x20, 4) , (register, 0x2c, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11b54, 4)
do_totals,  ---  CALL (ram, 0x10b3c, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x10, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x58, 4) COPY (register, 0x20, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals,  ---  CBRANCH (ram, 0x11c04, 4) , (register, 0x61, 1)
do_totals, (register, 0x2c, 4) COPY (const, 0x536c, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x24, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x50, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
do_totals, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
do_totals, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
do_totals, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_totals, (register, 0x20, 4) COPY (register, 0x50, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x10, 4)
do_totals, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x100, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x24, 4) COPY (const, 0x100, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
do_totals, (register, 0x66, 1) COPY (register, 0x68, 1)
do_totals, (register, 0x67, 1) COPY (register, 0x63, 1)
do_totals, (register, 0x2c, 4) COPY (register, 0x24, 4)
do_totals, (unique, 0x7800, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
do_totals, (unique, 0x8480, 4) INT_ADD (register, 0x4c, 4) , (unique, 0x7800, 4)
do_totals, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x28, 4) COPY (const, 0x1, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
do_totals, (register, 0x66, 1) COPY (register, 0x68, 1)
do_totals, (register, 0x67, 1) COPY (register, 0x63, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0xc, 4)
do_totals, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0x14, 4)
do_totals, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x760, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xe, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xe, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (const, 0x760, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (const, 0x760, 4)
do_totals, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0x760, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (const, 0xc, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (const, 0xc, 4)
do_totals, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0xc, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11bb0, 4)
do_totals,  ---  CALL (ram, 0x10c14, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
do_totals, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x20, 4) COPY (register, 0x50, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11bbc, 4)
do_totals,  ---  CALL (ram, 0x11378, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x14, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals,  ---  CBRANCH (ram, 0x11b10, 4) , (register, 0x61, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x24, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals,  ---  CBRANCH (ram, 0x11b10, 4) , (register, 0x61, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
do_totals, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11bdc, 4)
do_totals,  ---  CALL (ram, 0x11a00, 4)
do_totals, (register, 0x68, 1) COPY (register, 0x62, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x30, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x20, 4)
do_totals, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x20, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
do_totals, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
do_totals, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
do_totals, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
do_totals,  ---  CBRANCH (ram, 0x11b24, 4) , (unique, 0x2480, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x124, 4)
do_totals, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x68, 1) COPY (register, 0x62, 1)
do_totals, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
do_totals, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
do_totals, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
do_totals, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
do_totals, (register, 0x62, 1) COPY (register, 0x66, 1)
do_totals, (register, 0x61, 1) COPY (register, 0x65, 1)
do_totals, (register, 0x60, 1) COPY (register, 0x64, 1)
do_totals, (register, 0x63, 1) COPY (register, 0x67, 1)
do_totals, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
do_totals,  ---  CBRANCH (ram, 0x11c44, 4) , (unique, 0x1a80, 1)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x12c, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x12c, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x12c, 4)
do_totals, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x12c, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
do_totals, (register, 0x80, 4) COPY (register, 0x54, 4)
do_totals, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
do_totals, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
do_totals, (register, 0x54, 4) COPY (register, 0x80, 4)
do_totals, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
do_totals, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
do_totals, (register, 0x69, 1) COPY (register, 0xb0, 1)
do_totals, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
do_totals,  ---  RETURN (register, 0x5c, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x24, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x50, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x100, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x24, 4) COPY (const, 0x100, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
do_totals, (register, 0x66, 1) COPY (register, 0x68, 1)
do_totals, (register, 0x67, 1) COPY (register, 0x63, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_totals, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
do_totals, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
do_totals, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
do_totals, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
do_totals, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
do_totals, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
do_totals, (register, 0x28, 4) COPY (const, 0x1, 4)
do_totals, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
do_totals, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
do_totals, (register, 0x66, 1) COPY (register, 0x68, 1)
do_totals, (register, 0x67, 1) COPY (register, 0x63, 1)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (register, 0x20, 4) COPY (register, 0x50, 4)
do_totals, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
do_totals, (unique, 0x8480, 4) INT_ADD (register, 0x4c, 4) , (unique, 0x7800, 4)
do_totals, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
do_totals, (register, 0x2c, 4) COPY (register, 0x24, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x58, 4) , (const, 0xc, 4)
do_totals, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
do_totals,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11c3c, 4)
do_totals,  ---  CALL (ram, 0x10c14, 4)
do_totals, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
do_totals, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
do_totals,  ---  BRANCH (ram, 0x11bb4, 4)
do_totals, (register, 0x58, 4) COPY (const, 0x11c48, 4)
do_totals,  ---  CALL (ram, 0x10ac4, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
parse_entries, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x40, 4) COPY (const, 0x5f08, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x40, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x40, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x38, 4) COPY (const, 0x6214, 4)
parse_entries, (register, 0x3c, 4) COPY (const, 0x620c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x34, 4) , (register, 0x54, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x34, 4)
parse_entries, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x34, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x38, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x38, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x3c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x3c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x34, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x44, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11c80, 4)
parse_entries,  ---  CALL (ram, 0x12c70, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11cf8, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11fbc, 4) , (unique, 0x1a80, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11c9c, 4)
parse_entries,  ---  CALL (ram, 0x12dec, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11cb0, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11ffc, 4) , (unique, 0x1a80, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11cb8, 4)
parse_entries,  ---  CALL (ram, 0x12fd4, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11d10, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11cd4, 4)
parse_entries,  ---  CALL (ram, 0x12ddc, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x53ec, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x16, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x16, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11cec, 4)
parse_entries,  ---  CALL (ram, 0x10ae8, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11cf0, 4)
parse_entries,  ---  CALL (ram, 0x12c70, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11c88, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
parse_entries, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x12134, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x34, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x34, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x34, 4)
parse_entries, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
parse_entries, (register, 0x80, 4) COPY (register, 0x54, 4)
parse_entries, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
parse_entries, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
parse_entries, (register, 0x54, 4) COPY (register, 0x80, 4)
parse_entries, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
parse_entries, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
parse_entries, (register, 0x69, 1) COPY (register, 0xb0, 1)
parse_entries, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
parse_entries,  ---  RETURN (register, 0x5c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11fe4, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3d580, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
parse_entries, (register, 0x2c, 4) INT_SEXT (unique, 0x3d580, 2)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11d24, 4) , (unique, 0x2680, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11d28, 4) , (unique, 0x2680, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x28, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11e10, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x60d8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x28, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x28, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x28, 4)
parse_entries, (register, 0x28, 4) INT_ADD (register, 0x24, 4) , (register, 0x28, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
parse_entries, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
parse_entries,  ---  CBRANCH (ram, 0x11db8, 4) , (unique, 0x2280, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x24, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x20, 4)
parse_entries, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
parse_entries, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
parse_entries,  ---  CBRANCH (ram, 0x11db8, 4) , (unique, 0x2480, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x28, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x5440, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x6280, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x2c, 4) COPY (register, 0x28, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11d80, 4)
parse_entries,  ---  CALL (ram, 0x11ab0, 4)
parse_entries, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3d580, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
parse_entries, (register, 0x2c, 4) INT_SEXT (unique, 0x3d580, 2)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x9, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x9, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x9, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x9, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
parse_entries, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
parse_entries,  ---  CBRANCH (ram, 0x11d8c, 4) , (unique, 0x2680, 1)
parse_entries, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
parse_entries, (unique, 0x1780, 4) INT_ADD (const, 0x11d88, 4) , (const, 0x8, 4)
parse_entries, (unique, 0x8480, 4) INT_ADD (unique, 0x1780, 4) , (unique, 0x7800, 4)
parse_entries, (unique, 0x3c880, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
parse_entries, (unique, 0x0, 4) INT_AND (unique, 0x3c880, 4) , (const, 0x1, 4)
parse_entries, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
parse_entries, (register, 0x69, 1) COPY (register, 0xb0, 1)
parse_entries, (register, 0x5c, 4) INT_AND (unique, 0x3c880, 4) , (const, 0xfffffffe, 4)
parse_entries,  ---  BRANCHIND (register, 0x5c, 4)
parse_entries,  ---  BRANCH (ram, 0x11ee0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x12024, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x34, 4) COPY (const, 0x6280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x5434, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x34, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x2c, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
parse_entries, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11df0, 4)
parse_entries,  ---  CALL (ram, 0x11ab0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11df8, 4)
parse_entries,  ---  CALL (ram, 0x11a00, 4)
parse_entries, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
parse_entries, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x28, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11d60, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x12098, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x2c, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x68, 1) COPY (register, 0x62, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (register, 0x44, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x44, 4)
parse_entries, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (register, 0x44, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e30, 4)
parse_entries,  ---  CALL (ram, 0x11300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e38, 4)
parse_entries,  ---  CALL (ram, 0x11a00, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x6280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e50, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries, (register, 0x2c, 4) COPY (const, 0x6278, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x24, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e68, 4)
parse_entries,  ---  CALL (ram, 0x12aec, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e70, 4) , (unique, 0x2680, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x34, 4) COPY (const, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries,  ---  CBRANCH (ram, 0x11ed8, 4) , (register, 0x61, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e7c, 4)
parse_entries,  ---  CALL (ram, 0x12ab0, 4)
parse_entries, (register, 0x48, 4) COPY (register, 0x20, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e88, 4)
parse_entries,  ---  CALL (ram, 0x12ab8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x30, 4) COPY (register, 0x20, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x20, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11e98, 4)
parse_entries,  ---  CALL (ram, 0x10ab8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
parse_entries, (register, 0x28, 4) COPY (const, 0x54ac, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x2c, 4) COPY (const, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x4c, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11ec8, 4)
parse_entries,  ---  CALL (ram, 0x10bb4, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11ed0, 4)
parse_entries,  ---  CALL (ram, 0x12b04, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e74, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x34, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries,  ---  BRANCH (ram, 0x11c7c, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
parse_entries, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x120d8, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x12080, 4) , (unique, 0x1a80, 1)
parse_entries, (register, 0x58, 4) COPY (const, 0x11f00, 4)
parse_entries,  ---  CALL (ram, 0x11908, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11f0c, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
parse_entries, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e44, 4) , (register, 0x61, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11f28, 4)
parse_entries,  ---  CALL (ram, 0x11908, 4)
parse_entries,  ---  BRANCH (ram, 0x11f00, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x2c, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11f44, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (register, 0x24, 4) COPY (const, 0x547c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11f5c, 4)
parse_entries,  ---  CALL (ram, 0x10a64, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x12108, 4) , (unique, 0x1a80, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x547c, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (register, 0x58, 4) COPY (const, 0x11f7c, 4)
parse_entries,  ---  CALL (ram, 0x116c0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x11f88, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (register, 0x24, 4) COPY (const, 0x547c, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11fa0, 4)
parse_entries,  ---  CALL (ram, 0x10a64, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11f64, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
parse_entries, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x30, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x30, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x30, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x30, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
parse_entries,  ---  CBRANCH (ram, 0x11fb4, 4) , (unique, 0x2680, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x36, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x36, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x36, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x36, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11f64, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e44, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x5380, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x59, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x59, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11fd4, 4)
parse_entries,  ---  CALL (ram, 0x10ae8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11fe0, 4)
parse_entries,  ---  CALL (ram, 0x12c80, 4)
parse_entries,  ---  BRANCH (ram, 0x11c94, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x11fec, 4)
parse_entries,  ---  CALL (ram, 0x11a00, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x6280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
parse_entries,  ---  BRANCH (ram, 0x11d18, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x53dc, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0xd, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0xd, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12014, 4)
parse_entries,  ---  CALL (ram, 0x10ae8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x30, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12020, 4)
parse_entries,  ---  CALL (ram, 0x12c80, 4)
parse_entries,  ---  BRANCH (ram, 0x11cb0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x1202c, 4)
parse_entries,  ---  CALL (ram, 0x12ddc, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x12138, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12038, 4)
parse_entries,  ---  CALL (ram, 0x10ab8, 4)
parse_entries, (register, 0x28, 4) COPY (const, 0x5404, 4)
parse_entries, (register, 0x2c, 4) COPY (register, 0x20, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (register, 0x20, 4) COPY (register, 0x34, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12050, 4)
parse_entries,  ---  CALL (ram, 0x10bb4, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x30, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x30, 4)
parse_entries, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x30, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0xfffffff0, 4)
parse_entries,  ---  STORE (const, 0x1a1, 8) , (register, 0x20, 4) , (register, 0x28, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12064, 4)
parse_entries,  ---  CALL (ram, 0x10ab8, 4)
parse_entries, (register, 0x28, 4) COPY (const, 0x5424, 4)
parse_entries, (register, 0x2c, 4) COPY (register, 0x20, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x20, 4) COPY (register, 0x34, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (register, 0x58, 4) COPY (const, 0x1207c, 4)
parse_entries,  ---  CALL (ram, 0x10bb4, 4)
parse_entries,  ---  BRANCH (ram, 0x11dc4, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12084, 4)
parse_entries,  ---  CALL (ram, 0x11788, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x12090, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e44, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x120ac, 4)
parse_entries,  ---  CALL (ram, 0x12ddc, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x5450, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2a, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x2a, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (register, 0x58, 4) COPY (const, 0x120c4, 4)
parse_entries,  ---  CALL (ram, 0x10ae8, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x120d0, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x1c, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries,  ---  CBRANCH (ram, 0x11e44, 4) , (register, 0x61, 1)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x120ec, 4)
parse_entries,  ---  CALL (ram, 0x12ddc, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x20, 4) COPY (const, 0x5490, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x24, 4) COPY (const, 0x1, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x18, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12104, 4)
parse_entries,  ---  CALL (ram, 0x10ae8, 4)
parse_entries,  ---  BRANCH (ram, 0x11e44, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x154, 4)
parse_entries, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (register, 0x2c, 4) COPY (const, 0x5488, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x30, 4)
parse_entries, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
parse_entries, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
parse_entries, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x28, 4) COPY (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
parse_entries, (register, 0x66, 1) COPY (register, 0x68, 1)
parse_entries, (register, 0x67, 1) COPY (register, 0x63, 1)
parse_entries, (register, 0x58, 4) COPY (const, 0x12120, 4)
parse_entries,  ---  CALL (ram, 0x116c0, 4)
parse_entries, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x18, 4)
parse_entries, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
parse_entries, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
parse_entries, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
parse_entries, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
parse_entries, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
parse_entries, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
parse_entries, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
parse_entries, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
parse_entries, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
parse_entries, (register, 0x62, 1) COPY (register, 0x66, 1)
parse_entries, (register, 0x61, 1) COPY (register, 0x65, 1)
parse_entries, (register, 0x60, 1) COPY (register, 0x64, 1)
parse_entries, (register, 0x63, 1) COPY (register, 0x67, 1)
parse_entries, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
parse_entries,  ---  CBRANCH (ram, 0x1212c, 4) , (unique, 0x2680, 1)
parse_entries, (register, 0x34, 4) COPY (register, 0x2c, 4)
parse_entries,  ---  CBRANCH (ram, 0x11c7c, 4) , (register, 0x61, 1)
parse_entries,  ---  BRANCH (ram, 0x11e54, 4)
parse_entries, (register, 0x58, 4) COPY (const, 0x12138, 4)
parse_entries,  ---  CALL (ram, 0x10ac4, 4)
fatal, (register, 0x28, 4) COPY (const, 0x6200, 4)
fatal, (register, 0x2c, 4) COPY (const, 0x627c, 4)
fatal, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
fatal,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)
fatal, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
fatal, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
fatal, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fatal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
fatal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fatal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fatal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fatal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fatal, (register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x54, 4)
fatal, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0xc, 4)
fatal, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0xc, 4)
fatal, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
fatal, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
fatal, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
fatal, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
fatal, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fatal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fatal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fatal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fatal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fatal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fatal, (register, 0x24, 4) COPY (const, 0x1, 4)
fatal, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
fatal, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
fatal, (register, 0x66, 1) COPY (register, 0x68, 1)
fatal, (register, 0x67, 1) COPY (register, 0x63, 1)
fatal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
fatal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
fatal, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
fatal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
fatal, (register, 0x28, 4) COPY (const, 0x56cc, 4)
fatal, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
fatal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
fatal, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fatal, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
fatal, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fatal, (register, 0x58, 4) COPY (const, 0x12170, 4)
fatal,  ---  CALL (ram, 0x10bb4, 4)
fatal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fatal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fatal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fatal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fatal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fatal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fatal, (register, 0x20, 4) COPY (const, 0x1, 4)
fatal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
fatal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
fatal, (register, 0x66, 1) COPY (register, 0x68, 1)
fatal, (register, 0x67, 1) COPY (register, 0x63, 1)
fatal, (register, 0x58, 4) COPY (const, 0x12178, 4)
fatal,  ---  CALL (ram, 0x10b60, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
file_open, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x30, 4) COPY (const, 0x5f08, 4)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
file_open, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x10, 4)
file_open, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x10, 4)
file_open, (register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x34, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
file_open, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_open, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_open, (unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8380, 4) , (register, 0x2c, 4)
file_open,  ---  CBRANCH (ram, 0x12260, 4) , (register, 0x61, 1)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
file_open, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_open, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
file_open, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
file_open, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open,  ---  CBRANCH (ram, 0x121f0, 4) , (register, 0x61, 1)
file_open, (register, 0x28, 4) COPY (const, 0x56d4, 4)
file_open, (register, 0x2c, 4) COPY (const, 0x56d8, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
file_open, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
file_open, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_open, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
file_open,  ---  CBRANCH (ram, 0x121c0, 4) , (unique, 0x2680, 1)
file_open, (register, 0x24, 4) COPY (register, 0x28, 4)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
file_open,  ---  CBRANCH (ram, 0x121c4, 4) , (unique, 0x2680, 1)
file_open, (register, 0x24, 4) COPY (register, 0x2c, 4)
file_open, (register, 0x20, 4) COPY (register, 0x34, 4)
file_open, (register, 0x58, 4) COPY (const, 0x121cc, 4)
file_open,  ---  CALL (ram, 0x10bd8, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x38, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
file_open,  ---  CBRANCH (ram, 0x121d4, 4) , (unique, 0x2680, 1)
file_open, (register, 0x20, 4) COPY (register, 0x38, 4)
file_open,  ---  CBRANCH (ram, 0x12218, 4) , (register, 0x61, 1)
file_open, (unique, 0x8380, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffffe8, 4)
file_open, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8380, 4)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_open, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_open, (register, 0x68, 1) COPY (register, 0x62, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
file_open, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
file_open, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open,  ---  CBRANCH (ram, 0x1225c, 4) , (unique, 0x1a80, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x10, 4) , (register, 0x4c, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x10, 4)
file_open, (register, 0x54, 4) INT_SUB (register, 0x4c, 4) , (const, 0x10, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_open, (register, 0x80, 4) COPY (register, 0x54, 4)
file_open, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_open, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_open, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_open, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_open, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_open, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_open, (register, 0x54, 4) COPY (register, 0x80, 4)
file_open, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
file_open, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_open, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_open, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
file_open,  ---  RETURN (register, 0x5c, 4)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
file_open, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_open, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
file_open, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open,  ---  CBRANCH (ram, 0x121a8, 4) , (unique, 0x1a80, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
file_open, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_open, (register, 0x62, 1) COPY (register, 0x66, 1)
file_open, (register, 0x61, 1) COPY (register, 0x65, 1)
file_open, (register, 0x60, 1) COPY (register, 0x64, 1)
file_open, (register, 0x63, 1) COPY (register, 0x67, 1)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
file_open,  ---  CBRANCH (ram, 0x12204, 4) , (unique, 0x2680, 1)
file_open, (register, 0x2c, 4) COPY (const, 0x620c, 4)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
file_open,  ---  CBRANCH (ram, 0x12208, 4) , (unique, 0x2680, 1)
file_open, (register, 0x2c, 4) COPY (const, 0x6208, 4)
file_open, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
file_open,  ---  CBRANCH (ram, 0x1220c, 4) , (unique, 0x2680, 1)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_open, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
file_open,  ---  CBRANCH (ram, 0x12210, 4) , (unique, 0x2680, 1)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_open, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
file_open, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_open,  ---  BRANCH (ram, 0x121d8, 4)
file_open, (register, 0x20, 4) COPY (register, 0x34, 4)
file_open, (register, 0x58, 4) COPY (const, 0x12220, 4)
file_open,  ---  CALL (ram, 0x10b6c, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x2c, 4)
file_open, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x2c, 4)
file_open, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x2c, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x2c, 4) COPY (const, 0x56fc, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (unique, 0x3a800, 4) INT_NEGATE (const, 0x7, 4)
file_open, (register, 0x20, 4) INT_AND (register, 0x20, 4) , (unique, 0x3a800, 4)
file_open, (register, 0x66, 1) COPY (register, 0x68, 1)
file_open, (register, 0x67, 1) COPY (register, 0x63, 1)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_open, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (register, 0x68, 1) COPY (register, 0x62, 1)
file_open, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x54, 4)
file_open, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (register, 0x20, 4)
file_open, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (register, 0x20, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x24, 4) COPY (const, 0x1, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_open, (register, 0x66, 1) COPY (register, 0x68, 1)
file_open, (register, 0x67, 1) COPY (register, 0x63, 1)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x28, 4) INT_NEGATE (const, 0x0, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_open, (register, 0x66, 1) COPY (register, 0x68, 1)
file_open, (register, 0x67, 1) COPY (register, 0x63, 1)
file_open, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
file_open,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
file_open, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
file_open, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_open, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_open, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_open, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_open, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_open, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
file_open, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
file_open, (register, 0x34, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
file_open, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
file_open, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
file_open, (register, 0x20, 4) COPY (register, 0x34, 4)
file_open, (register, 0x58, 4) COPY (const, 0x1224c, 4)
file_open,  ---  CALL (ram, 0x10b84, 4)
file_open, (register, 0x20, 4) COPY (register, 0x34, 4)
file_open, (register, 0x58, 4) COPY (const, 0x12254, 4)
file_open,  ---  CALL (ram, 0x10adc, 4)
file_open, (register, 0x20, 4) COPY (register, 0x38, 4)
file_open,  ---  BRANCH (ram, 0x121d8, 4)
file_open, (register, 0x58, 4) COPY (const, 0x12260, 4)
file_open,  ---  CALL (ram, 0x10ac4, 4)
file_open, (register, 0x20, 4) COPY (const, 0x56dc, 4)
file_open, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_open, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
file_open, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_open, (register, 0x58, 4) COPY (const, 0x1226c, 4)
file_open,  ---  CALL (ram, 0x1213c, 4)
print_wtmp_file_location, (register, 0x24, 4) COPY (const, 0x5714, 4)
print_wtmp_file_location, (register, 0x28, 4) COPY (const, 0x55c0, 4)
print_wtmp_file_location, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_wtmp_file_location, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
print_wtmp_file_location, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_wtmp_file_location, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_wtmp_file_location, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_wtmp_file_location, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_wtmp_file_location, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_wtmp_file_location, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_wtmp_file_location, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_wtmp_file_location, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_wtmp_file_location, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_wtmp_file_location, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_wtmp_file_location, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_wtmp_file_location, (register, 0x20, 4) COPY (const, 0x1, 4)
print_wtmp_file_location, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_wtmp_file_location, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_wtmp_file_location, (register, 0x66, 1) COPY (register, 0x68, 1)
print_wtmp_file_location, (register, 0x67, 1) COPY (register, 0x63, 1)
print_wtmp_file_location,  ---  BRANCH (ram, 0x10ba8, 4)
print_acct_file_location, (register, 0x24, 4) COPY (const, 0x5748, 4)
print_acct_file_location, (register, 0x28, 4) COPY (const, 0x5780, 4)
print_acct_file_location, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_location, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
print_acct_file_location, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_location, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_location, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_acct_file_location, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_location, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_acct_file_location, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_location, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_acct_file_location, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_location, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_acct_file_location, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_acct_file_location, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_acct_file_location, (register, 0x20, 4) COPY (const, 0x1, 4)
print_acct_file_location, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_location, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_location, (register, 0x66, 1) COPY (register, 0x68, 1)
print_acct_file_location, (register, 0x67, 1) COPY (register, 0x63, 1)
print_acct_file_location,  ---  BRANCH (ram, 0x10ba8, 4)
print_acct_file_locations, (register, 0x20, 4) COPY (const, 0x5798, 4)
print_acct_file_locations, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
print_acct_file_locations,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
print_acct_file_locations, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_acct_file_locations,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
print_acct_file_locations, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_acct_file_locations, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (register, 0x58, 4) COPY (const, 0x122ac, 4)
print_acct_file_locations,  ---  CALL (ram, 0x10b18, 4)
print_acct_file_locations, (register, 0x24, 4) COPY (const, 0x57cc, 4)
print_acct_file_locations, (register, 0x28, 4) COPY (const, 0x5780, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_acct_file_locations, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_acct_file_locations, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_acct_file_locations, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_acct_file_locations, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_acct_file_locations, (register, 0x20, 4) COPY (const, 0x1, 4)
print_acct_file_locations, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x66, 1) COPY (register, 0x68, 1)
print_acct_file_locations, (register, 0x67, 1) COPY (register, 0x63, 1)
print_acct_file_locations, (register, 0x58, 4) COPY (const, 0x122c4, 4)
print_acct_file_locations,  ---  CALL (ram, 0x10ba8, 4)
print_acct_file_locations, (register, 0x24, 4) COPY (const, 0x57f0, 4)
print_acct_file_locations, (register, 0x28, 4) COPY (const, 0x5814, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_acct_file_locations, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_acct_file_locations, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_acct_file_locations, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_acct_file_locations, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_acct_file_locations, (register, 0x20, 4) COPY (const, 0x1, 4)
print_acct_file_locations, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x66, 1) COPY (register, 0x68, 1)
print_acct_file_locations, (register, 0x67, 1) COPY (register, 0x63, 1)
print_acct_file_locations, (register, 0x58, 4) COPY (const, 0x122dc, 4)
print_acct_file_locations,  ---  CALL (ram, 0x10ba8, 4)
print_acct_file_locations, (register, 0x24, 4) COPY (const, 0x5830, 4)
print_acct_file_locations, (register, 0x28, 4) COPY (const, 0x5854, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_acct_file_locations, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_acct_file_locations, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_acct_file_locations, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_acct_file_locations, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_acct_file_locations, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_acct_file_locations, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_acct_file_locations, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_acct_file_locations, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_acct_file_locations, (register, 0x20, 4) COPY (const, 0x1, 4)
print_acct_file_locations, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_acct_file_locations, (register, 0x66, 1) COPY (register, 0x68, 1)
print_acct_file_locations, (register, 0x67, 1) COPY (register, 0x63, 1)
print_acct_file_locations, (register, 0x80, 4) COPY (register, 0x54, 4)
print_acct_file_locations, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_acct_file_locations, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_acct_file_locations, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_acct_file_locations, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_acct_file_locations, (register, 0x54, 4) COPY (register, 0x80, 4)
print_acct_file_locations,  ---  BRANCH (ram, 0x10ba8, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
file_reader_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x38, 4) COPY (register, 0x20, 4)
file_reader_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
file_reader_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_init, (register, 0x20, 4) COPY (const, 0x38, 4)
file_reader_init, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_init, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_init, (register, 0x34, 4) COPY (register, 0x24, 4)
file_reader_init, (register, 0x3c, 4) COPY (register, 0x28, 4)
file_reader_init, (register, 0x58, 4) COPY (const, 0x12310, 4)
file_reader_init,  ---  CALL (ram, 0x14694, 4)
file_reader_init, (register, 0x30, 4) COPY (register, 0x20, 4)
file_reader_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_init, (register, 0x24, 4) COPY (const, 0x0, 4)
file_reader_init, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_init, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x38, 4) , (const, 0x1f, 4)
file_reader_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_init, (register, 0x28, 4) COPY (const, 0x38, 4)
file_reader_init, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_init, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_init, (register, 0x58, 4) COPY (const, 0x12320, 4)
file_reader_init,  ---  CALL (ram, 0x10b90, 4)
file_reader_init, (register, 0x20, 4) INT_MULT (register, 0x34, 4) , (register, 0x38, 4)
file_reader_init, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_init, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
file_reader_init, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
file_reader_init, (register, 0x58, 4) COPY (const, 0x12330, 4)
file_reader_init,  ---  CALL (ram, 0x14694, 4)
file_reader_init, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
file_reader_init, (register, 0x20, 4) COPY (register, 0x30, 4)
file_reader_init, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
file_reader_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
file_reader_init, (register, 0x80, 4) COPY (register, 0x54, 4)
file_reader_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_init, (register, 0x54, 4) COPY (register, 0x80, 4)
file_reader_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
file_reader_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_reader_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_reader_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
file_reader_init,  ---  RETURN (register, 0x5c, 4)
file_reader_add_file, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
file_reader_add_file, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
file_reader_add_file, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
file_reader_add_file, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
file_reader_add_file, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x30, 4) COPY (register, 0x20, 4)
file_reader_add_file, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
file_reader_add_file, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_add_file, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_add_file, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_add_file, (register, 0x20, 4) COPY (const, 0x8, 4)
file_reader_add_file, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_add_file, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_add_file, (register, 0x34, 4) COPY (register, 0x24, 4)
file_reader_add_file, (register, 0x58, 4) COPY (const, 0x12354, 4)
file_reader_add_file,  ---  CALL (ram, 0x14694, 4)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_add_file, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_add_file, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_add_file, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_add_file, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_add_file, (register, 0x28, 4) COPY (const, 0x0, 4)
file_reader_add_file, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_add_file, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
file_reader_add_file, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_add_file, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
file_reader_add_file, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
file_reader_add_file, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
file_reader_add_file, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_add_file, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_add_file, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_add_file, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
file_reader_add_file,  ---  CBRANCH (ram, 0x12394, 4) , (register, 0x61, 1)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_add_file, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_add_file, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_add_file, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_add_file, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_add_file, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
file_reader_add_file, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_add_file, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_add_file, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_add_file, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_add_file, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_add_file,  ---  CBRANCH (ram, 0x12380, 4) , (unique, 0x1a80, 1)
file_reader_add_file,  ---  BRANCH (ram, 0x1239c, 4)
file_reader_add_file, (register, 0x28, 4) COPY (register, 0x2c, 4)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_add_file, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_add_file, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_add_file, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_add_file, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_add_file, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_add_file, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_add_file, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_add_file, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_add_file, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_add_file, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_add_file, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_add_file, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_add_file,  ---  CBRANCH (ram, 0x1237c, 4) , (unique, 0x1a80, 1)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
file_reader_add_file, (register, 0x80, 4) COPY (register, 0x54, 4)
file_reader_add_file, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x54, 4) COPY (register, 0x80, 4)
file_reader_add_file, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
file_reader_add_file, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_reader_add_file, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
file_reader_add_file,  ---  RETURN (register, 0x5c, 4)
file_reader_add_file, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_add_file,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
file_reader_add_file, (register, 0x80, 4) COPY (register, 0x54, 4)
file_reader_add_file, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_add_file, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_add_file, (register, 0x54, 4) COPY (register, 0x80, 4)
file_reader_add_file, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
file_reader_add_file, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_reader_add_file, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_reader_add_file, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
file_reader_add_file,  ---  RETURN (register, 0x5c, 4)
file_reader_add_file, (register, 0x28, 4) COPY (register, 0x2c, 4)
file_reader_add_file,  ---  BRANCH (ram, 0x1238c, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x20, 4) , (const, 0x18, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
file_reader_get_entry, (unique, 0x3cc80, 4) INT_ADD (unique, 0x9180, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x3cc80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
file_reader_get_entry, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x30, 4) COPY (register, 0x20, 4)
file_reader_get_entry, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_get_entry, (register, 0x24, 4) INT_OR (register, 0x28, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x54, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x8, 4)
file_reader_get_entry, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x8, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12520, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x34, 4) COPY (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x34, 4)
file_reader_get_entry, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x34, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12410, 4) , (register, 0x61, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x2c, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x1245c, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x123e8, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10af4, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3b680, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b680, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b680, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12560, 4) , (register, 0x61, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x125a4, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12400, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10bc0, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12558, 4) , (register, 0x61, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x24, 4) COPY (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12428, 4)
file_reader_get_entry,  ---  CALL (ram, 0x12178, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (register, 0x2c, 4) COPY (register, 0x20, 4)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12400, 4) , (register, 0x61, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12570, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x30, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
file_reader_get_entry,  ---  CBRANCH (ram, 0x123d8, 4) , (register, 0x61, 1)
file_reader_get_entry, (register, 0x20, 4) COPY (register, 0x2c, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12464, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10c20, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (register, 0x38, 4) COPY (register, 0x20, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (unique, 0x52c80, 4) INT_NEGATE (const, 0x0, 4)
file_reader_get_entry, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x37b80, 1) INT_CARRY (register, 0x24, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
file_reader_get_entry, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
file_reader_get_entry, (unique, 0x37d00, 4) INT_ADD (register, 0x24, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x24, 4)
file_reader_get_entry, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
file_reader_get_entry, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
file_reader_get_entry, (unique, 0x37f80, 4) INT_ADD (register, 0x24, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
file_reader_get_entry, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
file_reader_get_entry, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38300, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52c80, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
file_reader_get_entry, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
file_reader_get_entry, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
file_reader_get_entry, (unique, 0x52d00, 1) BOOL_NEGATE (register, 0x62, 1)
file_reader_get_entry, (unique, 0x52d80, 4) INT_ZEXT (unique, 0x52d00, 1)
file_reader_get_entry, (unique, 0x52e00, 4) INT_ADD (const, 0x0, 4) , (unique, 0x52d80, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_SUB (register, 0x24, 4) , (unique, 0x52e00, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x123f8, 4) , (unique, 0x2280, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (register, 0x34, 4)
file_reader_get_entry, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3e80, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3e00, 4)
file_reader_get_entry, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x4100, 4) INT_SRIGHT (register, 0x34, 4) , (const, 0x1f, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (unique, 0x4100, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12484, 4)
file_reader_get_entry,  ---  CALL (ram, 0x147ec, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x44, 4) COPY (register, 0x24, 4)
file_reader_get_entry, (register, 0x40, 4) COPY (register, 0x20, 4)
file_reader_get_entry, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3e80, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3e00, 4)
file_reader_get_entry, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x4100, 4) INT_SRIGHT (register, 0x28, 4) , (const, 0x1f, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (unique, 0x4100, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
file_reader_get_entry, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_get_entry, (unique, 0x52f00, 4) INT_NEGATE (register, 0x44, 4)
file_reader_get_entry, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x37b80, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x52f00, 4)
file_reader_get_entry, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
file_reader_get_entry, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
file_reader_get_entry, (unique, 0x37d00, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52f00, 4)
file_reader_get_entry, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
file_reader_get_entry, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
file_reader_get_entry, (unique, 0x37f80, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52f00, 4)
file_reader_get_entry, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
file_reader_get_entry, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
file_reader_get_entry, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38300, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52f00, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
file_reader_get_entry, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
file_reader_get_entry, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
file_reader_get_entry, (unique, 0x52f80, 1) BOOL_NEGATE (register, 0x62, 1)
file_reader_get_entry, (unique, 0x53000, 4) INT_ZEXT (unique, 0x52f80, 1)
file_reader_get_entry, (unique, 0x53080, 4) INT_ADD (register, 0x44, 4) , (unique, 0x53000, 4)
file_reader_get_entry, (register, 0x24, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x53080, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x34, 4)
file_reader_get_entry, (register, 0x24, 4) INT_SUB (const, 0x0, 4) , (register, 0x34, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x34, 4) COPY (const, 0x622c, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
file_reader_get_entry, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x124ac, 4) , (unique, 0x2680, 1)
file_reader_get_entry, (register, 0x40, 4) COPY (register, 0x28, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x28, 4) COPY (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x24, 4) INT_MULT (register, 0x24, 4) , (register, 0x40, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
file_reader_get_entry, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x124bc, 4) , (unique, 0x2680, 1)
file_reader_get_entry, (register, 0x44, 4) COPY (register, 0x2c, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x124c0, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10be4, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x48, 4) COPY (register, 0x40, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x125c4, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (register, 0x40, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x124e4, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10af4, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3b680, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b680, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b680, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12618, 4) , (register, 0x61, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x125f4, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x28, 4) COPY (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x24, 4) INT_SUB (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x24, 4) INT_MULT (register, 0x24, 4) , (register, 0x48, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12510, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10be4, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (register, 0x40, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (register, 0x44, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x40, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x44, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x40, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x44, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_get_entry,  ---  CBRANCH (ram, 0x12588, 4) , (unique, 0x1a80, 1)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
file_reader_get_entry, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
file_reader_get_entry, (unique, 0x3cc80, 4) INT_ADD (unique, 0x9180, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x3cc80, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
file_reader_get_entry, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x68, 1) COPY (register, 0x62, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x38, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x20, 4) INT_SUB (register, 0x38, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x3e780, 4) INT_MULT (register, 0x58, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x20, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x50, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (unique, 0x52c80, 4) INT_NEGATE (const, 0x0, 4)
file_reader_get_entry, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x37b80, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
file_reader_get_entry, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
file_reader_get_entry, (unique, 0x37d00, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
file_reader_get_entry, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
file_reader_get_entry, (unique, 0x37f80, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
file_reader_get_entry, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
file_reader_get_entry, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38300, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52c80, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
file_reader_get_entry, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
file_reader_get_entry, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
file_reader_get_entry, (unique, 0x52d00, 1) BOOL_NEGATE (register, 0x62, 1)
file_reader_get_entry, (unique, 0x52d80, 4) INT_ZEXT (unique, 0x52d00, 1)
file_reader_get_entry, (unique, 0x52e00, 4) INT_ADD (const, 0x0, 4) , (unique, 0x52d80, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x52e00, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x30, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x30, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
file_reader_get_entry, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x80, 4) COPY (register, 0x54, 4)
file_reader_get_entry, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
file_reader_get_entry, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x54, 4) COPY (register, 0x80, 4)
file_reader_get_entry, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_reader_get_entry, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
file_reader_get_entry,  ---  RETURN (register, 0x5c, 4)
file_reader_get_entry, (register, 0x20, 4) COPY (const, 0x5890, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x1256c, 4)
file_reader_get_entry,  ---  CALL (ram, 0x1213c, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x123f8, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x28, 4) COPY (const, 0x2, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x24, 4) COPY (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x1257c, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10be4, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
file_reader_get_entry, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x12444, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x28, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (unique, 0x52c80, 4) INT_NEGATE (const, 0x0, 4)
file_reader_get_entry, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x37b80, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
file_reader_get_entry, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
file_reader_get_entry, (unique, 0x37d00, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
file_reader_get_entry, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
file_reader_get_entry, (unique, 0x37f80, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x52c80, 4)
file_reader_get_entry, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
file_reader_get_entry, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
file_reader_get_entry, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38300, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52c80, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
file_reader_get_entry, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
file_reader_get_entry, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
file_reader_get_entry, (unique, 0x52d00, 1) BOOL_NEGATE (register, 0x62, 1)
file_reader_get_entry, (unique, 0x52d80, 4) INT_ZEXT (unique, 0x52d00, 1)
file_reader_get_entry, (unique, 0x52e00, 4) INT_ADD (const, 0x0, 4) , (unique, 0x52d80, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x52e00, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x3e780, 4) INT_MULT (register, 0x20, 4) , (register, 0x28, 4)
file_reader_get_entry, (register, 0x20, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x24, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x1254c, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
file_reader_get_entry, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (register, 0x20, 4)
file_reader_get_entry, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
file_reader_get_entry, (unique, 0x3e80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3e00, 4)
file_reader_get_entry, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
file_reader_get_entry, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x4100, 4) INT_SRIGHT (register, 0x20, 4) , (const, 0x1f, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (unique, 0x4100, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
file_reader_get_entry, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_get_entry, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_get_entry, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_get_entry, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
file_reader_get_entry, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
file_reader_get_entry, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
file_reader_get_entry, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
file_reader_get_entry,  ---  CBRANCH (ram, 0x1252c, 4) , (register, 0x61, 1)
file_reader_get_entry,  ---  BRANCH (ram, 0x12588, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x125cc, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10c20, 4)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
file_reader_get_entry,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (const, 0x620c, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (const, 0x5870, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x24, 4) COPY (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (register, 0x38, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x125f0, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10bb4, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x124d0, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (const, 0x620c, 4)
file_reader_get_entry, (register, 0x28, 4) COPY (const, 0x58b4, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_get_entry, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_get_entry, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_get_entry, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_get_entry, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_get_entry, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_get_entry, (register, 0x24, 4) COPY (const, 0x1, 4)
file_reader_get_entry, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_get_entry, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_get_entry, (register, 0x2c, 4) COPY (register, 0x40, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12614, 4)
file_reader_get_entry,  ---  CALL (ram, 0x10bb4, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x124f8, 4)
file_reader_get_entry, (register, 0x20, 4) COPY (const, 0x5890, 4)
file_reader_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
file_reader_get_entry, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_get_entry, (register, 0x58, 4) COPY (const, 0x12624, 4)
file_reader_get_entry,  ---  CALL (ram, 0x1213c, 4)
file_reader_get_entry,  ---  BRANCH (ram, 0x124ec, 4)
file_reader_print_file_and_line, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x8, 4)
file_reader_print_file_and_line, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_print_file_and_line, (register, 0x50, 4) COPY (const, 0x58d0, 4)
file_reader_print_file_and_line, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
file_reader_print_file_and_line,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)
file_reader_print_file_and_line, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
file_reader_print_file_and_line, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_print_file_and_line, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_print_file_and_line, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_print_file_and_line, (register, 0x66, 1) INT_LESSEQUAL (const, 0xc, 4) , (register, 0x54, 4)
file_reader_print_file_and_line, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0xc, 4)
file_reader_print_file_and_line, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0xc, 4)
file_reader_print_file_and_line, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x30, 4)
file_reader_print_file_and_line, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
file_reader_print_file_and_line, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_print_file_and_line, (unique, 0x3f300, 4) INT_AND (register, 0x50, 4) , (const, 0xffff, 4)
file_reader_print_file_and_line, (register, 0x50, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_print_file_and_line, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
file_reader_print_file_and_line, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_print_file_and_line, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_print_file_and_line, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_print_file_and_line, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
file_reader_print_file_and_line, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x62, 1) COPY (register, 0x66, 1)
file_reader_print_file_and_line, (register, 0x61, 1) COPY (register, 0x65, 1)
file_reader_print_file_and_line, (register, 0x60, 1) COPY (register, 0x64, 1)
file_reader_print_file_and_line, (register, 0x63, 1) COPY (register, 0x67, 1)
file_reader_print_file_and_line, (register, 0x28, 4) COPY (const, 0x58d8, 4)
file_reader_print_file_and_line, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
file_reader_print_file_and_line,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
file_reader_print_file_and_line, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
file_reader_print_file_and_line,  ---  CBRANCH (ram, 0x12650, 4) , (unique, 0x2680, 1)
file_reader_print_file_and_line, (register, 0x2c, 4) COPY (register, 0x50, 4)
file_reader_print_file_and_line, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
file_reader_print_file_and_line, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
file_reader_print_file_and_line, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
file_reader_print_file_and_line, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
file_reader_print_file_and_line, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_print_file_and_line, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_print_file_and_line, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_print_file_and_line, (register, 0x24, 4) COPY (const, 0x1, 4)
file_reader_print_file_and_line, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x66, 1) COPY (register, 0x68, 1)
file_reader_print_file_and_line, (register, 0x67, 1) COPY (register, 0x63, 1)
file_reader_print_file_and_line, (register, 0x58, 4) COPY (const, 0x1265c, 4)
file_reader_print_file_and_line,  ---  CALL (ram, 0x10bb4, 4)
file_reader_print_file_and_line, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
file_reader_print_file_and_line, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
file_reader_print_file_and_line, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
file_reader_print_file_and_line, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
file_reader_print_file_and_line, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
file_reader_print_file_and_line, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0xc, 4)
file_reader_print_file_and_line, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0xc, 4)
file_reader_print_file_and_line, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
file_reader_print_file_and_line, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (unique, 0x8800, 4) COPY (register, 0x54, 4)
file_reader_print_file_and_line, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
file_reader_print_file_and_line, (unique, 0x3c980, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
file_reader_print_file_and_line, (unique, 0x0, 4) INT_AND (unique, 0x3c980, 4) , (const, 0x1, 4)
file_reader_print_file_and_line, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
file_reader_print_file_and_line, (register, 0x69, 1) COPY (register, 0xb0, 1)
file_reader_print_file_and_line, (register, 0x5c, 4) INT_AND (unique, 0x3c980, 4) , (const, 0xfffffffe, 4)
file_reader_print_file_and_line,  ---  BRANCHIND (register, 0x5c, 4)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
get_key_len,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
get_key_len, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
get_key_len,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
get_key_len, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len,  ---  CBRANCH (ram, 0x126a0, 4) , (register, 0x61, 1)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len, (register, 0x30, 4) COPY (register, 0x24, 4)
get_key_len,  ---  CBRANCH (ram, 0x126d4, 4) , (register, 0x61, 1)
get_key_len, (register, 0x68, 1) COPY (register, 0x62, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x28, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x24, 4)
get_key_len, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x24, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len, (register, 0x20, 4) COPY (register, 0x28, 4)
get_key_len, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
get_key_len,  ---  CBRANCH (ram, 0x1268c, 4) , (unique, 0x2680, 1)
get_key_len, (register, 0x80, 4) COPY (register, 0x54, 4)
get_key_len, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x54, 4) COPY (register, 0x80, 4)
get_key_len, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
get_key_len, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
get_key_len, (register, 0x69, 1) COPY (register, 0xb0, 1)
get_key_len, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
get_key_len,  ---  RETURN (register, 0x5c, 4)
get_key_len, (register, 0x20, 4) COPY (const, 0x5918, 4)
get_key_len, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
get_key_len, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
get_key_len, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
get_key_len, (register, 0x58, 4) COPY (const, 0x12698, 4)
get_key_len,  ---  CALL (ram, 0x1213c, 4)
get_key_len, (register, 0x20, 4) COPY (register, 0x30, 4)
get_key_len, (register, 0x80, 4) COPY (register, 0x54, 4)
get_key_len, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x54, 4) COPY (register, 0x80, 4)
get_key_len, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
get_key_len, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
get_key_len, (register, 0x69, 1) COPY (register, 0xb0, 1)
get_key_len, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
get_key_len,  ---  RETURN (register, 0x5c, 4)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len,  ---  CBRANCH (ram, 0x126cc, 4) , (register, 0x61, 1)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x20, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x1, 4)
get_key_len, (register, 0x50, 4) INT_SUB (register, 0x20, 4) , (const, 0x1, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
get_key_len, (register, 0x2c, 4) COPY (register, 0x24, 4)
get_key_len, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x1, 4)
get_key_len, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (register, 0x50, 4)
get_key_len, (register, 0x58, 4) INT_ZEXT (unique, 0x3ca00, 1)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x58, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3b980, 4) INT_SUB (register, 0x58, 4) , (const, 0x0, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len,  ---  CBRANCH (ram, 0x126c4, 4) , (register, 0x61, 1)
get_key_len, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
get_key_len, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
get_key_len, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
get_key_len, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
get_key_len, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
get_key_len, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
get_key_len, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
get_key_len, (register, 0x62, 1) COPY (register, 0x66, 1)
get_key_len, (register, 0x61, 1) COPY (register, 0x65, 1)
get_key_len, (register, 0x60, 1) COPY (register, 0x64, 1)
get_key_len, (register, 0x63, 1) COPY (register, 0x67, 1)
get_key_len, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
get_key_len,  ---  CBRANCH (ram, 0x126b0, 4) , (unique, 0x1a80, 1)
get_key_len, (register, 0x68, 1) COPY (register, 0x62, 1)
get_key_len, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x24, 4)
get_key_len, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x2c, 4)
get_key_len, (register, 0x20, 4) INT_SUB (register, 0x24, 4) , (register, 0x2c, 4)
get_key_len, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
get_key_len, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
get_key_len, (register, 0x80, 4) COPY (register, 0x54, 4)
get_key_len, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x54, 4) COPY (register, 0x80, 4)
get_key_len, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
get_key_len, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
get_key_len, (register, 0x69, 1) COPY (register, 0xb0, 1)
get_key_len, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
get_key_len,  ---  RETURN (register, 0x5c, 4)
get_key_len, (register, 0x80, 4) COPY (register, 0x54, 4)
get_key_len, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
get_key_len, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
get_key_len, (register, 0x54, 4) COPY (register, 0x80, 4)
get_key_len,  ---  BRANCH (ram, 0x10b6c, 4)
get_key_len, (register, 0x20, 4) COPY (const, 0x58e0, 4)
get_key_len, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
get_key_len, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
get_key_len, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
get_key_len, (register, 0x58, 4) COPY (const, 0x126e0, 4)
get_key_len,  ---  CALL (ram, 0x1213c, 4)
get_key_len,  ---  BRANCH (ram, 0x1268c, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
hashtab_next, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_next, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12728, 4) , (register, 0x62, 1)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0xc, 4)
hashtab_next, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
hashtab_next, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
hashtab_next, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_next, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_next, (unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
hashtab_next, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
hashtab_next, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x3580, 4)
hashtab_next, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x3580, 4)
hashtab_next, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x3580, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next,  ---  CBRANCH (ram, 0x1271c, 4) , (register, 0x61, 1)
hashtab_next,  ---  BRANCH (ram, 0x12734, 4)
hashtab_next, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
hashtab_next, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x28, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12734, 4) , (unique, 0x1a80, 1)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_next, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12710, 4) , (unique, 0x1b80, 1)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x24, 4) COPY (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_next, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_next, (register, 0x20, 4) COPY (register, 0x24, 4)
hashtab_next, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_next, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_next, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_next,  ---  RETURN (register, 0x5c, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x14, 4)
hashtab_next, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
hashtab_next,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12744, 4) , (unique, 0x2680, 1)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_next,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_next, (register, 0x20, 4) COPY (register, 0x24, 4)
hashtab_next, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_next, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_next, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_next,  ---  RETURN (register, 0x5c, 4)
hashtab_init, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
hashtab_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
hashtab_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x34, 4) COPY (register, 0x20, 4)
hashtab_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
hashtab_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_init, (register, 0x20, 4) COPY (const, 0x14, 4)
hashtab_init, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_init, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_init, (register, 0x58, 4) COPY (const, 0x12760, 4)
hashtab_init,  ---  CALL (ram, 0x14694, 4)
hashtab_init, (register, 0x30, 4) COPY (register, 0x20, 4)
hashtab_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_init, (register, 0x24, 4) COPY (const, 0x0, 4)
hashtab_init, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_init, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
hashtab_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_init, (register, 0x28, 4) COPY (const, 0x14, 4)
hashtab_init, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_init, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_init, (register, 0x58, 4) COPY (const, 0x12770, 4)
hashtab_init,  ---  CALL (ram, 0x10b90, 4)
hashtab_init, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
hashtab_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
hashtab_init, (register, 0x20, 4) COPY (register, 0x30, 4)
hashtab_init, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_init, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_init,  ---  RETURN (register, 0x5c, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x3c, 4) COPY (register, 0x20, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (register, 0x40, 4) COPY (register, 0x24, 4)
hashtab_create, (register, 0x34, 4) COPY (register, 0x28, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create,  ---  CBRANCH (ram, 0x129ac, 4) , (register, 0x61, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x10, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (register, 0x24, 4) COPY (register, 0x34, 4)
hashtab_create, (register, 0x20, 4) COPY (register, 0x40, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x127a8, 4)
hashtab_create,  ---  CALL (ram, 0x12668, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x38, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create,  ---  CBRANCH (ram, 0x129a0, 4) , (register, 0x61, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x50, 4) INT_ADD (register, 0x40, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x2c, 4) COPY (register, 0x40, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x28, 4) COPY (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x20, 4) COPY (const, 0x1f, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8800, 4) COPY (register, 0x2c, 4)
hashtab_create, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_create, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
hashtab_create, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x3e780, 4) INT_MULT (register, 0x20, 4) , (register, 0x28, 4)
hashtab_create, (register, 0x28, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x24, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x127c4, 4) , (unique, 0x1a80, 1)
hashtab_create, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x28, 4)
hashtab_create, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x58, 4)
hashtab_create, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
hashtab_create, (register, 0x48, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
hashtab_create, (unique, 0x3e880, 4) INT_MULT (register, 0x58, 4) , (register, 0x48, 4)
hashtab_create, (register, 0x48, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3e880, 4)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x48, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x48, 4) , (const, 0x2, 4)
hashtab_create, (register, 0x44, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12800, 4) , (unique, 0x1a80, 1)
hashtab_create,  ---  BRANCH (ram, 0x12830, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12830, 4) , (register, 0x61, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x38, 4)
hashtab_create, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x127f4, 4) , (unique, 0x1a80, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (register, 0x24, 4) COPY (register, 0x40, 4)
hashtab_create, (register, 0x28, 4) COPY (register, 0x38, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x1281c, 4)
hashtab_create,  ---  CALL (ram, 0x10aac, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x127f4, 4) , (unique, 0x1a80, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_create, (register, 0x20, 4) COPY (register, 0x30, 4)
hashtab_create, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_create, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_create, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_create, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_create,  ---  RETURN (register, 0x5c, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x20, 4) COPY (const, 0x1c, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (register, 0x58, 4) COPY (const, 0x12838, 4)
hashtab_create,  ---  CALL (ram, 0x14694, 4)
hashtab_create, (register, 0x34, 4) COPY (register, 0x20, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x20, 4) INT_ADD (register, 0x38, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x12848, 4)
hashtab_create,  ---  CALL (ram, 0x14694, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_create, (register, 0x24, 4) COPY (register, 0x40, 4)
hashtab_create, (register, 0x28, 4) COPY (register, 0x38, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x12858, 4)
hashtab_create,  ---  CALL (ram, 0x10a88, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x28, 4) COPY (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x18, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x24, 4)
hashtab_create, (unique, 0x6a380, 1) SUBPIECE (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (unique, 0x6a380, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x10, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x14, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x44, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x8, 4)
hashtab_create, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12890, 4) , (unique, 0x2680, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x10, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x2c, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
hashtab_create, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_create, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
hashtab_create,  ---  CBRANCH (ram, 0x128b0, 4) , (unique, 0x1f00, 1)
hashtab_create, (register, 0x20, 4) COPY (register, 0x34, 4)
hashtab_create, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_create, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_create, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_create, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_create,  ---  RETURN (register, 0x5c, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x1f500, 4) INT_ADD (const, 0x128b4, 4) , (const, 0x8, 4)
hashtab_create, (unique, 0x1f580, 4) INT_AND (unique, 0x1f500, 4) , (const, 0xfffffffc, 4)
hashtab_create, (unique, 0x1f680, 4) INT_ADD (unique, 0x1f580, 4) , (const, 0x12c, 4)
hashtab_create, (register, 0x330, 8) LOAD (const, 0x1a1, 8) , (unique, 0x1f680, 4)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
hashtab_create, (register, 0x4c, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x33c, 4) COPY (register, 0x4c, 4)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x4, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x20, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x30d80, 8) INT_ZEXT (register, 0x33c, 4)
hashtab_create, (register, 0x338, 8) INT2FLOAT (unique, 0x30d80, 8)
hashtab_create, (register, 0x338, 8) FLOAT_MULT (register, 0x338, 8) , (register, 0x330, 8)
hashtab_create, (unique, 0x30700, 8) ROUND (register, 0x338, 8)
hashtab_create, (register, 0x338, 4) SUBPIECE (unique, 0x30700, 8) , (const, 0x0, 4)
hashtab_create, (unique, 0x1f280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x8, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x1f280, 4) , (register, 0x338, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x128e0, 4)
hashtab_create,  ---  CALL (ram, 0x14694, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x24, 4) COPY (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x2, 4)
hashtab_create, (register, 0x28, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (register, 0x58, 4) COPY (const, 0x128f4, 4)
hashtab_create,  ---  CALL (ram, 0x10b90, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x128fc, 4) , (unique, 0x2680, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x4c, 4) INT_ADD (register, 0x40, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12900, 4) , (unique, 0x2680, 1)
hashtab_create, (register, 0x48, 4) COPY (register, 0x40, 4)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12904, 4) , (unique, 0x2680, 1)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x44, 4) COPY (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12908, 4) , (unique, 0x2680, 1)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x58, 4) COPY (const, 0x1f, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12988, 4) , (register, 0x61, 1)
hashtab_create, (unique, 0x8800, 4) COPY (register, 0x48, 4)
hashtab_create, (register, 0x48, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12980, 4) , (register, 0x61, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
hashtab_create, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12998, 4) , (register, 0x61, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x50, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x28, 4) COPY (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8800, 4) COPY (register, 0x2c, 4)
hashtab_create, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_create, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
hashtab_create, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x3e780, 4) INT_MULT (register, 0x58, 4) , (register, 0x28, 4)
hashtab_create, (register, 0x28, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x24, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12934, 4) , (unique, 0x1a80, 1)
hashtab_create, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x28, 4)
hashtab_create, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x38, 4)
hashtab_create, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
hashtab_create, (register, 0x2c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
hashtab_create, (unique, 0x3e880, 4) INT_MULT (register, 0x38, 4) , (register, 0x2c, 4)
hashtab_create, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3e880, 4)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
hashtab_create, (register, 0x50, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
hashtab_create, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x50, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12974, 4) , (unique, 0x2680, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x10, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x30, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x12918, 4) , (unique, 0x1a80, 1)
hashtab_create, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_create, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x48, 4)
hashtab_create, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (register, 0x4c, 4)
hashtab_create, (unique, 0x3ba80, 4) INT_SUB (register, 0x48, 4) , (register, 0x4c, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_create, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_create, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_create, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_create, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_create,  ---  CBRANCH (ram, 0x1290c, 4) , (unique, 0x1a80, 1)
hashtab_create, (register, 0x20, 4) COPY (register, 0x40, 4)
hashtab_create, (register, 0x58, 4) COPY (const, 0x12990, 4)
hashtab_create,  ---  CALL (ram, 0x10a7c, 4)
hashtab_create, (register, 0x20, 4) COPY (register, 0x34, 4)
hashtab_create, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_create, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_create, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_create, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_create, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_create, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_create, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_create,  ---  RETURN (register, 0x5c, 4)
hashtab_create, (register, 0x28, 4) COPY (register, 0x50, 4)
hashtab_create,  ---  BRANCH (ram, 0x12950, 4)
hashtab_create, (register, 0x48, 4) COPY (register, 0x38, 4)
hashtab_create, (register, 0x44, 4) COPY (register, 0x38, 4)
hashtab_create,  ---  BRANCH (ram, 0x127e0, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x2c, 4) COPY (const, 0x7, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x2c, 4) COPY (const, 0x4, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x20, 4) COPY (const, 0x1c, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (register, 0x58, 4) COPY (const, 0x129c8, 4)
hashtab_create,  ---  CALL (ram, 0x14694, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_create, (register, 0x24, 4) COPY (register, 0x30, 4)
hashtab_create, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
hashtab_create,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_create, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
hashtab_create, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_create, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_create, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_create, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_create, (register, 0x2c, 4) COPY (const, 0x1c, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_create, (unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
hashtab_create, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_create, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_create, (unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
hashtab_create, (register, 0x28, 4) COPY (unique, 0x3580, 4)
hashtab_create, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_create, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_create, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_create, (register, 0x58, 4) COPY (const, 0x129e0, 4)
hashtab_create,  ---  CALL (ram, 0x10a94, 4)
hashtab_create,  ---  BRANCH (ram, 0x12798, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
hashtab_find, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
hashtab_find, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12aa0, 4) , (register, 0x61, 1)
hashtab_find, (register, 0x2c, 4) COPY (register, 0x28, 4)
hashtab_find, (register, 0x38, 4) COPY (register, 0x24, 4)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
hashtab_find, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (register, 0x30, 4) COPY (register, 0x20, 4)
hashtab_find, (register, 0x24, 4) COPY (register, 0x2c, 4)
hashtab_find, (register, 0x20, 4) COPY (register, 0x38, 4)
hashtab_find, (register, 0x58, 4) COPY (const, 0x12a1c, 4)
hashtab_find,  ---  CALL (ram, 0x12668, 4)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x34, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12aa8, 4) , (register, 0x61, 1)
hashtab_find, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_find, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x34, 4)
hashtab_find, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x34, 4)
hashtab_find, (register, 0x24, 4) INT_ADD (register, 0x38, 4) , (register, 0x34, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x2c, 4) COPY (register, 0x38, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x28, 4) COPY (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_find, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1f, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x58, 4) COPY (const, 0x1f, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_find, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_find, (unique, 0x8800, 4) COPY (register, 0x2c, 4)
hashtab_find, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_find, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
hashtab_find, (register, 0x50, 4) INT_ZEXT (unique, 0x3ca00, 1)
hashtab_find, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
hashtab_find, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find, (unique, 0x3e780, 4) INT_MULT (register, 0x58, 4) , (register, 0x28, 4)
hashtab_find, (register, 0x28, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x50, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12a38, 4) , (unique, 0x1a80, 1)
hashtab_find, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x28, 4)
hashtab_find, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x3c, 4)
hashtab_find, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
hashtab_find, (register, 0x2c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
hashtab_find, (unique, 0x3e880, 4) INT_MULT (register, 0x3c, 4) , (register, 0x2c, 4)
hashtab_find, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3e880, 4)
hashtab_find, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
hashtab_find, (unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
hashtab_find, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
hashtab_find, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
hashtab_find, (register, 0x28, 4) COPY (unique, 0x3580, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_find, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
hashtab_find, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
hashtab_find, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12a74, 4) , (unique, 0x1a80, 1)
hashtab_find,  ---  BRANCH (ram, 0x12aa0, 4)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
hashtab_find, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12aa0, 4) , (register, 0x61, 1)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x2c, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x34, 4)
hashtab_find, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x34, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12a68, 4) , (unique, 0x1a80, 1)
hashtab_find, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_find, (register, 0x24, 4) COPY (register, 0x38, 4)
hashtab_find, (register, 0x28, 4) COPY (register, 0x34, 4)
hashtab_find, (register, 0x58, 4) COPY (const, 0x12a90, 4)
hashtab_find,  ---  CALL (ram, 0x10aac, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_find, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_find, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_find, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_find, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_find, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_find,  ---  CBRANCH (ram, 0x12a68, 4) , (unique, 0x1a80, 1)
hashtab_find, (register, 0x20, 4) COPY (register, 0x30, 4)
hashtab_find, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_find, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_find, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_find, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_find, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_find,  ---  RETURN (register, 0x5c, 4)
hashtab_find, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_find, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_find, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_find, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_find, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_find, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_find, (register, 0x20, 4) COPY (const, 0x0, 4)
hashtab_find, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_find, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_find, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_find, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_find, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_find, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_find, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_find, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_find, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_find, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_find,  ---  RETURN (register, 0x5c, 4)
hashtab_find, (register, 0x28, 4) COPY (register, 0x34, 4)
hashtab_find,  ---  BRANCH (ram, 0x12a54, 4)
hashtab_get_key, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_get_key, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_get_key, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_get_key, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_get_key, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_get_key, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_get_key,  ---  RETURN (register, 0x5c, 4)
hashtab_get_value, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
hashtab_get_value, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_get_value, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_get_value, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_get_value, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_get_value, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_get_value,  ---  RETURN (register, 0x5c, 4)
hashtab_set_value, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_set_value,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_set_value, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
hashtab_set_value, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
hashtab_set_value, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_set_value, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x38, 4) COPY (register, 0x20, 4)
hashtab_set_value, (register, 0x20, 4) COPY (register, 0x28, 4)
hashtab_set_value, (register, 0x30, 4) COPY (register, 0x28, 4)
hashtab_set_value, (register, 0x34, 4) COPY (register, 0x24, 4)
hashtab_set_value, (register, 0x58, 4) COPY (const, 0x12ad8, 4)
hashtab_set_value,  ---  CALL (ram, 0x14694, 4)
hashtab_set_value, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0xc, 4)
hashtab_set_value,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_set_value, (register, 0x24, 4) COPY (register, 0x34, 4)
hashtab_set_value, (register, 0x28, 4) COPY (register, 0x30, 4)
hashtab_set_value, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_set_value, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_set_value, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_set_value, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_set_value, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_set_value, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_set_value, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_set_value,  ---  BRANCH (ram, 0x10a88, 4)
hashtab_first, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x8, 4)
hashtab_first,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_first, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_first, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_first, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_first, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_first, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_first, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_first, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_first, (register, 0x2c, 4) COPY (const, 0x0, 4)
hashtab_first, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_first, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_first, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_first, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_first, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
hashtab_first,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_first, (register, 0x20, 4) COPY (register, 0x24, 4)
hashtab_first, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
hashtab_first,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_first,  ---  BRANCH (ram, 0x126e4, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
hashtab_next, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12b3c, 4) , (register, 0x61, 1)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x14, 4)
hashtab_next, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x4, 4)
hashtab_next,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
hashtab_next, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_next, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_next, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_next, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_next,  ---  CBRANCH (ram, 0x12b28, 4) , (register, 0x61, 1)
hashtab_next, (register, 0x20, 4) COPY (register, 0x2c, 4)
hashtab_next, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_next, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_next, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_next,  ---  RETURN (register, 0x5c, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_next, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_next, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_next, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_next, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_next, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_next, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x1, 4)
hashtab_next, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_next, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
hashtab_next,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
hashtab_next, (register, 0x20, 4) COPY (register, 0x2c, 4)
hashtab_next, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
hashtab_next, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_next, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_next, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
hashtab_next,  ---  RETURN (register, 0x5c, 4)
hashtab_next,  ---  BRANCH (ram, 0x126e4, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x34, 4) COPY (const, 0x5f08, 4)
hashtab_dump_keys, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
hashtab_dump_keys, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
hashtab_dump_keys, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1c, 4) , (register, 0x54, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x1c, 4)
hashtab_dump_keys, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x1c, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x2c, 4) COPY (const, 0x0, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_dump_keys, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_dump_keys, (register, 0x58, 4) COPY (const, 0x12b70, 4)
hashtab_dump_keys,  ---  CALL (ram, 0x126e4, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x24, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_dump_keys, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_dump_keys, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_dump_keys, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_dump_keys,  ---  CBRANCH (ram, 0x12bb0, 4) , (register, 0x61, 1)
hashtab_dump_keys, (register, 0x30, 4) COPY (const, 0x620c, 4)
hashtab_dump_keys, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
hashtab_dump_keys, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
hashtab_dump_keys, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (register, 0x28, 4) COPY (const, 0x5954, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
hashtab_dump_keys, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
hashtab_dump_keys, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
hashtab_dump_keys,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x24, 4) COPY (const, 0x1, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x66, 1) COPY (register, 0x68, 1)
hashtab_dump_keys, (register, 0x67, 1) COPY (register, 0x63, 1)
hashtab_dump_keys, (register, 0x58, 4) COPY (const, 0x12ba0, 4)
hashtab_dump_keys,  ---  CALL (ram, 0x10bb4, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x58, 4) COPY (const, 0x12ba8, 4)
hashtab_dump_keys,  ---  CALL (ram, 0x12b04, 4)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x24, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_dump_keys, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_dump_keys, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_dump_keys, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_dump_keys, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_dump_keys,  ---  CBRANCH (ram, 0x12b80, 4) , (unique, 0x1a80, 1)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
hashtab_dump_keys, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_dump_keys, (register, 0x68, 1) COPY (register, 0x62, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
hashtab_dump_keys, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_dump_keys, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_dump_keys, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_dump_keys, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_dump_keys, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_dump_keys,  ---  CBRANCH (ram, 0x12bc8, 4) , (unique, 0x1a80, 1)
hashtab_dump_keys, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1c, 4) , (const, 0x1f, 4)
hashtab_dump_keys, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_dump_keys, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_dump_keys, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_dump_keys, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_dump_keys, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_dump_keys, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x1c, 4)
hashtab_dump_keys, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x1c, 4)
hashtab_dump_keys, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
hashtab_dump_keys, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_dump_keys, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_dump_keys, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_dump_keys, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_dump_keys, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
hashtab_dump_keys, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
hashtab_dump_keys, (register, 0x69, 1) COPY (register, 0xb0, 1)
hashtab_dump_keys, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
hashtab_dump_keys,  ---  RETURN (register, 0x5c, 4)
hashtab_dump_keys, (register, 0x58, 4) COPY (const, 0x12bcc, 4)
hashtab_dump_keys,  ---  CALL (ram, 0x10ac4, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x18, 4)
hashtab_delete, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
hashtab_delete, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
hashtab_delete, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_delete, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_delete, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_delete, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_delete, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
hashtab_delete, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_delete, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_delete, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_delete, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_delete, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
hashtab_delete, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_delete, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_delete, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_delete, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
hashtab_delete, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_delete, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
hashtab_delete, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
hashtab_delete, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
hashtab_delete, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
hashtab_delete, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_delete, (register, 0x30, 4) COPY (register, 0x20, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12bf0, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x14, 4)
hashtab_delete, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12bf4, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x14, 4)
hashtab_delete, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12bf8, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0xc, 4)
hashtab_delete, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12bfc, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
hashtab_delete, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12c00, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x14, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12c04, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x7800, 4) INT_LEFT (register, 0x28, 4) , (const, 0x2, 4)
hashtab_delete, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x7800, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8480, 4) , (register, 0x24, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x14, 4)
hashtab_delete, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_delete, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_delete, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_delete, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_delete, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
hashtab_delete, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_delete, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_delete, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_delete, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_delete, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12c10, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x10, 4)
hashtab_delete, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0xc, 4)
hashtab_delete, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
hashtab_delete, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12c18, 4) , (unique, 0x2680, 1)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x10, 4)
hashtab_delete,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
hashtab_delete, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
hashtab_delete, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
hashtab_delete, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
hashtab_delete, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
hashtab_delete, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
hashtab_delete, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
hashtab_delete, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
hashtab_delete, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x62, 1) COPY (register, 0x66, 1)
hashtab_delete, (register, 0x61, 1) COPY (register, 0x65, 1)
hashtab_delete, (register, 0x60, 1) COPY (register, 0x64, 1)
hashtab_delete, (register, 0x63, 1) COPY (register, 0x67, 1)
hashtab_delete,  ---  CBRANCH (ram, 0x12c24, 4) , (register, 0x61, 1)
hashtab_delete, (register, 0x58, 4) COPY (const, 0x12c24, 4)
hashtab_delete,  ---  CALL (ram, 0x10a7c, 4)
hashtab_delete, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
hashtab_delete, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
hashtab_delete, (register, 0x58, 4) COPY (const, 0x12c2c, 4)
hashtab_delete,  ---  CALL (ram, 0x10a7c, 4)
hashtab_delete, (register, 0x20, 4) COPY (register, 0x30, 4)
hashtab_delete, (register, 0x80, 4) COPY (register, 0x54, 4)
hashtab_delete, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_delete, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_delete, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
hashtab_delete, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
hashtab_delete, (register, 0x54, 4) COPY (register, 0x80, 4)
hashtab_delete,  ---  BRANCH (ram, 0x10a7c, 4)
utmp_init, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
utmp_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
utmp_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
utmp_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
utmp_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
utmp_init, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
utmp_init, (register, 0x28, 4) COPY (register, 0x20, 4)
utmp_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x100, 4) , (const, 0x1f, 4)
utmp_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
utmp_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
utmp_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
utmp_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
utmp_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
utmp_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
utmp_init, (register, 0x24, 4) COPY (const, 0x100, 4)
utmp_init, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
utmp_init, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
utmp_init, (register, 0x66, 1) COPY (register, 0x68, 1)
utmp_init, (register, 0x67, 1) COPY (register, 0x63, 1)
utmp_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x180, 4) , (const, 0x1f, 4)
utmp_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0xd, 1) , (const, 0x0, 1)
utmp_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
utmp_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xd, 1) , (const, 0x0, 1)
utmp_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
utmp_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
utmp_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
utmp_init, (register, 0x20, 4) COPY (const, 0x180, 4)
utmp_init, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
utmp_init, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
utmp_init, (register, 0x66, 1) COPY (register, 0x68, 1)
utmp_init, (register, 0x67, 1) COPY (register, 0x63, 1)
utmp_init, (register, 0x58, 4) COPY (const, 0x12c4c, 4)
utmp_init,  ---  CALL (ram, 0x122f8, 4)
utmp_init, (register, 0x2c, 4) COPY (const, 0x6248, 4)
utmp_init, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
utmp_init, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
utmp_init, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
utmp_init, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
utmp_init,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
utmp_init, (register, 0x80, 4) COPY (register, 0x54, 4)
utmp_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
utmp_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
utmp_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
utmp_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
utmp_init, (register, 0x54, 4) COPY (register, 0x80, 4)
utmp_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
utmp_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
utmp_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
utmp_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
utmp_init,  ---  RETURN (register, 0x5c, 4)
add_utmp_file, (register, 0x2c, 4) COPY (const, 0x6248, 4)
add_utmp_file, (register, 0x24, 4) COPY (register, 0x20, 4)
add_utmp_file, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
add_utmp_file, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
add_utmp_file, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
add_utmp_file, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
add_utmp_file, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
add_utmp_file,  ---  BRANCH (ram, 0x12340, 4)
utmp_get_entry, (register, 0x2c, 4) COPY (const, 0x6248, 4)
utmp_get_entry, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
utmp_get_entry, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
utmp_get_entry, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
utmp_get_entry, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
utmp_get_entry, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
utmp_get_entry,  ---  BRANCH (ram, 0x123a4, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
print_utmp_record, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x44, 4) COPY (const, 0x5f08, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x44, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x44, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x24, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (const, 0x24, 4) , (register, 0x54, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x24, 4)
print_utmp_record, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x24, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x40, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x62, 1) COPY (register, 0x66, 1)
print_utmp_record, (register, 0x61, 1) COPY (register, 0x65, 1)
print_utmp_record, (register, 0x60, 1) COPY (register, 0x64, 1)
print_utmp_record, (register, 0x63, 1) COPY (register, 0x67, 1)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record,  ---  CBRANCH (ram, 0x12d94, 4) , (register, 0x61, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x2c, 4) COPY (const, 0x20, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x38, 4) COPY (register, 0x24, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x2c, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x2c, 4)
print_utmp_record, (register, 0x20, 4) INT_ADD (register, 0x40, 4) , (const, 0x2c, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x8, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x8, 4)
print_utmp_record, (register, 0x24, 4) INT_ADD (register, 0x40, 4) , (const, 0x8, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x5960, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x38, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x24, 4) COPY (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x3c, 4) COPY (register, 0x40, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12cdc, 4)
print_utmp_record,  ---  CALL (ram, 0x10bb4, 4)
print_utmp_record, (unique, 0x9700, 4) COPY (register, 0x3c, 4)
print_utmp_record, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x27, 4)
print_utmp_record, (unique, 0x3d580, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9700, 4)
print_utmp_record, (register, 0x2c, 4) INT_SEXT (unique, 0x3d580, 2)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x5970, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x38, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x24, 4) COPY (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x34, 4) COPY (const, 0x0, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12cf8, 4)
print_utmp_record,  ---  CALL (ram, 0x10bb4, 4)
print_utmp_record, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x1, 4)
print_utmp_record, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (register, 0x3c, 4)
print_utmp_record, (register, 0x30, 4) INT_ZEXT (unique, 0x3ca00, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x62, 1) COPY (register, 0x66, 1)
print_utmp_record, (register, 0x61, 1) COPY (register, 0x65, 1)
print_utmp_record, (register, 0x60, 1) COPY (register, 0x64, 1)
print_utmp_record, (register, 0x63, 1) COPY (register, 0x67, 1)
print_utmp_record,  ---  CBRANCH (ram, 0x12dac, 4) , (register, 0x61, 1)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d08, 4)
print_utmp_record,  ---  CALL (ram, 0x10b54, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (register, 0x24, 4) COPY (register, 0x38, 4)
print_utmp_record, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
print_utmp_record, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
print_utmp_record, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0x2c, 4) COPY (unique, 0x3580, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x9380, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
print_utmp_record, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9380, 4)
print_utmp_record, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4000, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x9, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x9, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (unique, 0x6d500, 4) INT_AND (register, 0x2c, 4) , (const, 0x4000, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x64, 1) INT_SLESS (unique, 0x6d500, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (unique, 0x6d500, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x62, 1) COPY (register, 0x66, 1)
print_utmp_record, (register, 0x61, 1) COPY (register, 0x65, 1)
print_utmp_record, (register, 0x60, 1) COPY (register, 0x64, 1)
print_utmp_record, (register, 0x63, 1) COPY (register, 0x67, 1)
print_utmp_record, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
print_utmp_record,  ---  CBRANCH (ram, 0x12d24, 4) , (unique, 0x2680, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x20, 4) COPY (const, 0x3f, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
print_utmp_record, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
print_utmp_record,  ---  CBRANCH (ram, 0x12d28, 4) , (unique, 0x2680, 1)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x30, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d2c, 4)
print_utmp_record,  ---  CALL (ram, 0x10bcc, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (const, 0x4, 4) , (register, 0x34, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x4, 4)
print_utmp_record, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x62, 1) COPY (register, 0x66, 1)
print_utmp_record, (register, 0x61, 1) COPY (register, 0x65, 1)
print_utmp_record, (register, 0x60, 1) COPY (register, 0x64, 1)
print_utmp_record, (register, 0x63, 1) COPY (register, 0x67, 1)
print_utmp_record, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
print_utmp_record,  ---  CBRANCH (ram, 0x12cf8, 4) , (unique, 0x1a80, 1)
print_utmp_record, (register, 0x24, 4) COPY (register, 0x38, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7c, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x20, 4) COPY (const, 0x7c, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d40, 4)
print_utmp_record,  ---  CALL (ram, 0x10bcc, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x5980, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x24, 4) COPY (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x38, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d58, 4)
print_utmp_record,  ---  CALL (ram, 0x10bb4, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x100, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0xc, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xc, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x2c, 4) COPY (const, 0x100, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4c, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x4c, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x4c, 4)
print_utmp_record, (register, 0x24, 4) INT_ADD (register, 0x40, 4) , (const, 0x4c, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x5988, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x24, 4) COPY (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x38, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d7c, 4)
print_utmp_record,  ---  CALL (ram, 0x10bb4, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x154, 4)
print_utmp_record, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x20, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x20, 4)
print_utmp_record, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0xfffffff8, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (register, 0x20, 4) , (register, 0x2c, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d8c, 4)
print_utmp_record,  ---  CALL (ram, 0x10ab8, 4)
print_utmp_record, (register, 0x24, 4) COPY (register, 0x38, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12d94, 4)
print_utmp_record,  ---  CALL (ram, 0x10bf0, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
print_utmp_record, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
print_utmp_record, (register, 0x68, 1) COPY (register, 0x62, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
print_utmp_record, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x62, 1) COPY (register, 0x66, 1)
print_utmp_record, (register, 0x61, 1) COPY (register, 0x65, 1)
print_utmp_record, (register, 0x60, 1) COPY (register, 0x64, 1)
print_utmp_record, (register, 0x63, 1) COPY (register, 0x67, 1)
print_utmp_record, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
print_utmp_record,  ---  CBRANCH (ram, 0x12dd8, 4) , (unique, 0x1a80, 1)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x24, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x24, 4)
print_utmp_record, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x24, 4)
print_utmp_record, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x80, 4) COPY (register, 0x54, 4)
print_utmp_record, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
print_utmp_record, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x54, 4) COPY (register, 0x80, 4)
print_utmp_record, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
print_utmp_record, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x69, 1) COPY (register, 0xb0, 1)
print_utmp_record, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
print_utmp_record,  ---  RETURN (register, 0x5c, 4)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x527c, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (const, 0x4, 4)
print_utmp_record, (register, 0x67, 1) INT_SBORROW (const, 0x4, 4) , (register, 0x34, 4)
print_utmp_record, (register, 0x2c, 4) INT_SUB (const, 0x4, 4) , (register, 0x34, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
print_utmp_record,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
print_utmp_record, (register, 0x28, 4) COPY (const, 0x5978, 4)
print_utmp_record, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
print_utmp_record, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
print_utmp_record, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
print_utmp_record, (register, 0x20, 4) COPY (register, 0x38, 4)
print_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
print_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
print_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
print_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
print_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
print_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
print_utmp_record, (register, 0x24, 4) COPY (const, 0x1, 4)
print_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
print_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
print_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12dd4, 4)
print_utmp_record,  ---  CALL (ram, 0x10bb4, 4)
print_utmp_record,  ---  BRANCH (ram, 0x12d34, 4)
print_utmp_record, (register, 0x58, 4) COPY (const, 0x12ddc, 4)
print_utmp_record,  ---  CALL (ram, 0x10ac4, 4)
utmp_print_file_and_line, (register, 0x2c, 4) COPY (const, 0x6248, 4)
utmp_print_file_and_line, (unique, 0x3f280, 4) INT_LEFT (const, 0x2, 4) , (const, 0x10, 4)
utmp_print_file_and_line, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
utmp_print_file_and_line, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
utmp_print_file_and_line, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
utmp_print_file_and_line, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
utmp_print_file_and_line,  ---  BRANCH (ram, 0x12628, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x30, 4) COPY (register, 0x20, 4)
fix_ut_type_field, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x8, 4)
fix_ut_type_field, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
fix_ut_type_field, (register, 0x34, 4) INT_ZEXT (unique, 0x3ca00, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7c, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7c, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x7c, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x7c, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e00, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x4, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e04, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12ed0, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7b, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7b, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x7b, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x7b, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e10, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x3, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e14, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12ed0, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7e, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7e, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x7e, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x7e, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e9c, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
fix_ut_type_field, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
fix_ut_type_field, (register, 0x28, 4) INT_SEXT (unique, 0x7100, 2)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f44, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x3c, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x5488, 4)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x3c, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12e44, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (register, 0x44, 4) COPY (register, 0x20, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f38, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x2, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x547c, 4)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x3c, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12e70, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e78, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e7c, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f1c, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e90, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x7, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x7, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e94, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
fix_ut_type_field, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e98, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field,  ---  BRANCH (ram, 0x12efc, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x40, 4) INT_ADD (register, 0x20, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x5488, 4)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x40, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12eb0, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x44, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (register, 0x3c, 4) COPY (register, 0x40, 4)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f70, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3d580, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_SEXT (unique, 0x3d580, 2)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12fb4, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x2, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
fix_ut_type_field, (register, 0x28, 4) INT_SEXT (unique, 0x7100, 2)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f50, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7, 4) , (register, 0x28, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x7, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x7, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f24, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12ef4, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x7, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x7, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x7, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12ef8, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
fix_ut_type_field, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12efc, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f1c, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f5c, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x8, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x38, 4)
fix_ut_type_field, (register, 0x80, 4) COPY (register, 0x54, 4)
fix_ut_type_field, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x54, 4) COPY (register, 0x80, 4)
fix_ut_type_field, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x69, 1) COPY (register, 0xb0, 1)
fix_ut_type_field, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
fix_ut_type_field,  ---  RETURN (register, 0x5c, 4)
fix_ut_type_field, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f10, 4) , (register, 0x61, 1)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x38, 4)
fix_ut_type_field, (register, 0x80, 4) COPY (register, 0x54, 4)
fix_ut_type_field, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x54, 4) COPY (register, 0x80, 4)
fix_ut_type_field, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x69, 1) COPY (register, 0xb0, 1)
fix_ut_type_field, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
fix_ut_type_field,  ---  RETURN (register, 0x5c, 4)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
fix_ut_type_field, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
fix_ut_type_field, (register, 0x28, 4) INT_SEXT (unique, 0x7100, 2)
fix_ut_type_field,  ---  BRANCH (ram, 0x12ee0, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12ee0, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2c, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x40, 4) INT_ADD (register, 0x30, 4) , (const, 0x2c, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x3c, 4) COPY (register, 0x40, 4)
fix_ut_type_field,  ---  BRANCH (ram, 0x12e60, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x7, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x2c, 4) COPY (const, 0x7, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x2c, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x38, 4)
fix_ut_type_field, (register, 0x80, 4) COPY (register, 0x54, 4)
fix_ut_type_field, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
fix_ut_type_field, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
fix_ut_type_field, (register, 0x54, 4) COPY (register, 0x80, 4)
fix_ut_type_field, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x69, 1) COPY (register, 0xb0, 1)
fix_ut_type_field, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
fix_ut_type_field,  ---  RETURN (register, 0x5c, 4)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x547c, 4)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x40, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12f80, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e20, 4) , (unique, 0x1a80, 1)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3d580, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9180, 4)
fix_ut_type_field, (register, 0x2c, 4) INT_SEXT (unique, 0x3d580, 2)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12e48, 4) , (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (const, 0x1, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x66, 1) COPY (register, 0x68, 1)
fix_ut_type_field, (register, 0x67, 1) COPY (register, 0x63, 1)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x5488, 4)
fix_ut_type_field, (unique, 0x9180, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x6a580, 2) SUBPIECE (register, 0x38, 4) , (const, 0x0, 4)
fix_ut_type_field,  ---  STORE (const, 0x1a1, 8) , (unique, 0x9180, 4) , (unique, 0x6a580, 2)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x40, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12fac, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (register, 0x44, 4) COPY (register, 0x20, 4)
fix_ut_type_field,  ---  BRANCH (ram, 0x12e4c, 4)
fix_ut_type_field, (register, 0x24, 4) COPY (const, 0x547c, 4)
fix_ut_type_field, (register, 0x20, 4) COPY (register, 0x40, 4)
fix_ut_type_field, (unique, 0x3f280, 4) INT_LEFT (const, 0x1, 4) , (const, 0x10, 4)
fix_ut_type_field, (unique, 0x3f300, 4) INT_AND (register, 0x24, 4) , (const, 0xffff, 4)
fix_ut_type_field, (register, 0x24, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
fix_ut_type_field, (register, 0x58, 4) COPY (const, 0x12fc4, 4)
fix_ut_type_field,  ---  CALL (ram, 0x10a64, 4)
fix_ut_type_field, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
fix_ut_type_field, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
fix_ut_type_field, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
fix_ut_type_field, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
fix_ut_type_field, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
fix_ut_type_field, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
fix_ut_type_field, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
fix_ut_type_field, (register, 0x62, 1) COPY (register, 0x66, 1)
fix_ut_type_field, (register, 0x61, 1) COPY (register, 0x65, 1)
fix_ut_type_field, (register, 0x60, 1) COPY (register, 0x64, 1)
fix_ut_type_field, (register, 0x63, 1) COPY (register, 0x67, 1)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12fcc, 4) , (unique, 0x2680, 1)
fix_ut_type_field, (register, 0x38, 4) COPY (register, 0x44, 4)
fix_ut_type_field, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
fix_ut_type_field,  ---  CBRANCH (ram, 0x12f54, 4) , (unique, 0x1a80, 1)
fix_ut_type_field,  ---  BRANCH (ram, 0x12f94, 4)
bad_utmp_record, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
bad_utmp_record, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
bad_utmp_record, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
bad_utmp_record, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
bad_utmp_record, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
bad_utmp_record, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
bad_utmp_record, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
bad_utmp_record, (register, 0x20, 4) COPY (const, 0x0, 4)
bad_utmp_record, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
bad_utmp_record, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
bad_utmp_record, (register, 0x66, 1) COPY (register, 0x68, 1)
bad_utmp_record, (register, 0x67, 1) COPY (register, 0x63, 1)
bad_utmp_record, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
bad_utmp_record, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
bad_utmp_record, (register, 0x69, 1) COPY (register, 0xb0, 1)
bad_utmp_record, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
bad_utmp_record,  ---  RETURN (register, 0x5c, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
exchange, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x20, 4)
exchange, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x24, 4)
exchange, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
exchange, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (register, 0x34, 4) COPY (register, 0x44, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x40, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
exchange, (register, 0x38, 4) COPY (register, 0x3c, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x30, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x34, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x34, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
exchange, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
exchange, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2480, 1)
exchange,  ---  CBRANCH (ram, 0x13000, 4) , (unique, 0x2680, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x38, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x30, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x38, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
exchange,  ---  CBRANCH (ram, 0x13054, 4) , (unique, 0x2600, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x38, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x30, 4)
exchange, (register, 0x4c, 4) INT_SUB (register, 0x38, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x30, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x34, 4)
exchange, (register, 0x48, 4) INT_SUB (register, 0x30, 4) , (register, 0x34, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (register, 0x4c, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (register, 0x48, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x4c, 4) , (register, 0x48, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
exchange, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
exchange,  ---  CBRANCH (ram, 0x13068, 4) , (unique, 0x2480, 1)
exchange, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
exchange, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
exchange, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
exchange, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
exchange, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
exchange, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
exchange, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x4c, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (unique, 0x3b980, 4) INT_SUB (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
exchange,  ---  CBRANCH (ram, 0x13044, 4) , (unique, 0x2600, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x4c, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x4c, 4)
exchange, (register, 0x48, 4) INT_ADD (register, 0x30, 4) , (register, 0x4c, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x2c, 4) COPY (register, 0x40, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x28, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x48, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x48, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x48, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
exchange, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8800, 4) COPY (register, 0x28, 4)
exchange, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x58, 4)
exchange, (unique, 0x8800, 4) COPY (register, 0x2c, 4)
exchange, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (register, 0x2c, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x48, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x48, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
exchange,  ---  CBRANCH (ram, 0x1302c, 4) , (unique, 0x1a80, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x4c, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x4c, 4)
exchange, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (register, 0x4c, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x30, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x34, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x34, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
exchange, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
exchange, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2480, 1)
exchange,  ---  CBRANCH (ram, 0x13050, 4) , (unique, 0x2680, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x38, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x30, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x38, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
exchange, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
exchange,  ---  CBRANCH (ram, 0x13004, 4) , (unique, 0x2480, 1)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x24, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
exchange, (register, 0x30, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (register, 0x30, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (register, 0x30, 4)
exchange, (register, 0x30, 4) INT_ADD (register, 0x44, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x20, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
exchange, (register, 0x80, 4) COPY (register, 0x54, 4)
exchange, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
exchange, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
exchange, (register, 0x54, 4) COPY (register, 0x80, 4)
exchange, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
exchange, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
exchange, (register, 0x69, 1) COPY (register, 0xb0, 1)
exchange, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
exchange,  ---  RETURN (register, 0x5c, 4)
exchange, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
exchange, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
exchange, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
exchange, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
exchange, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
exchange, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
exchange, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x48, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x0, 4)
exchange, (unique, 0x3b980, 4) INT_SUB (register, 0x48, 4) , (const, 0x0, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
exchange, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
exchange,  ---  CBRANCH (ram, 0x130a0, 4) , (unique, 0x2600, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x34, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x30, 4)
exchange, (register, 0x2c, 4) INT_SUB (register, 0x34, 4) , (register, 0x30, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x2c, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x2c, 4)
exchange, (register, 0x2c, 4) INT_ADD (register, 0x38, 4) , (register, 0x2c, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x48, 4) , (register, 0x2c, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x48, 4) , (register, 0x2c, 4)
exchange, (register, 0x4c, 4) INT_ADD (register, 0x48, 4) , (register, 0x2c, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x28, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x2c, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
exchange, (unique, 0x3300, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x3280, 4)
exchange, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
exchange, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
exchange, (unique, 0x3580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x2, 4)
exchange, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x4c, 4) INT_ADD (register, 0x20, 4) , (unique, 0x3580, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
exchange, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
exchange, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
exchange, (unique, 0x8800, 4) COPY (register, 0x28, 4)
exchange, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x58, 4)
exchange, (unique, 0x8800, 4) COPY (register, 0x2c, 4)
exchange, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
exchange,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8800, 4) , (register, 0x50, 4)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x2c, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x4c, 4)
exchange, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x4c, 4)
exchange, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
exchange, (register, 0x62, 1) COPY (register, 0x66, 1)
exchange, (register, 0x61, 1) COPY (register, 0x65, 1)
exchange, (register, 0x60, 1) COPY (register, 0x64, 1)
exchange, (register, 0x63, 1) COPY (register, 0x67, 1)
exchange, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
exchange,  ---  CBRANCH (ram, 0x13088, 4) , (unique, 0x1a80, 1)
exchange, (register, 0x68, 1) COPY (register, 0x62, 1)
exchange, (register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (register, 0x38, 4)
exchange, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x48, 4)
exchange, (register, 0x38, 4) INT_SUB (register, 0x38, 4) , (register, 0x48, 4)
exchange, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
exchange, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
exchange,  ---  BRANCH (ram, 0x12ff8, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
_getopt_internal_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x44, 4) , (register, 0x54, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x3c, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13d98, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x130c8, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13360, 4) , (unique, 0x2600, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x28, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13238, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13240, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2b, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2b, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2b, 4)
_getopt_internal_r, (register, 0x28, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2b, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0xfd, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (unique, 0x6d500, 4) INT_AND (register, 0x28, 4) , (const, 0xfd, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x6d500, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x6d500, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13110, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13114, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13118, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1311c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13120, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13130, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132c0, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132c0, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131ac, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
_getopt_internal_r, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (register, 0x2c, 4) COPY (unique, 0x3580, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13414, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131ac, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13414, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x131a4, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b78, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13414, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x40, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x34, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x38, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x131c8, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b78, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131d4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131d8, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131dc, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_SUB (register, 0x34, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131e8, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
_getopt_internal_r, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132a0, 4) , (unique, 0x2080, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x57, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x57, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x57, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x57, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13788, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132b4, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13980, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13960, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x74, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13258, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13398, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x1c, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13630, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2b, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2b, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2b, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2b, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13654, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13284, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13288, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x10, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x13120, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x133e4, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_internal_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_internal_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_internal_r,  ---  RETURN (register, 0x5c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2480, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132d4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132e0, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x135b0, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13624, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13370, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x133b0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x133b0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x24, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x138a0, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1334c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) COPY (register, 0x30, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13348, 4)
_getopt_internal_r,  ---  CALL (ram, 0x12fdc, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x2c, 4) COPY (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13360, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) INT_NEGATE (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_internal_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_internal_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_internal_r,  ---  RETURN (register, 0x5c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13360, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_internal_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_internal_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_internal_r,  ---  RETURN (register, 0x5c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x13d9c, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x1339c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x133a4, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b0c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x133ac, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x13260, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13370, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x34, 4) INT_SUB (register, 0x24, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x34, 4) CALLOTHER (const, 0x0, 4) , (register, 0x34, 4)
_getopt_internal_r, (unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3880, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3800, 4)
_getopt_internal_r, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b00, 4) INT_RIGHT (register, 0x34, 4) , (const, 0x5, 4)
_getopt_internal_r, (register, 0x34, 4) COPY (unique, 0x3b00, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x133d4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x34, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x34, 4) INT_ADD (register, 0x28, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13148, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13400, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13410, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132ac, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (register, 0x40, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13424, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1343c, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x40, 4) INT_ADD (register, 0x40, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13438, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1342c, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x48, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x48, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x138ac, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x4c, 4) COPY (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) INT_NEGATE (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x44, 4) INT_SUB (register, 0x40, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x3c, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (register, 0x40, 4) COPY (register, 0x48, 4)
_getopt_internal_r, (register, 0x4c, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (register, 0x30, 4) COPY (register, 0x38, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x134b0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1349c, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x4c, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1358c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x30, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x134f8, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x40, 4)
_getopt_internal_r, (register, 0x24, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x44, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x134c0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bfc, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x134a0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x40, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x134d0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x44, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x44, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x20, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13728, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x4c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13480, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
_getopt_internal_r, (register, 0x4c, 4) COPY (register, 0x3c, 4)
_getopt_internal_r, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x134b0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) COPY (register, 0x30, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1366c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13558, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da8, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13540, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x1354c, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13564, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x44, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_internal_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_internal_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_internal_r,  ---  RETURN (register, 0x5c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x4c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1349c, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x4c, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x135ac, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x30, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x134a0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13894, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x135d8, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x24, 4) COPY (register, 0x30, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x135d4, 4)
_getopt_internal_r,  ---  CALL (ram, 0x12fdc, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13648, 4) , (unique, 0x2180, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
_getopt_internal_r, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x3580, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x3580, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ADD (register, 0x28, 4) , (unique, 0x3580, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x135fc, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13648, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8800, 4) COPY (register, 0x24, 4)
_getopt_internal_r, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x135ec, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x135ec, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1364c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13358, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x2, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1328c, 4)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132e8, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1328c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x4c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x138ac, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x44, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1373c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x136a0, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x40, 4) INT_ADD (register, 0x40, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x136a4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13748, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13708, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13a08, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dac, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x136fc, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13704, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13714, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
_getopt_internal_r, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x44, 4) COPY (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1367c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13934, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13750, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x68, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x44, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13768, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13774, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (register, 0x44, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13778, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1377c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13780, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13784, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3b, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3b, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3b, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3b, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131fc, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13ad8, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x4c, 4) COPY (register, 0x40, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x4c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x44, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3d, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x3d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x3d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x137c0, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cbc, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x44, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3d, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x3d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x3d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x137d4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x137c8, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cc4, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x40, 4) COPY (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x34, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x44, 4) COPY (register, 0x38, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x3c, 4) COPY (register, 0x40, 4)
_getopt_internal_r, (register, 0x38, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x40, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x30, 4) COPY (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13854, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13840, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13a40, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x40, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13a64, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x44, 4)
_getopt_internal_r, (register, 0x24, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x30, 4)
_getopt_internal_r, (register, 0x48, 4) COPY (register, 0x3c, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13868, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bfc, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13844, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x44, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13878, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x30, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x20, 4) , (register, 0x30, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b64, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13824, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x38, 4) COPY (register, 0x3c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13844, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1389c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x135d8, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x28, 4) COPY (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1334c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x139d8, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1390c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b04, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13db0, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x138fc, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13904, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13db4, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x1391c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x28, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1399c, 4) , (unique, 0x2600, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (const, 0x2, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (const, 0x2, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (const, 0x2, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13748, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b3c, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1322c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13988, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1398c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13990, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13994, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13998, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1322c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13bb8, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x139b0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132b0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2d, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2d, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2d, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13af8, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x139f0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b78, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x131ac, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x138d0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x1390c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13db8, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13a30, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13a38, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13708, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13840, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13a60, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x40, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x13844, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13bec, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13ab4, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dbc, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13aa4, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13ab0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13ac0, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c00, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
_getopt_internal_r, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x137b0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x1390c, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dc0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13b24, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13b30, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x1390c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cd4, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b5c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b60, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x1322c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_internal_r, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
_getopt_internal_r, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x70, 4)
_getopt_internal_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c54, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b84, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b88, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13b8c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c84, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13d04, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13bac, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dc4, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13bdc, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13be4, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x139a8, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cc4, 4) , (register, 0x61, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x48, 4) COPY (register, 0x38, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13b70, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c38, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dc8, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13c2c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13c38, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c4c, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c50, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3f, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x3f, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x4, 4)
_getopt_internal_r, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c60, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13c84, 4) , (unique, 0x1a80, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x3c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13d38, 4) , (unique, 0x2600, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x7800, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x2, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (unique, 0x7800, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x4c, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13c8c, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x68, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x4c, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13ca0, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cac, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cb0, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cb4, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13cb8, 4) , (unique, 0x2680, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x4c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x137dc, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x2c, 4) COPY (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x57, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x38, 4) COPY (const, 0x57, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x132b4, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x20, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dcc, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13cf0, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13d00, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13b48, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x24, 4) COPY (const, 0x1, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_internal_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dd0, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13d2c, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13d34, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r,  ---  BRANCH (ram, 0x13b9c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x13d70, 4) , (register, 0x61, 1)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13da0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x48, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8480, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x13dd4, 4)
_getopt_internal_r, (unique, 0x1780, 4) INT_ADD (const, 0x13d68, 4) , (const, 0x8, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13d70, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10bb4, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x20, 4) COPY (register, 0x34, 4)
_getopt_internal_r, (register, 0x58, 4) COPY (const, 0x13d7c, 4)
_getopt_internal_r,  ---  CALL (ram, 0x10b6c, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_internal_r, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x68, 1) COPY (register, 0x62, 1)
_getopt_internal_r, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x20, 4) INT_ADD (register, 0x34, 4) , (register, 0x20, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x14, 4)
_getopt_internal_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
_getopt_internal_r, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3ca00, 1) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_internal_r, (register, 0x2c, 4) INT_ZEXT (unique, 0x3ca00, 1)
_getopt_internal_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3a, 4) , (const, 0x1f, 4)
_getopt_internal_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_internal_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_internal_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_internal_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_internal_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_internal_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3a, 4) , (register, 0x2c, 4)
_getopt_internal_r, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x3a, 4)
_getopt_internal_r, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
_getopt_internal_r, (register, 0x62, 1) COPY (register, 0x66, 1)
_getopt_internal_r, (register, 0x61, 1) COPY (register, 0x65, 1)
_getopt_internal_r, (register, 0x60, 1) COPY (register, 0x64, 1)
_getopt_internal_r, (register, 0x63, 1) COPY (register, 0x67, 1)
_getopt_internal_r, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
_getopt_internal_r,  ---  CBRANCH (ram, 0x132b0, 4) , (unique, 0x1a80, 1)
_getopt_internal_r,  ---  BRANCH (ram, 0x139d0, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
rpl_getopt_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x10, 4) , (register, 0x54, 4)
rpl_getopt_internal, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x10, 4)
rpl_getopt_internal, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x10, 4)
rpl_getopt_internal, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e60, 4)
rpl_getopt_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e64, 4)
rpl_getopt_internal, (unique, 0x1780, 4) INT_ADD (const, 0x13de8, 4) , (const, 0x8, 4)
rpl_getopt_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
rpl_getopt_internal, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x34, 4)
rpl_getopt_internal, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x34, 4)
rpl_getopt_internal, (register, 0x34, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x34, 4)
rpl_getopt_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e68, 4)
rpl_getopt_internal, (unique, 0x8480, 4) INT_ADD (register, 0x34, 4) , (register, 0x50, 4)
rpl_getopt_internal, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
rpl_getopt_internal, (unique, 0x1780, 4) INT_ADD (const, 0x13df4, 4) , (const, 0x8, 4)
rpl_getopt_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
rpl_getopt_internal, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x30, 4)
rpl_getopt_internal, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x30, 4)
rpl_getopt_internal, (register, 0x30, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x30, 4)
rpl_getopt_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e6c, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
rpl_getopt_internal, (unique, 0x8480, 4) INT_ADD (register, 0x34, 4) , (register, 0x50, 4)
rpl_getopt_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
rpl_getopt_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
rpl_getopt_internal, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
rpl_getopt_internal, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x4, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt_internal, (register, 0x58, 4) COPY (const, 0x13e30, 4)
rpl_getopt_internal,  ---  CALL (ram, 0x130a8, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e70, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x38, 4) , (const, 0x0, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0xc, 4)
rpl_getopt_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8480, 4) INT_ADD (register, 0x34, 4) , (register, 0x2c, 4)
rpl_getopt_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
rpl_getopt_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x13e74, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x28, 4) , (const, 0x0, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x30, 4) , (const, 0x8, 4)
rpl_getopt_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_internal, (unique, 0x8480, 4) INT_ADD (register, 0x34, 4) , (register, 0x2c, 4)
rpl_getopt_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
rpl_getopt_internal, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
rpl_getopt_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
rpl_getopt_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
rpl_getopt_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x10, 4)
rpl_getopt_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x10, 4)
rpl_getopt_internal, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
rpl_getopt_internal, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x80, 4) COPY (register, 0x54, 4)
rpl_getopt_internal, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
rpl_getopt_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt_internal, (register, 0x54, 4) COPY (register, 0x80, 4)
rpl_getopt_internal, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
rpl_getopt_internal, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
rpl_getopt_internal, (register, 0x69, 1) COPY (register, 0xb0, 1)
rpl_getopt_internal, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
rpl_getopt_internal,  ---  RETURN (register, 0x5c, 4)
rpl_getopt, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
rpl_getopt,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)
rpl_getopt, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
rpl_getopt, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
rpl_getopt, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt, (register, 0x50, 4) COPY (const, 0x0, 4)
rpl_getopt, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x66, 1) COPY (register, 0x68, 1)
rpl_getopt, (register, 0x67, 1) COPY (register, 0x63, 1)
rpl_getopt, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
rpl_getopt, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt, (register, 0x58, 4) COPY (const, 0x1, 4)
rpl_getopt, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x66, 1) COPY (register, 0x68, 1)
rpl_getopt, (register, 0x67, 1) COPY (register, 0x63, 1)
rpl_getopt, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt, (register, 0x2c, 4) COPY (register, 0x50, 4)
rpl_getopt, (register, 0x80, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x50, 4)
rpl_getopt, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
rpl_getopt, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
rpl_getopt, (register, 0x58, 4) COPY (const, 0x13e98, 4)
rpl_getopt,  ---  CALL (ram, 0x13dd8, 4)
rpl_getopt, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt, (unique, 0x8800, 4) COPY (register, 0x54, 4)
rpl_getopt, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt, (unique, 0x3c980, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
rpl_getopt, (unique, 0x0, 4) INT_AND (unique, 0x3c980, 4) , (const, 0x1, 4)
rpl_getopt, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
rpl_getopt, (register, 0x69, 1) COPY (register, 0xb0, 1)
rpl_getopt, (register, 0x5c, 4) INT_AND (unique, 0x3c980, 4) , (const, 0xfffffffe, 4)
rpl_getopt,  ---  BRANCHIND (register, 0x5c, 4)
rpl_getopt_long, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
rpl_getopt_long,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)
rpl_getopt_long, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt_long, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
rpl_getopt_long, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
rpl_getopt_long, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long, (register, 0x50, 4) COPY (const, 0x0, 4)
rpl_getopt_long, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long, (register, 0x66, 1) COPY (register, 0x68, 1)
rpl_getopt_long, (register, 0x67, 1) COPY (register, 0x63, 1)
rpl_getopt_long, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
rpl_getopt_long, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_long, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_long,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt_long, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
rpl_getopt_long, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
rpl_getopt_long,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt_long, (register, 0x58, 4) COPY (const, 0x13ec0, 4)
rpl_getopt_long,  ---  CALL (ram, 0x13dd8, 4)
rpl_getopt_long, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt_long, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long, (unique, 0x8800, 4) COPY (register, 0x54, 4)
rpl_getopt_long, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_long, (unique, 0x3c980, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
rpl_getopt_long, (unique, 0x0, 4) INT_AND (unique, 0x3c980, 4) , (const, 0x1, 4)
rpl_getopt_long, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
rpl_getopt_long, (register, 0x69, 1) COPY (register, 0xb0, 1)
rpl_getopt_long, (register, 0x5c, 4) INT_AND (unique, 0x3c980, 4) , (const, 0xfffffffe, 4)
rpl_getopt_long,  ---  BRANCHIND (register, 0x5c, 4)
_getopt_long_r, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_getopt_long_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
_getopt_long_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
_getopt_long_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x10, 4) , (register, 0x54, 4)
_getopt_long_r, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x10, 4)
_getopt_long_r, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x10, 4)
_getopt_long_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_long_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_r, (register, 0x50, 4) COPY (const, 0x0, 4)
_getopt_long_r, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_long_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_long_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
_getopt_long_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_long_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
_getopt_long_r, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_long_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
_getopt_long_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
_getopt_long_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x50, 4)
_getopt_long_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_getopt_long_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r, (register, 0x58, 4) COPY (const, 0x13ee8, 4)
_getopt_long_r,  ---  CALL (ram, 0x130a8, 4)
_getopt_long_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x10, 4) , (const, 0x1f, 4)
_getopt_long_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x10, 4)
_getopt_long_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x10, 4)
_getopt_long_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
_getopt_long_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_long_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_long_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_long_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_long_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_long_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_long_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_long_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_long_r,  ---  RETURN (register, 0x5c, 4)
rpl_getopt_long_only, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xfffffffc, 4)
rpl_getopt_long_only,  ---  STORE (const, 0x1a1, 8) , (register, 0x54, 4) , (register, 0x58, 4)
rpl_getopt_long_only, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt_long_only, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long_only, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long_only, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long_only, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
rpl_getopt_long_only, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long_only, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long_only, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
rpl_getopt_long_only, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long_only, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long_only, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long_only, (register, 0x50, 4) COPY (const, 0x1, 4)
rpl_getopt_long_only, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x66, 1) COPY (register, 0x68, 1)
rpl_getopt_long_only, (register, 0x67, 1) COPY (register, 0x63, 1)
rpl_getopt_long_only, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
rpl_getopt_long_only, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
rpl_getopt_long_only, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_long_only,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt_long_only, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
rpl_getopt_long_only, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long_only, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long_only, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long_only, (register, 0x50, 4) COPY (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x66, 1) COPY (register, 0x68, 1)
rpl_getopt_long_only, (register, 0x67, 1) COPY (register, 0x63, 1)
rpl_getopt_long_only, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long_only,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
rpl_getopt_long_only, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
rpl_getopt_long_only,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
rpl_getopt_long_only, (register, 0x58, 4) COPY (const, 0x13f14, 4)
rpl_getopt_long_only,  ---  CALL (ram, 0x13dd8, 4)
rpl_getopt_long_only, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
rpl_getopt_long_only, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
rpl_getopt_long_only, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
rpl_getopt_long_only, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
rpl_getopt_long_only, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
rpl_getopt_long_only, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long_only, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long_only, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
rpl_getopt_long_only, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (unique, 0x8800, 4) COPY (register, 0x54, 4)
rpl_getopt_long_only, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
rpl_getopt_long_only, (unique, 0x3c980, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
rpl_getopt_long_only, (unique, 0x0, 4) INT_AND (unique, 0x3c980, 4) , (const, 0x1, 4)
rpl_getopt_long_only, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
rpl_getopt_long_only, (register, 0x69, 1) COPY (register, 0xb0, 1)
rpl_getopt_long_only, (register, 0x5c, 4) INT_AND (unique, 0x3c980, 4) , (const, 0xfffffffe, 4)
rpl_getopt_long_only,  ---  BRANCHIND (register, 0x5c, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
_getopt_long_only_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_only_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_only_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_only_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_only_r, (register, 0x66, 1) INT_LESSEQUAL (const, 0x14, 4) , (register, 0x54, 4)
_getopt_long_only_r, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x14, 4)
_getopt_long_only_r, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x14, 4)
_getopt_long_only_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_only_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
_getopt_long_only_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_only_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_only_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_only_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_only_r, (register, 0x58, 4) COPY (const, 0x1, 4)
_getopt_long_only_r, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_long_only_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_long_only_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
_getopt_long_only_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_only_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_only_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_only_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_only_r, (register, 0x50, 4) COPY (const, 0x0, 4)
_getopt_long_only_r, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x66, 1) COPY (register, 0x68, 1)
_getopt_long_only_r, (register, 0x67, 1) COPY (register, 0x63, 1)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
_getopt_long_only_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
_getopt_long_only_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x58, 4)
_getopt_long_only_r, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xc, 4)
_getopt_long_only_r,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x50, 4)
_getopt_long_only_r, (register, 0x58, 4) COPY (const, 0x13f48, 4)
_getopt_long_only_r,  ---  CALL (ram, 0x130a8, 4)
_getopt_long_only_r, (unique, 0x2e80, 4) INT_RIGHT (const, 0x14, 4) , (const, 0x1f, 4)
_getopt_long_only_r, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
_getopt_long_only_r, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
_getopt_long_only_r, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
_getopt_long_only_r, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
_getopt_long_only_r, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
_getopt_long_only_r, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x14, 4)
_getopt_long_only_r, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x14, 4)
_getopt_long_only_r, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
_getopt_long_only_r, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x80, 4) COPY (register, 0x54, 4)
_getopt_long_only_r, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_getopt_long_only_r, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_getopt_long_only_r, (register, 0x54, 4) COPY (register, 0x80, 4)
_getopt_long_only_r, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_getopt_long_only_r, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_getopt_long_only_r, (register, 0x69, 1) COPY (register, 0xb0, 1)
_getopt_long_only_r, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_getopt_long_only_r,  ---  RETURN (register, 0x5c, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
ranged_convert, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x44, 4) COPY (register, 0x24, 4)
ranged_convert, (register, 0x38, 4) COPY (register, 0x20, 4)
ranged_convert, (register, 0x24, 4) COPY (register, 0x28, 4)
ranged_convert, (register, 0x20, 4) COPY (register, 0x44, 4)
ranged_convert, (register, 0x3c, 4) COPY (register, 0x28, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x38, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x38, 4) , (const, 0xfffffffe, 4)
ranged_convert, (register, 0x58, 4) COPY (const, 0x13f6c, 4)
ranged_convert,  ---  CALLIND (register, 0x5c, 4)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13f74, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x80, 4) COPY (register, 0x54, 4)
ranged_convert, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x54, 4) COPY (register, 0x80, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
ranged_convert,  ---  RETURN (register, 0x5c, 4)
ranged_convert, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13f80, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x28, 4) COPY (register, 0x20, 4)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13f84, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x34, 4) COPY (register, 0x28, 4)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13fb4, 4) , (unique, 0x1a80, 1)
ranged_convert, (register, 0x80, 4) COPY (register, 0x54, 4)
ranged_convert, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x54, 4) COPY (register, 0x80, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
ranged_convert,  ---  RETURN (register, 0x5c, 4)
ranged_convert, (register, 0x68, 1) COPY (register, 0x62, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x2c, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x40, 4)
ranged_convert, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13fdc, 4) , (register, 0x61, 1)
ranged_convert, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
ranged_convert, (register, 0x20, 4) COPY (register, 0x44, 4)
ranged_convert, (register, 0x24, 4) COPY (register, 0x3c, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x38, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x38, 4) , (const, 0xfffffffe, 4)
ranged_convert, (register, 0x58, 4) COPY (const, 0x13fa4, 4)
ranged_convert,  ---  CALLIND (register, 0x5c, 4)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x28, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13fac, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x40, 4) COPY (register, 0x30, 4)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13fb0, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x30, 4) COPY (register, 0x34, 4)
ranged_convert, (register, 0x34, 4) COPY (register, 0x30, 4)
ranged_convert, (register, 0x68, 1) COPY (register, 0x62, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x30, 4) INT_SUB (register, 0x40, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3e00, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
ranged_convert, (unique, 0x3e80, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3e00, 4)
ranged_convert, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x4100, 4) INT_SRIGHT (register, 0x30, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x30, 4) INT_ADD (register, 0x34, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13f8c, 4) , (unique, 0x2180, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x2c, 4) INT_SUB (register, 0x34, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x68, 1) COPY (register, 0x62, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x30, 4) INT_SUB (register, 0x34, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x68, 1) COPY (register, 0x62, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x2c, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x40, 4)
ranged_convert, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x40, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x3e00, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
ranged_convert, (unique, 0x3e80, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3e00, 4)
ranged_convert, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x4100, 4) INT_SRIGHT (register, 0x30, 4) , (const, 0x1, 4)
ranged_convert, (register, 0x66, 1) INT_CARRY (register, 0x40, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x67, 1) INT_SCARRY (register, 0x40, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x30, 4) INT_ADD (register, 0x40, 4) , (unique, 0x4100, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13f94, 4) , (unique, 0x1a80, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (register, 0x20, 4) COPY (register, 0x28, 4)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13fe8, 4) , (unique, 0x2680, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x2c, 4) COPY (const, 0x1, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x66, 1) COPY (register, 0x68, 1)
ranged_convert, (register, 0x67, 1) COPY (register, 0x63, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13ff0, 4) , (unique, 0x2680, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x2c, 4) COPY (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x66, 1) COPY (register, 0x68, 1)
ranged_convert, (register, 0x67, 1) COPY (register, 0x63, 1)
ranged_convert, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
ranged_convert, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
ranged_convert, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
ranged_convert, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
ranged_convert, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
ranged_convert, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
ranged_convert, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x62, 1) COPY (register, 0x66, 1)
ranged_convert, (register, 0x61, 1) COPY (register, 0x65, 1)
ranged_convert, (register, 0x60, 1) COPY (register, 0x64, 1)
ranged_convert, (register, 0x63, 1) COPY (register, 0x67, 1)
ranged_convert, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
ranged_convert,  ---  CBRANCH (ram, 0x13ff8, 4) , (unique, 0x2680, 1)
ranged_convert, (register, 0x80, 4) COPY (register, 0x54, 4)
ranged_convert, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x54, 4) COPY (register, 0x80, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
ranged_convert,  ---  RETURN (register, 0x5c, 4)
ranged_convert, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
ranged_convert,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x34, 4)
ranged_convert, (register, 0x20, 4) COPY (register, 0x44, 4)
ranged_convert, (register, 0x24, 4) COPY (register, 0x3c, 4)
ranged_convert, (register, 0x2c, 4) COPY (register, 0x38, 4)
ranged_convert, (register, 0x80, 4) COPY (register, 0x54, 4)
ranged_convert, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
ranged_convert, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
ranged_convert, (register, 0x54, 4) COPY (register, 0x80, 4)
ranged_convert, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
ranged_convert, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
ranged_convert, (register, 0x69, 1) COPY (register, 0xb0, 1)
ranged_convert, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
ranged_convert,  ---  BRANCHIND (register, 0x5c, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14108, 4) , (register, 0x61, 1)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x14, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (register, 0x40, 4) COPY (const, 0x851f, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x20, 4) , (const, 0x2, 4)
guess_time_tm, (register, 0x30, 4) COPY (unique, 0x4100, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x3f280, 4) INT_LEFT (const, 0x51eb, 4) , (const, 0x10, 4)
guess_time_tm, (unique, 0x3f300, 4) INT_AND (register, 0x40, 4) , (const, 0xffff, 4)
guess_time_tm, (register, 0x40, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x38, 4) , (const, 0x2, 4)
guess_time_tm, (register, 0x58, 4) COPY (unique, 0x4100, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1d8, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x50, 4) INT_ADD (register, 0x30, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x6fb80, 4) INT_ADD (const, 0x0, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x6fc80, 4) INT_SUB (const, 0x1f, 4) , (unique, 0x6fb80, 4)
guess_time_tm, (register, 0x44, 4) INT_LEFT (register, 0x38, 4) , (unique, 0x6fc80, 4)
guess_time_tm, (unique, 0x6fc80, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x44, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x6fc80, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1d8, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0x1d8, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x6fb80, 4) INT_ADD (const, 0x0, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x6fc80, 4) INT_SUB (const, 0x1f, 4) , (unique, 0x6fb80, 4)
guess_time_tm, (register, 0x30, 4) INT_LEFT (register, 0x20, 4) , (unique, 0x6fc80, 4)
guess_time_tm, (unique, 0x6fc80, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x30, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x6fc80, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x44, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b980, 4) INT_SUB (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x1405c, 4) , (unique, 0x2680, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x58, 4) INT_SUB (register, 0x58, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x19, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x44, 4) COPY (const, 0x19, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x64980, 8) INT_SEXT (register, 0x58, 4)
guess_time_tm, (unique, 0x64a80, 8) INT_SEXT (register, 0x40, 4)
guess_time_tm, (unique, 0x64b80, 8) INT_MULT (unique, 0x64980, 8) , (unique, 0x64a80, 8)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x64b80, 8) , (const, 0x0, 8)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x64b80, 8) , (const, 0x0, 8)
guess_time_tm, (register, 0x48, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x0, 4)
guess_time_tm, (register, 0x4c, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x4, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x1406c, 4) , (unique, 0x2680, 1)
guess_time_tm, (register, 0x30, 4) COPY (register, 0x50, 4)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14070, 4) , (unique, 0x2680, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x30, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x58, 4) , (const, 0x1f, 4)
guess_time_tm, (register, 0x38, 4) COPY (unique, 0x4100, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x58, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x50, 4) INT_SUB (register, 0x30, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x4c, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (unique, 0x4100, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x38, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x64980, 8) INT_SEXT (register, 0x30, 4)
guess_time_tm, (unique, 0x64a80, 8) INT_SEXT (register, 0x40, 4)
guess_time_tm, (unique, 0x64b80, 8) INT_MULT (unique, 0x64980, 8) , (unique, 0x64a80, 8)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x64b80, 8) , (const, 0x0, 8)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x64b80, 8) , (const, 0x0, 8)
guess_time_tm, (register, 0x48, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x0, 4)
guess_time_tm, (register, 0x4c, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x4, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x30, 4) , (const, 0x1f, 4)
guess_time_tm, (register, 0x40, 4) COPY (unique, 0x4100, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x4c, 4) , (const, 0x3, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (unique, 0x4100, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x40, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3c, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x4c, 4) COPY (const, 0x3c, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x3e880, 4) INT_MULT (register, 0x44, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x58, 4) INT_SUB (register, 0x58, 4) , (unique, 0x3e880, 4)
guess_time_tm, (unique, 0x3e880, 4) INT_MULT (register, 0x44, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x3e880, 4)
guess_time_tm, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3880, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3800, 4)
guess_time_tm, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b00, 4) INT_RIGHT (register, 0x58, 4) , (const, 0x1f, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x3b00, 4) , (register, 0x38, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (unique, 0x3b00, 4)
guess_time_tm, (register, 0x58, 4) INT_SUB (register, 0x38, 4) , (unique, 0x3b00, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x44, 4) COPY (const, 0x18, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3880, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3800, 4)
guess_time_tm, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b00, 4) INT_RIGHT (register, 0x30, 4) , (const, 0x1f, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x3b00, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (unique, 0x3b00, 4)
guess_time_tm, (register, 0x40, 4) INT_SUB (register, 0x40, 4) , (unique, 0x3b00, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x30, 4) COPY (const, 0x16d, 4)
guess_time_tm, (unique, 0x3e780, 4) INT_MULT (register, 0x30, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x24, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x24, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x1c, 4)
guess_time_tm, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x30, 4) INT_SUB (register, 0x58, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x58, 4) , (const, 0x2, 4)
guess_time_tm, (register, 0x58, 4) COPY (unique, 0x4100, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (register, 0x30, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x24, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x20, 4) INT_SUB (register, 0x24, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3e80, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x3e00, 4)
guess_time_tm, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x4100, 4) INT_SRIGHT (register, 0x40, 4) , (const, 0x2, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x58, 4) , (unique, 0x4100, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x40, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x58, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (register, 0x40, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x24, 4) INT_ADD (register, 0x50, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e780, 4) INT_MULT (register, 0x44, 4) , (register, 0x24, 4)
guess_time_tm, (register, 0x28, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x8, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x34, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x48, 4)
guess_time_tm, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (register, 0x48, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e780, 4) INT_MULT (register, 0x4c, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x28, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
guess_time_tm, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3e780, 4) INT_MULT (register, 0x4c, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x2c, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
guess_time_tm, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x20, 4) INT_ADD (register, 0x3c, 4) , (register, 0x2c, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x68, 1) COPY (register, 0x62, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x20, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x3c, 4)
guess_time_tm, (unique, 0x3ba80, 4) INT_SUB (register, 0x20, 4) , (register, 0x3c, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x140fc, 4) , (unique, 0x2680, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x28, 4) COPY (const, 0x0, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14100, 4) , (unique, 0x2680, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x28, 4) COPY (const, 0x1, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
guess_time_tm, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
guess_time_tm, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x3b00, 4) , (register, 0x28, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (unique, 0x3b00, 4)
guess_time_tm, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3b00, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
guess_time_tm, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14108, 4) , (unique, 0x2680, 1)
guess_time_tm, (register, 0x80, 4) COPY (register, 0x54, 4)
guess_time_tm, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) COPY (register, 0x80, 4)
guess_time_tm, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x69, 1) COPY (register, 0xb0, 1)
guess_time_tm, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
guess_time_tm,  ---  RETURN (register, 0x5c, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3b980, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14128, 4) , (unique, 0x2280, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000003, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0x80000003, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0x80000003, 4)
guess_time_tm, (unique, 0x3b680, 4) INT_ADD (register, 0x3c, 4) , (const, 0x80000003, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b680, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b680, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
guess_time_tm, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14120, 4) , (unique, 0x2600, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x3c, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x20, 4) INT_SUB (register, 0x3c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x80, 4) COPY (register, 0x54, 4)
guess_time_tm, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) COPY (register, 0x80, 4)
guess_time_tm, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x69, 1) COPY (register, 0xb0, 1)
guess_time_tm, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
guess_time_tm,  ---  RETURN (register, 0x5c, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000000, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x20, 4) INT_NEGATE (const, 0x80000000, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (register, 0x80, 4) COPY (register, 0x54, 4)
guess_time_tm, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) COPY (register, 0x80, 4)
guess_time_tm, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x69, 1) COPY (register, 0xb0, 1)
guess_time_tm, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
guess_time_tm,  ---  RETURN (register, 0x5c, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000002, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_LESSEQUAL (const, 0x80000002, 4) , (register, 0x3c, 4)
guess_time_tm, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x80000002, 4)
guess_time_tm, (unique, 0x3b980, 4) INT_SUB (register, 0x3c, 4) , (const, 0x80000002, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x62, 1) COPY (register, 0x66, 1)
guess_time_tm, (register, 0x61, 1) COPY (register, 0x65, 1)
guess_time_tm, (register, 0x60, 1) COPY (register, 0x64, 1)
guess_time_tm, (register, 0x63, 1) COPY (register, 0x67, 1)
guess_time_tm, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
guess_time_tm,  ---  CBRANCH (ram, 0x14138, 4) , (unique, 0x2180, 1)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x20, 4) INT_ADD (register, 0x3c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x80, 4) COPY (register, 0x54, 4)
guess_time_tm, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) COPY (register, 0x80, 4)
guess_time_tm, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x69, 1) COPY (register, 0xb0, 1)
guess_time_tm, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
guess_time_tm,  ---  RETURN (register, 0x5c, 4)
guess_time_tm, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000000, 4) , (const, 0x1f, 4)
guess_time_tm, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
guess_time_tm, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
guess_time_tm, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
guess_time_tm, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
guess_time_tm, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
guess_time_tm, (register, 0x20, 4) COPY (const, 0x80000000, 4)
guess_time_tm, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x66, 1) COPY (register, 0x68, 1)
guess_time_tm, (register, 0x67, 1) COPY (register, 0x63, 1)
guess_time_tm, (register, 0x80, 4) COPY (register, 0x54, 4)
guess_time_tm, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
guess_time_tm, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
guess_time_tm, (register, 0x54, 4) COPY (register, 0x80, 4)
guess_time_tm, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
guess_time_tm, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
guess_time_tm, (register, 0x69, 1) COPY (register, 0xb0, 1)
guess_time_tm, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
guess_time_tm,  ---  RETURN (register, 0x5c, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x44, 4) COPY (register, 0x20, 4)
mktime_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (const, 0x14660, 4)
mktime_internal, (register, 0x30, 4) COPY (const, 0xaaab, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x10, 4)
mktime_internal, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x3f280, 4) INT_LEFT (const, 0x2aaa, 4) , (const, 0x10, 4)
mktime_internal, (unique, 0x3f300, 4) INT_AND (register, 0x30, 4) , (const, 0xffff, 4)
mktime_internal, (register, 0x30, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
mktime_internal, (unique, 0x1780, 4) INT_ADD (const, 0x14158, 4) , (const, 0x8, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x40, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x38, 4) COPY (const, 0xc, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x64980, 8) INT_SEXT (register, 0x58, 4)
mktime_internal, (unique, 0x64a80, 8) INT_SEXT (register, 0x30, 4)
mktime_internal, (unique, 0x64b80, 8) INT_MULT (unique, 0x64980, 8) , (unique, 0x64a80, 8)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x30, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x0, 4)
mktime_internal, (register, 0x34, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x4, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x58, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x30, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xac, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0xac, 4) , (register, 0x54, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0xac, 4)
mktime_internal, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0xac, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x34, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x3c, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x20, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x50, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e880, 4) INT_MULT (register, 0x38, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x50, 4) INT_SUB (register, 0x58, 4) , (unique, 0x3e880, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x14664, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x50, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x34, 4) COPY (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
mktime_internal, (unique, 0x8480, 4) INT_ADD (register, 0x40, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x20, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x3c, 4) INT_ADD (register, 0x28, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x141ac, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x20, 4) INT_OR (register, 0x20, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x30, 4) INT_AND (register, 0x3c, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x141c4, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x24, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0x8, 4)
mktime_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x44, 4) , (const, 0xc, 4)
mktime_internal, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14210, 4) , (unique, 0x1a80, 1)
mktime_internal, (register, 0x20, 4) COPY (const, 0x851f, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x64, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x38, 4) COPY (const, 0x64, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3f280, 4) INT_LEFT (const, 0x51eb, 4) , (const, 0x10, 4)
mktime_internal, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
mktime_internal, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
mktime_internal, (unique, 0x64980, 8) INT_SEXT (register, 0x3c, 4)
mktime_internal, (unique, 0x64a80, 8) INT_SEXT (register, 0x20, 4)
mktime_internal, (unique, 0x64b80, 8) INT_MULT (unique, 0x64980, 8) , (unique, 0x64a80, 8)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x20, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x0, 4)
mktime_internal, (register, 0x24, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x4, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x3c, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x2c, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x5, 4)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e880, 4) INT_MULT (register, 0x38, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x38, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x3e880, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14200, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14204, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14208, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1420c, 4) , (unique, 0x2680, 1)
mktime_internal, (register, 0x2c, 4) CALLOTHER (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14210, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x5, 4)
mktime_internal, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x14668, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x20, 4) COPY (const, 0xc, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x20, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x50, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xd, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x34, 4) COPY (const, 0xd, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x34, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x34, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x1780, 4) INT_ADD (const, 0x1422c, 4) , (const, 0x8, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
mktime_internal, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x34, 4) COPY (unique, 0x3580, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
mktime_internal, (unique, 0x9380, 4) INT_ADD (register, 0x24, 4) , (register, 0x34, 4)
mktime_internal, (unique, 0x3d180, 2) LOAD (const, 0x1a1, 8) , (unique, 0x9380, 4)
mktime_internal, (register, 0x2c, 4) INT_ZEXT (unique, 0x3d180, 2)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14508, 4) , (unique, 0x2280, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3b, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3b, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x3b, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x3b, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (register, 0x2c, 4) COPY (register, 0x20, 4)
mktime_internal, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14260, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3b, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x3b, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x3c, 4) , (const, 0x2, 4)
mktime_internal, (register, 0x2c, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x20, 4) COPY (const, 0x851f, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1d8, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1d8, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1d8, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1d8, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3f280, 4) INT_LEFT (const, 0x51eb, 4) , (const, 0x10, 4)
mktime_internal, (unique, 0x3f300, 4) INT_AND (register, 0x20, 4) , (const, 0xffff, 4)
mktime_internal, (register, 0x20, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x19, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x50, 4) COPY (const, 0x19, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x28, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x28, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3c, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x34, 4) COPY (const, 0x3c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1428c, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x23, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x23, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x23, 4)
mktime_internal, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x23, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x64980, 8) INT_SEXT (register, 0x2c, 4)
mktime_internal, (unique, 0x64a80, 8) INT_SEXT (register, 0x20, 4)
mktime_internal, (unique, 0x64b80, 8) INT_MULT (unique, 0x64980, 8) , (unique, 0x64a80, 8)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x64b80, 8) , (const, 0x0, 8)
mktime_internal, (register, 0x20, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x0, 4)
mktime_internal, (register, 0x24, 4) SUBPIECE (unique, 0x64b80, 8) , (const, 0x4, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x20, 4) COPY (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x18, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x30, 4) COPY (const, 0x18, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x3, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x24, 4) , (const, 0x3, 4)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x20, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x46, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x46, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x46, 4)
mktime_internal, (register, 0x24, 4) INT_SUB (register, 0x3c, 4) , (const, 0x46, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e880, 4) INT_MULT (register, 0x50, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x50, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x3e880, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0xa, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x58, 4) , (const, 0xa, 4)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x16d, 4)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x50, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x3b00, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (unique, 0x3b00, 4)
mktime_internal, (register, 0x50, 4) INT_SUB (register, 0x20, 4) , (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x50, 4) , (const, 0x2, 4)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1dc, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0xf, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xf, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1dc, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1dc, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1dc, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x58, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x30, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x34, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x48, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0xe, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x40, 4) , (const, 0xe, 4)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3e780, 4) INT_MULT (register, 0x34, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x14, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x48, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x48, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1a, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x1a, 4)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14300, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x15, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x15, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x15, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1433c, 4) , (unique, 0x2600, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x2c, 4) INT_NEGATE (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3e00, 4) INT_SUB (const, 0x1a, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3e80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3e00, 4)
mktime_internal, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x4100, 4) INT_SRIGHT (register, 0x2c, 4) , (const, 0x1a, 4)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (unique, 0x4100, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (unique, 0x4100, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x28, 4) INT_SUB (unique, 0x4100, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1431c, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x28, 4) INT_SUB (const, 0x0, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x15, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x15, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x15, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x15, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
mktime_internal,  ---  CBRANCH (ram, 0x144e4, 4) , (unique, 0x2480, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x28, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xa8, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x4c, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x44, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x6, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x38, 4) COPY (const, 0x6, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x34, 4) COPY (register, 0x2c, 4)
mktime_internal, (register, 0x4c, 4) INT_ADD (register, 0x4c, 4) , (const, 0xffffff98, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x4c, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x4c, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x4c, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x4c, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x44, 4) COPY (register, 0x34, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
mktime_internal, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal,  ---  BRANCH (ram, 0x14398, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x38, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x38, 4) INT_SUB (register, 0x38, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x144e4, 4) , (register, 0x61, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
mktime_internal, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x44, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x44, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x44, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
mktime_internal, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14390, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x24, 4) COPY (register, 0x4c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x143a8, 4)
mktime_internal,  ---  CALL (ram, 0x13f50, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x24, 4) COPY (register, 0x34, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x28, 4) COPY (register, 0x40, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x20, 4) COPY (register, 0x3c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x2c, 4) COPY (register, 0x48, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x143d0, 4)
mktime_internal,  ---  CALL (ram, 0x14010, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x20, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1452c, 4) , (register, 0x61, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x44, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (register, 0x30, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x44, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14374, 4) , (unique, 0x1a80, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x44, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x44, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x44, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14374, 4) , (register, 0x61, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1441c, 4) , (unique, 0x2280, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14514, 4) , (unique, 0x2280, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14408, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x28, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1440c, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x28, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14414, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14374, 4) , (register, 0x61, 1)
mktime_internal, (register, 0x34, 4) COPY (register, 0x44, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
mktime_internal, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x50, 4) COPY (register, 0x34, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x24, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4c, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x2c, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x20, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x38, 4) INT_SUB (register, 0x2c, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x34, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x38, 4)
mktime_internal,  ---  CBRANCH (ram, 0x144c4, 4) , (register, 0x61, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xa8, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x20, 4) INT_ADD (register, 0x54, 4) , (const, 0xa8, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x58, 4) INT_ADD (register, 0x24, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14464, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x3c, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x3c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x3c, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x3c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (register, 0x2c, 4) COPY (register, 0x30, 4)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1446c, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14470, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x28, 4) INT_ADD (register, 0x58, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x30, 4) COPY (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x58, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x50, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x58, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14488, 4) , (unique, 0x2680, 1)
mktime_internal, (register, 0x34, 4) COPY (register, 0x30, 4)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1448c, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x34, 4) INT_XOR (register, 0x30, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x58, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x58, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2500, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2600, 1) BOOL_OR (register, 0x61, 1) , (unique, 0x2500, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2600, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14494, 4) , (unique, 0x2680, 1)
mktime_internal, (register, 0x30, 4) COPY (register, 0x2c, 4)
mktime_internal, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2480, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14498, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x30, 4) INT_XOR (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x30, 4) INT_OR (register, 0x30, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x20, 4) INT_ADD (register, 0x20, 4) , (const, 0xffffff9c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x20, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x69, 1) COPY (register, 0xb0, 1)
mktime_internal, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x144ac, 4)
mktime_internal,  ---  CALLIND (register, 0x5c, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x144b4, 4) , (unique, 0x2680, 1)
mktime_internal, (register, 0x20, 4) COPY (register, 0x30, 4)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x144b8, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x20, 4) INT_OR (register, 0x30, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x144e4, 4) , (unique, 0x1a80, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x44, 4)
mktime_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x48, 4) COPY (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x44, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x44, 4) COPY (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x48, 4) COPY (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x44, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x44, 4) COPY (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x44, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal,  ---  BRANCH (ram, 0x144e8, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x50, 4) INT_NEGATE (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x38, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x20, 4) COPY (register, 0x50, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0xa4, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1465c, 4) , (unique, 0x1a80, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xac, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0xac, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0xac, 4)
mktime_internal, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0xac, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x80, 4) COPY (register, 0x54, 4)
mktime_internal, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
mktime_internal, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
mktime_internal, (register, 0x54, 4) COPY (register, 0x80, 4)
mktime_internal, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x69, 1) COPY (register, 0xb0, 1)
mktime_internal, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
mktime_internal,  ---  RETURN (register, 0x5c, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal,  ---  BRANCH (ram, 0x14264, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14520, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x1, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2300, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal, (unique, 0x2380, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2480, 1) BOOL_AND (unique, 0x2300, 1) , (unique, 0x2380, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14374, 4) , (unique, 0x2480, 1)
mktime_internal,  ---  BRANCH (ram, 0x1441c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x6c, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x2c, 4) INT_NEGATE (register, 0x24, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x24, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x3800, 4) INT_SUB (const, 0x1f, 4) , (const, 0x1, 4)
mktime_internal, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
mktime_internal, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x1f, 4)
mktime_internal, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14544, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
mktime_internal, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14550, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14554, 4) , (unique, 0x2680, 1)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1455c, 4) , (unique, 0x2680, 1)
mktime_internal, (register, 0x50, 4) COPY (register, 0x30, 4)
mktime_internal,  ---  CBRANCH (ram, 0x14428, 4) , (register, 0x61, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x48, 4)
mktime_internal, (register, 0x34, 4) COPY (const, 0x2c70, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x40, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc400, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0xb, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xb, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x2c, 4) COPY (const, 0xc400, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x66, 1) COPY (register, 0x68, 1)
mktime_internal, (register, 0x67, 1) COPY (register, 0x63, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x3f280, 4) INT_LEFT (const, 0x9, 4) , (const, 0x10, 4)
mktime_internal, (unique, 0x3f300, 4) INT_AND (register, 0x34, 4) , (const, 0xffff, 4)
mktime_internal, (register, 0x34, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x3c, 4)
mktime_internal, (unique, 0x3f280, 4) INT_LEFT (const, 0x100d, 4) , (const, 0x10, 4)
mktime_internal, (unique, 0x3f300, 4) INT_AND (register, 0x2c, 4) , (const, 0xffff, 4)
mktime_internal, (register, 0x2c, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
mktime_internal, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x50, 4) COPY (register, 0x30, 4)
mktime_internal, (register, 0x3c, 4) COPY (register, 0x34, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x48, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal, (register, 0x38, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x78, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x78, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x78, 4)
mktime_internal, (register, 0x30, 4) INT_ADD (register, 0x54, 4) , (const, 0x78, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x34, 4) COPY (register, 0x2c, 4)
mktime_internal,  ---  BRANCH (ram, 0x145e0, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x28, 4) INT_ADD (register, 0x3c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x50, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal,  ---  CBRANCH (ram, 0x145d0, 4) , (unique, 0x2280, 1)
mktime_internal, (register, 0x28, 4) COPY (register, 0x30, 4)
mktime_internal, (register, 0x20, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x24, 4) COPY (register, 0x38, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x145c0, 4)
mktime_internal,  ---  CALL (ram, 0x13f50, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x40, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1460c, 4) , (register, 0x61, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0x92000, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0xa, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xa, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0x92000, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0x92000, 4)
mktime_internal, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0x92000, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x2e80, 4) INT_RIGHT (const, 0xc70, 4) , (const, 0x1f, 4)
mktime_internal, (unique, 0x2f00, 1) INT_EQUAL (const, 0xe, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
mktime_internal, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0xe, 1) , (const, 0x0, 1)
mktime_internal, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
mktime_internal, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
mktime_internal, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
mktime_internal, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (const, 0xc70, 4)
mktime_internal, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (const, 0xc70, 4)
mktime_internal, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (const, 0xc70, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x34, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x34, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal,  ---  CBRANCH (ram, 0x14428, 4) , (register, 0x61, 1)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x28, 4) INT_SUB (register, 0x50, 4) , (register, 0x3c, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x50, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x50, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
mktime_internal, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
mktime_internal,  ---  CBRANCH (ram, 0x145a0, 4) , (unique, 0x2180, 1)
mktime_internal, (register, 0x28, 4) COPY (register, 0x30, 4)
mktime_internal, (register, 0x20, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x24, 4) COPY (register, 0x38, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x14600, 4)
mktime_internal,  ---  CALL (ram, 0x13f50, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x98, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x68, 1) COPY (register, 0x62, 1)
mktime_internal, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x40, 4)
mktime_internal, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x40, 4)
mktime_internal, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
mktime_internal, (register, 0x62, 1) COPY (register, 0x66, 1)
mktime_internal, (register, 0x61, 1) COPY (register, 0x65, 1)
mktime_internal, (register, 0x60, 1) COPY (register, 0x64, 1)
mktime_internal, (register, 0x63, 1) COPY (register, 0x67, 1)
mktime_internal, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
mktime_internal,  ---  CBRANCH (ram, 0x1459c, 4) , (unique, 0x1a80, 1)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x48, 4)
mktime_internal, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x10, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x1c, 4)
mktime_internal, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x3c, 4)
mktime_internal, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x30, 4)
mktime_internal, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x28, 4)
mktime_internal, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x0, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x28, 4)
mktime_internal, (register, 0x20, 4) COPY (register, 0x3c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
mktime_internal, (register, 0x28, 4) COPY (register, 0x40, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x30, 4)
mktime_internal, (register, 0x2c, 4) COPY (register, 0x48, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x14640, 4)
mktime_internal,  ---  CALL (ram, 0x14010, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x20, 4)
mktime_internal, (register, 0x24, 4) COPY (register, 0x4c, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
mktime_internal, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x14, 4)
mktime_internal, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x14654, 4)
mktime_internal,  ---  CALL (ram, 0x13f50, 4)
mktime_internal, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x40, 4)
mktime_internal, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
mktime_internal,  ---  BRANCH (ram, 0x14428, 4)
mktime_internal, (register, 0x58, 4) COPY (const, 0x14660, 4)
mktime_internal,  ---  CALL (ram, 0x10ac4, 4)
rpl_mktime, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (const, 0x14688, 4)
rpl_mktime, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x1468c, 4)
rpl_mktime, (unique, 0x1780, 4) INT_ADD (const, 0x14674, 4) , (const, 0x8, 4)
rpl_mktime, (register, 0x68, 1) COPY (register, 0x62, 1)
rpl_mktime, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x24, 4)
rpl_mktime, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x24, 4)
rpl_mktime, (register, 0x24, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x24, 4)
rpl_mktime, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
rpl_mktime, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
rpl_mktime, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x14690, 4)
rpl_mktime, (unique, 0x8480, 4) INT_ADD (register, 0x24, 4) , (register, 0x2c, 4)
rpl_mktime, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
rpl_mktime, (unique, 0x1780, 4) INT_ADD (const, 0x14680, 4) , (const, 0x8, 4)
rpl_mktime, (register, 0x68, 1) COPY (register, 0x62, 1)
rpl_mktime, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
rpl_mktime, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
rpl_mktime, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
rpl_mktime, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
rpl_mktime, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
rpl_mktime,  ---  BRANCH (ram, 0x14140, 4)
xmalloc, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xmalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xmalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
xmalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmalloc, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmalloc, (register, 0x30, 4) COPY (register, 0x20, 4)
xmalloc, (register, 0x58, 4) COPY (const, 0x146a0, 4)
xmalloc,  ---  CALL (ram, 0x10b24, 4)
xmalloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xmalloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xmalloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xmalloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xmalloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
xmalloc, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
xmalloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
xmalloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
xmalloc, (register, 0x62, 1) COPY (register, 0x66, 1)
xmalloc, (register, 0x61, 1) COPY (register, 0x65, 1)
xmalloc, (register, 0x60, 1) COPY (register, 0x64, 1)
xmalloc, (register, 0x63, 1) COPY (register, 0x67, 1)
xmalloc, (register, 0x2c, 4) CALLOTHER (const, 0x0, 4) , (register, 0x20, 4)
xmalloc, (unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
xmalloc, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
xmalloc, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
xmalloc, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x5, 4)
xmalloc, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
xmalloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (register, 0x66, 1) COPY (register, 0x68, 1)
xmalloc, (register, 0x67, 1) COPY (register, 0x63, 1)
xmalloc, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
xmalloc,  ---  CBRANCH (ram, 0x146b0, 4) , (unique, 0x2680, 1)
xmalloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xmalloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xmalloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xmalloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xmalloc, (register, 0x2c, 4) COPY (const, 0x0, 4)
xmalloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (register, 0x66, 1) COPY (register, 0x68, 1)
xmalloc, (register, 0x67, 1) COPY (register, 0x63, 1)
xmalloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xmalloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xmalloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xmalloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xmalloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xmalloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
xmalloc, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
xmalloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
xmalloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
xmalloc, (register, 0x62, 1) COPY (register, 0x66, 1)
xmalloc, (register, 0x61, 1) COPY (register, 0x65, 1)
xmalloc, (register, 0x60, 1) COPY (register, 0x64, 1)
xmalloc, (register, 0x63, 1) COPY (register, 0x67, 1)
xmalloc, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
xmalloc,  ---  CBRANCH (ram, 0x146b8, 4) , (unique, 0x2680, 1)
xmalloc, (register, 0x80, 4) COPY (register, 0x54, 4)
xmalloc, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmalloc, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmalloc, (register, 0x54, 4) COPY (register, 0x80, 4)
xmalloc, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
xmalloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
xmalloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
xmalloc, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
xmalloc,  ---  RETURN (register, 0x5c, 4)
xmalloc, (register, 0x58, 4) COPY (const, 0x146bc, 4)
xmalloc,  ---  CALL (ram, 0x147a8, 4)
xrealloc, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xrealloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xrealloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xrealloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
xrealloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xrealloc, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xrealloc, (register, 0x30, 4) COPY (register, 0x24, 4)
xrealloc, (register, 0x58, 4) COPY (const, 0x146c8, 4)
xrealloc,  ---  CALL (ram, 0x10ad0, 4)
xrealloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xrealloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xrealloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xrealloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xrealloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
xrealloc, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
xrealloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
xrealloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
xrealloc, (register, 0x62, 1) COPY (register, 0x66, 1)
xrealloc, (register, 0x61, 1) COPY (register, 0x65, 1)
xrealloc, (register, 0x60, 1) COPY (register, 0x64, 1)
xrealloc, (register, 0x63, 1) COPY (register, 0x67, 1)
xrealloc, (register, 0x2c, 4) CALLOTHER (const, 0x0, 4) , (register, 0x20, 4)
xrealloc, (unique, 0x3800, 4) INT_SUB (const, 0x5, 4) , (const, 0x1, 4)
xrealloc, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
xrealloc, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
xrealloc, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x5, 4)
xrealloc, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
xrealloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (register, 0x66, 1) COPY (register, 0x68, 1)
xrealloc, (register, 0x67, 1) COPY (register, 0x63, 1)
xrealloc, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
xrealloc,  ---  CBRANCH (ram, 0x146d8, 4) , (unique, 0x2680, 1)
xrealloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xrealloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xrealloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xrealloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xrealloc, (register, 0x2c, 4) COPY (const, 0x0, 4)
xrealloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (register, 0x66, 1) COPY (register, 0x68, 1)
xrealloc, (register, 0x67, 1) COPY (register, 0x63, 1)
xrealloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xrealloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xrealloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xrealloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xrealloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xrealloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
xrealloc, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
xrealloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
xrealloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
xrealloc, (register, 0x62, 1) COPY (register, 0x66, 1)
xrealloc, (register, 0x61, 1) COPY (register, 0x65, 1)
xrealloc, (register, 0x60, 1) COPY (register, 0x64, 1)
xrealloc, (register, 0x63, 1) COPY (register, 0x67, 1)
xrealloc, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
xrealloc,  ---  CBRANCH (ram, 0x146e0, 4) , (unique, 0x2680, 1)
xrealloc, (register, 0x80, 4) COPY (register, 0x54, 4)
xrealloc, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xrealloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xrealloc, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xrealloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xrealloc, (register, 0x54, 4) COPY (register, 0x80, 4)
xrealloc, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
xrealloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
xrealloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
xrealloc, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
xrealloc,  ---  RETURN (register, 0x5c, 4)
xrealloc, (register, 0x58, 4) COPY (const, 0x146e4, 4)
xrealloc,  ---  CALL (ram, 0x147a8, 4)
x2realloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
x2realloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
x2realloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
x2realloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
x2realloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
x2realloc, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
x2realloc, (register, 0x62, 1) COPY (register, 0x66, 1)
x2realloc, (register, 0x61, 1) COPY (register, 0x65, 1)
x2realloc, (register, 0x60, 1) COPY (register, 0x64, 1)
x2realloc, (register, 0x63, 1) COPY (register, 0x67, 1)
x2realloc, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
x2realloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
x2realloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
x2realloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
x2realloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
x2realloc, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
x2realloc,  ---  CBRANCH (ram, 0x1471c, 4) , (register, 0x61, 1)
x2realloc, (register, 0x28, 4) COPY (const, 0xaaa9, 4)
x2realloc, (unique, 0x3f280, 4) INT_LEFT (const, 0xaaaa, 4) , (const, 0x10, 4)
x2realloc, (unique, 0x3f300, 4) INT_AND (register, 0x28, 4) , (const, 0xffff, 4)
x2realloc, (register, 0x28, 4) INT_OR (unique, 0x3f280, 4) , (unique, 0x3f300, 4)
x2realloc, (register, 0x68, 1) COPY (register, 0x62, 1)
x2realloc, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
x2realloc, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
x2realloc, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
x2realloc, (register, 0x62, 1) COPY (register, 0x66, 1)
x2realloc, (register, 0x61, 1) COPY (register, 0x65, 1)
x2realloc, (register, 0x60, 1) COPY (register, 0x64, 1)
x2realloc, (register, 0x63, 1) COPY (register, 0x67, 1)
x2realloc, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
x2realloc, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
x2realloc, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
x2realloc,  ---  CBRANCH (ram, 0x14704, 4) , (unique, 0x2680, 1)
x2realloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
x2realloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
x2realloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
x2realloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
x2realloc, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (const, 0x1, 4)
x2realloc, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (const, 0x1, 4)
x2realloc, (register, 0x28, 4) INT_ADD (register, 0x2c, 4) , (const, 0x1, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
x2realloc, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
x2realloc, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
x2realloc,  ---  CBRANCH (ram, 0x14708, 4) , (unique, 0x2680, 1)
x2realloc, (unique, 0x3800, 4) INT_SUB (const, 0x1, 4) , (const, 0x1, 4)
x2realloc, (unique, 0x3880, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3800, 4)
x2realloc, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
x2realloc, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3b00, 4) INT_RIGHT (register, 0x28, 4) , (const, 0x1, 4)
x2realloc, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (unique, 0x3b00, 4)
x2realloc, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (unique, 0x3b00, 4)
x2realloc, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x3b00, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
x2realloc, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
x2realloc,  ---  CBRANCH (ram, 0x14734, 4) , (unique, 0x1f00, 1)
x2realloc, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
x2realloc,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
x2realloc, (register, 0x24, 4) COPY (register, 0x2c, 4)
x2realloc, (register, 0x80, 4) COPY (register, 0x54, 4)
x2realloc, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
x2realloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
x2realloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (register, 0x54, 4) COPY (register, 0x80, 4)
x2realloc,  ---  BRANCH (ram, 0x146bc, 4)
x2realloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
x2realloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
x2realloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
x2realloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
x2realloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
x2realloc, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
x2realloc, (register, 0x62, 1) COPY (register, 0x66, 1)
x2realloc, (register, 0x61, 1) COPY (register, 0x65, 1)
x2realloc, (register, 0x60, 1) COPY (register, 0x64, 1)
x2realloc, (register, 0x63, 1) COPY (register, 0x67, 1)
x2realloc, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
x2realloc,  ---  CBRANCH (ram, 0x14724, 4) , (unique, 0x2680, 1)
x2realloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x40, 4) , (const, 0x1f, 4)
x2realloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
x2realloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
x2realloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
x2realloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
x2realloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
x2realloc, (register, 0x2c, 4) COPY (const, 0x40, 4)
x2realloc, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
x2realloc, (register, 0x66, 1) COPY (register, 0x68, 1)
x2realloc, (register, 0x67, 1) COPY (register, 0x63, 1)
x2realloc, (unique, 0x8280, 4) INT_ADD (register, 0x24, 4) , (const, 0x0, 4)
x2realloc,  ---  STORE (const, 0x1a1, 8) , (unique, 0x8280, 4) , (register, 0x2c, 4)
x2realloc, (register, 0x24, 4) COPY (register, 0x2c, 4)
x2realloc, (register, 0x80, 4) COPY (register, 0x54, 4)
x2realloc, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
x2realloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
x2realloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
x2realloc, (register, 0x54, 4) COPY (register, 0x80, 4)
x2realloc,  ---  BRANCH (ram, 0x146bc, 4)
x2realloc, (register, 0x58, 4) COPY (const, 0x14738, 4)
x2realloc,  ---  CALL (ram, 0x147a8, 4)
xzalloc, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xzalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xzalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xzalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
xzalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xzalloc, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xzalloc, (register, 0x30, 4) COPY (register, 0x20, 4)
xzalloc, (register, 0x58, 4) COPY (const, 0x14744, 4)
xzalloc,  ---  CALL (ram, 0x14694, 4)
xzalloc, (register, 0x28, 4) COPY (register, 0x30, 4)
xzalloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xzalloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xzalloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xzalloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xzalloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xzalloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xzalloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xzalloc, (register, 0x24, 4) COPY (const, 0x0, 4)
xzalloc, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
xzalloc, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
xzalloc, (register, 0x66, 1) COPY (register, 0x68, 1)
xzalloc, (register, 0x67, 1) COPY (register, 0x63, 1)
xzalloc, (register, 0x80, 4) COPY (register, 0x54, 4)
xzalloc, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xzalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xzalloc, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xzalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xzalloc, (register, 0x54, 4) COPY (register, 0x80, 4)
xzalloc,  ---  BRANCH (ram, 0x10b90, 4)
xcalloc, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xcalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xcalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xcalloc,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
xcalloc, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xcalloc, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xcalloc, (register, 0x58, 4) COPY (const, 0x1475c, 4)
xcalloc,  ---  CALL (ram, 0x10a4c, 4)
xcalloc, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xcalloc, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xcalloc, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xcalloc, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xcalloc, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xcalloc, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xcalloc, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xcalloc, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
xcalloc, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
xcalloc, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
xcalloc, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
xcalloc, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
xcalloc, (register, 0x62, 1) COPY (register, 0x66, 1)
xcalloc, (register, 0x61, 1) COPY (register, 0x65, 1)
xcalloc, (register, 0x60, 1) COPY (register, 0x64, 1)
xcalloc, (register, 0x63, 1) COPY (register, 0x67, 1)
xcalloc, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
xcalloc, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
xcalloc,  ---  CBRANCH (ram, 0x14764, 4) , (unique, 0x2680, 1)
xcalloc, (register, 0x80, 4) COPY (register, 0x54, 4)
xcalloc, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xcalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xcalloc, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xcalloc, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xcalloc, (register, 0x54, 4) COPY (register, 0x80, 4)
xcalloc, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
xcalloc, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
xcalloc, (register, 0x69, 1) COPY (register, 0xb0, 1)
xcalloc, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
xcalloc,  ---  RETURN (register, 0x5c, 4)
xcalloc, (register, 0x58, 4) COPY (const, 0x14768, 4)
xcalloc,  ---  CALL (ram, 0x147a8, 4)
xmemdup, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xmemdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xmemdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmemdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
xmemdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmemdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
xmemdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmemdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
xmemdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x30, 4) COPY (register, 0x24, 4)
xmemdup, (register, 0x34, 4) COPY (register, 0x20, 4)
xmemdup, (register, 0x20, 4) COPY (register, 0x24, 4)
xmemdup, (register, 0x58, 4) COPY (const, 0x1477c, 4)
xmemdup,  ---  CALL (ram, 0x14694, 4)
xmemdup, (register, 0x24, 4) COPY (register, 0x34, 4)
xmemdup, (register, 0x28, 4) COPY (register, 0x30, 4)
xmemdup, (register, 0x80, 4) COPY (register, 0x54, 4)
xmemdup, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmemdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmemdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmemdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xmemdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xmemdup, (register, 0x54, 4) COPY (register, 0x80, 4)
xmemdup,  ---  BRANCH (ram, 0x10a88, 4)
xstrdup, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xstrdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xstrdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xstrdup,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
xstrdup, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xstrdup, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xstrdup, (register, 0x30, 4) COPY (register, 0x20, 4)
xstrdup, (register, 0x58, 4) COPY (const, 0x14798, 4)
xstrdup,  ---  CALL (ram, 0x10b6c, 4)
xstrdup, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
xstrdup, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xstrdup, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xstrdup, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xstrdup, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xstrdup, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xstrdup, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xstrdup, (register, 0x66, 1) INT_CARRY (register, 0x20, 4) , (const, 0x1, 4)
xstrdup, (register, 0x67, 1) INT_SCARRY (register, 0x20, 4) , (const, 0x1, 4)
xstrdup, (register, 0x24, 4) INT_ADD (register, 0x20, 4) , (const, 0x1, 4)
xstrdup, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
xstrdup, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
xstrdup, (register, 0x20, 4) COPY (register, 0x30, 4)
xstrdup, (register, 0x80, 4) COPY (register, 0x54, 4)
xstrdup, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xstrdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xstrdup, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
xstrdup, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xstrdup, (register, 0x54, 4) COPY (register, 0x80, 4)
xstrdup,  ---  BRANCH (ram, 0x14768, 4)
xalloc_die, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
xalloc_die,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
xalloc_die, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xalloc_die,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
xalloc_die, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
xalloc_die, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
xalloc_die, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
xalloc_die, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
xalloc_die, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
xalloc_die, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
xalloc_die, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
xalloc_die, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
xalloc_die, (register, 0x24, 4) COPY (const, 0x0, 4)
xalloc_die, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x66, 1) COPY (register, 0x68, 1)
xalloc_die, (register, 0x67, 1) COPY (register, 0x63, 1)
xalloc_die, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x147dc, 4)
xalloc_die, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (const, 0x147e0, 4)
xalloc_die, (unique, 0x1780, 4) INT_ADD (const, 0x147b8, 4) , (const, 0x8, 4)
xalloc_die, (register, 0x68, 1) COPY (register, 0x62, 1)
xalloc_die, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (const, 0x147e4, 4)
xalloc_die, (unique, 0x8480, 4) INT_ADD (register, 0x2c, 4) , (register, 0x20, 4)
xalloc_die, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8480, 4)
xalloc_die, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (const, 0x147e8, 4)
xalloc_die, (unique, 0x1780, 4) INT_ADD (const, 0x147c8, 4) , (const, 0x8, 4)
xalloc_die, (register, 0x68, 1) COPY (register, 0x62, 1)
xalloc_die, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x28, 4)
xalloc_die, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x28, 4)
xalloc_die, (register, 0x28, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x28, 4)
xalloc_die, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
xalloc_die, (unique, 0x1780, 4) INT_ADD (const, 0x147cc, 4) , (const, 0x8, 4)
xalloc_die, (register, 0x68, 1) COPY (register, 0x62, 1)
xalloc_die, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x2c, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x2c, 4)
xalloc_die, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
xalloc_die, (unique, 0x8280, 4) INT_ADD (register, 0x20, 4) , (const, 0x0, 4)
xalloc_die, (register, 0x20, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
xalloc_die, (register, 0x58, 4) COPY (const, 0x147d8, 4)
xalloc_die,  ---  CALL (ram, 0x10b00, 4)
xalloc_die, (register, 0x58, 4) COPY (const, 0x147dc, 4)
xalloc_die,  ---  CALL (ram, 0x10c08, 4)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x62, 1) COPY (register, 0x66, 1)
__aeabi_ldivmod, (register, 0x61, 1) COPY (register, 0x65, 1)
__aeabi_ldivmod, (register, 0x60, 1) COPY (register, 0x64, 1)
__aeabi_ldivmod, (register, 0x63, 1) COPY (register, 0x67, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x147f4, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x62, 1) COPY (register, 0x66, 1)
__aeabi_ldivmod, (register, 0x61, 1) COPY (register, 0x65, 1)
__aeabi_ldivmod, (register, 0x60, 1) COPY (register, 0x64, 1)
__aeabi_ldivmod, (register, 0x63, 1) COPY (register, 0x67, 1)
__aeabi_ldivmod, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14818, 4) , (unique, 0x1a80, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x62, 1) COPY (register, 0x66, 1)
__aeabi_ldivmod, (register, 0x61, 1) COPY (register, 0x65, 1)
__aeabi_ldivmod, (register, 0x60, 1) COPY (register, 0x64, 1)
__aeabi_ldivmod, (register, 0x63, 1) COPY (register, 0x67, 1)
__aeabi_ldivmod, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14800, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000000, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x24, 4) COPY (const, 0x80000000, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x66, 1) COPY (register, 0x68, 1)
__aeabi_ldivmod, (register, 0x67, 1) COPY (register, 0x63, 1)
__aeabi_ldivmod, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2280, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14804, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x20, 4) COPY (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x66, 1) COPY (register, 0x68, 1)
__aeabi_ldivmod, (register, 0x67, 1) COPY (register, 0x63, 1)
__aeabi_ldivmod, (unique, 0x2280, 1) INT_NOTEQUAL (register, 0x60, 1) , (register, 0x63, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14814, 4) , (unique, 0x2280, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x1480c, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x62, 1) COPY (register, 0x66, 1)
__aeabi_ldivmod, (register, 0x61, 1) COPY (register, 0x65, 1)
__aeabi_ldivmod, (register, 0x60, 1) COPY (register, 0x64, 1)
__aeabi_ldivmod, (register, 0x63, 1) COPY (register, 0x67, 1)
__aeabi_ldivmod, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14810, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x80000000, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x1, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x1, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x24, 4) INT_NEGATE (const, 0x80000000, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x66, 1) COPY (register, 0x68, 1)
__aeabi_ldivmod, (register, 0x67, 1) COPY (register, 0x63, 1)
__aeabi_ldivmod, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__aeabi_ldivmod, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__aeabi_ldivmod,  ---  CBRANCH (ram, 0x14814, 4) , (unique, 0x2680, 1)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x20, 4) INT_NEGATE (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x66, 1) COPY (register, 0x68, 1)
__aeabi_ldivmod, (register, 0x67, 1) COPY (register, 0x63, 1)
__aeabi_ldivmod,  ---  BRANCH (ram, 0x14834, 4)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_LESSEQUAL (const, 0x8, 4) , (register, 0x54, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SBORROW (register, 0x54, 4) , (const, 0x8, 4)
__aeabi_ldivmod, (register, 0x54, 4) INT_SUB (register, 0x54, 4) , (const, 0x8, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__aeabi_ldivmod,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__aeabi_ldivmod, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_ldivmod,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x54, 4)
__aeabi_ldivmod, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_ldivmod, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_ldivmod, (register, 0x58, 4) COPY (const, 0x14824, 4)
__aeabi_ldivmod,  ---  CALL (ram, 0x14844, 4)
__aeabi_ldivmod, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x4, 4)
__aeabi_ldivmod, (register, 0x58, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
__aeabi_ldivmod, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
__aeabi_ldivmod, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_ldivmod, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_ldivmod, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_ldivmod, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_ldivmod, (register, 0x66, 1) INT_CARRY (register, 0x54, 4) , (const, 0x8, 4)
__aeabi_ldivmod, (register, 0x67, 1) INT_SCARRY (register, 0x54, 4) , (const, 0x8, 4)
__aeabi_ldivmod, (register, 0x54, 4) INT_ADD (register, 0x54, 4) , (const, 0x8, 4)
__aeabi_ldivmod, (register, 0x64, 1) INT_SLESS (register, 0x54, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x65, 1) INT_EQUAL (register, 0x54, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x80, 4) COPY (register, 0x54, 4)
__aeabi_ldivmod, (register, 0x28, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__aeabi_ldivmod, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_ldivmod, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__aeabi_ldivmod, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_ldivmod, (register, 0x54, 4) COPY (register, 0x80, 4)
__aeabi_ldivmod, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
__aeabi_ldivmod, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__aeabi_ldivmod, (register, 0x69, 1) COPY (register, 0xb0, 1)
__aeabi_ldivmod, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
__aeabi_ldivmod,  ---  RETURN (register, 0x5c, 4)
__aeabi_idiv0, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__aeabi_idiv0,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__aeabi_idiv0, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_idiv0,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x24, 4)
__aeabi_idiv0, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_idiv0, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_idiv0, (unique, 0x2e80, 4) INT_RIGHT (const, 0x8, 4) , (const, 0x1f, 4)
__aeabi_idiv0, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_idiv0, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__aeabi_idiv0, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__aeabi_idiv0, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__aeabi_idiv0, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__aeabi_idiv0, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__aeabi_idiv0, (register, 0x20, 4) COPY (const, 0x8, 4)
__aeabi_idiv0, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_idiv0, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__aeabi_idiv0, (register, 0x66, 1) COPY (register, 0x68, 1)
__aeabi_idiv0, (register, 0x67, 1) COPY (register, 0x63, 1)
__aeabi_idiv0, (register, 0x58, 4) COPY (const, 0x14840, 4)
__aeabi_idiv0,  ---  CALL (ram, 0x10a58, 4)
__aeabi_idiv0, (register, 0x80, 4) COPY (register, 0x54, 4)
__aeabi_idiv0, (register, 0x24, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__aeabi_idiv0, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_idiv0, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__aeabi_idiv0, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__aeabi_idiv0, (register, 0x54, 4) COPY (register, 0x80, 4)
__aeabi_idiv0, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__aeabi_idiv0, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__aeabi_idiv0, (register, 0x69, 1) COPY (register, 0xb0, 1)
__aeabi_idiv0, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__aeabi_idiv0,  ---  RETURN (register, 0x5c, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x30, 4) COPY (register, 0x28, 4)
__gnu_ldivmod_helper, (register, 0x38, 4) COPY (register, 0x20, 4)
__gnu_ldivmod_helper, (register, 0x3c, 4) COPY (register, 0x24, 4)
__gnu_ldivmod_helper, (register, 0x34, 4) COPY (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x58, 4) COPY (const, 0x1485c, 4)
__gnu_ldivmod_helper,  ---  CALL (ram, 0x148bc, 4)
__gnu_ldivmod_helper, (register, 0x2c, 4) INT_MULT (register, 0x30, 4) , (register, 0x24, 4)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x3e780, 4) INT_MULT (register, 0x20, 4) , (register, 0x34, 4)
__gnu_ldivmod_helper, (register, 0x34, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x75f00, 8) INT_ZEXT (register, 0x20, 4)
__gnu_ldivmod_helper, (unique, 0x76000, 8) INT_ZEXT (register, 0x30, 4)
__gnu_ldivmod_helper, (unique, 0x76100, 8) INT_MULT (unique, 0x75f00, 8) , (unique, 0x76000, 8)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (unique, 0x76100, 8) , (const, 0x0, 8)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (unique, 0x76100, 8) , (const, 0x0, 8)
__gnu_ldivmod_helper, (register, 0x28, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x2c, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x4, 4)
__gnu_ldivmod_helper, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
__gnu_ldivmod_helper, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
__gnu_ldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_ldivmod_helper, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x38, 4)
__gnu_ldivmod_helper, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x28, 4)
__gnu_ldivmod_helper, (register, 0x28, 4) INT_SUB (register, 0x38, 4) , (register, 0x28, 4)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x62, 1) COPY (register, 0x66, 1)
__gnu_ldivmod_helper, (register, 0x61, 1) COPY (register, 0x65, 1)
__gnu_ldivmod_helper, (register, 0x60, 1) COPY (register, 0x64, 1)
__gnu_ldivmod_helper, (register, 0x63, 1) COPY (register, 0x67, 1)
__gnu_ldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_ldivmod_helper, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x2c, 4) INT_ADD (register, 0x34, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_ldivmod_helper, (unique, 0x52f00, 4) INT_NEGATE (register, 0x2c, 4)
__gnu_ldivmod_helper, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
__gnu_ldivmod_helper, (unique, 0x37b80, 1) INT_CARRY (register, 0x3c, 4) , (unique, 0x52f00, 4)
__gnu_ldivmod_helper, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
__gnu_ldivmod_helper, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
__gnu_ldivmod_helper, (unique, 0x37d00, 4) INT_ADD (register, 0x3c, 4) , (unique, 0x52f00, 4)
__gnu_ldivmod_helper, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
__gnu_ldivmod_helper, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x3c, 4)
__gnu_ldivmod_helper, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
__gnu_ldivmod_helper, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
__gnu_ldivmod_helper, (unique, 0x37f80, 4) INT_ADD (register, 0x3c, 4) , (unique, 0x52f00, 4)
__gnu_ldivmod_helper, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
__gnu_ldivmod_helper, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
__gnu_ldivmod_helper, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
__gnu_ldivmod_helper, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x38300, 4) INT_RIGHT (register, 0x3c, 4) , (const, 0x1f, 4)
__gnu_ldivmod_helper, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52f00, 4) , (const, 0x1f, 4)
__gnu_ldivmod_helper, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
__gnu_ldivmod_helper, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
__gnu_ldivmod_helper, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
__gnu_ldivmod_helper, (unique, 0x52f80, 1) BOOL_NEGATE (register, 0x62, 1)
__gnu_ldivmod_helper, (unique, 0x53000, 4) INT_ZEXT (unique, 0x52f80, 1)
__gnu_ldivmod_helper, (unique, 0x53080, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x53000, 4)
__gnu_ldivmod_helper, (register, 0x2c, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x53080, 4)
__gnu_ldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x9180, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
__gnu_ldivmod_helper, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) COPY (register, 0x54, 4)
__gnu_ldivmod_helper, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_ldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_ldivmod_helper, (register, 0x54, 4) COPY (register, 0x80, 4)
__gnu_ldivmod_helper, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__gnu_ldivmod_helper, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__gnu_ldivmod_helper, (register, 0x69, 1) COPY (register, 0xb0, 1)
__gnu_ldivmod_helper, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__gnu_ldivmod_helper,  ---  RETURN (register, 0x5c, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x3c, 4) COPY (register, 0x28, 4)
__gnu_uldivmod_helper, (register, 0x30, 4) COPY (register, 0x20, 4)
__gnu_uldivmod_helper, (register, 0x34, 4) COPY (register, 0x24, 4)
__gnu_uldivmod_helper, (register, 0x38, 4) COPY (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x58, 4) COPY (const, 0x14898, 4)
__gnu_uldivmod_helper,  ---  CALL (ram, 0x14c8c, 4)
__gnu_uldivmod_helper, (register, 0x38, 4) INT_MULT (register, 0x20, 4) , (register, 0x38, 4)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x75f00, 8) INT_ZEXT (register, 0x3c, 4)
__gnu_uldivmod_helper, (unique, 0x76000, 8) INT_ZEXT (register, 0x20, 4)
__gnu_uldivmod_helper, (unique, 0x76100, 8) INT_MULT (unique, 0x75f00, 8) , (unique, 0x76000, 8)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (unique, 0x76100, 8) , (const, 0x0, 8)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (unique, 0x76100, 8) , (const, 0x0, 8)
__gnu_uldivmod_helper, (register, 0x28, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x2c, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x4, 4)
__gnu_uldivmod_helper, (unique, 0x3e780, 4) INT_MULT (register, 0x3c, 4) , (register, 0x24, 4)
__gnu_uldivmod_helper, (register, 0x38, 4) INT_ADD (unique, 0x3e780, 4) , (register, 0x38, 4)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_uldivmod_helper, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x30, 4)
__gnu_uldivmod_helper, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x28, 4)
__gnu_uldivmod_helper, (register, 0x28, 4) INT_SUB (register, 0x30, 4) , (register, 0x28, 4)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x62, 1) COPY (register, 0x66, 1)
__gnu_uldivmod_helper, (register, 0x61, 1) COPY (register, 0x65, 1)
__gnu_uldivmod_helper, (register, 0x60, 1) COPY (register, 0x64, 1)
__gnu_uldivmod_helper, (register, 0x63, 1) COPY (register, 0x67, 1)
__gnu_uldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_uldivmod_helper, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x2c, 4) INT_ADD (register, 0x38, 4) , (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x8280, 4) INT_ADD (register, 0x54, 4) , (const, 0x18, 4)
__gnu_uldivmod_helper, (register, 0x50, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8280, 4)
__gnu_uldivmod_helper, (register, 0x68, 1) COPY (register, 0x62, 1)
__gnu_uldivmod_helper, (unique, 0x52f00, 4) INT_NEGATE (register, 0x2c, 4)
__gnu_uldivmod_helper, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
__gnu_uldivmod_helper, (unique, 0x37b80, 1) INT_CARRY (register, 0x34, 4) , (unique, 0x52f00, 4)
__gnu_uldivmod_helper, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
__gnu_uldivmod_helper, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
__gnu_uldivmod_helper, (unique, 0x37d00, 4) INT_ADD (register, 0x34, 4) , (unique, 0x52f00, 4)
__gnu_uldivmod_helper, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
__gnu_uldivmod_helper, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (register, 0x34, 4)
__gnu_uldivmod_helper, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
__gnu_uldivmod_helper, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
__gnu_uldivmod_helper, (unique, 0x37f80, 4) INT_ADD (register, 0x34, 4) , (unique, 0x52f00, 4)
__gnu_uldivmod_helper, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
__gnu_uldivmod_helper, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
__gnu_uldivmod_helper, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
__gnu_uldivmod_helper, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x38300, 4) INT_RIGHT (register, 0x34, 4) , (const, 0x1f, 4)
__gnu_uldivmod_helper, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x38480, 4) INT_RIGHT (unique, 0x52f00, 4) , (const, 0x1f, 4)
__gnu_uldivmod_helper, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
__gnu_uldivmod_helper, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
__gnu_uldivmod_helper, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
__gnu_uldivmod_helper, (unique, 0x52f80, 1) BOOL_NEGATE (register, 0x62, 1)
__gnu_uldivmod_helper, (unique, 0x53000, 4) INT_ZEXT (unique, 0x52f80, 1)
__gnu_uldivmod_helper, (unique, 0x53080, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x53000, 4)
__gnu_uldivmod_helper, (register, 0x2c, 4) INT_SUB (register, 0x34, 4) , (unique, 0x53080, 4)
__gnu_uldivmod_helper, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x9180, 4) INT_ADD (register, 0x50, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (unique, 0x6a600, 4) COPY (unique, 0x9180, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x28, 4)
__gnu_uldivmod_helper, (unique, 0x6a600, 4) INT_ADD (unique, 0x6a600, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper,  ---  STORE (const, 0x1a1, 8) , (unique, 0x6a600, 4) , (register, 0x2c, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) COPY (register, 0x54, 4)
__gnu_uldivmod_helper, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__gnu_uldivmod_helper, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__gnu_uldivmod_helper, (register, 0x54, 4) COPY (register, 0x80, 4)
__gnu_uldivmod_helper, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__gnu_uldivmod_helper, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__gnu_uldivmod_helper, (register, 0x69, 1) COPY (register, 0xb0, 1)
__gnu_uldivmod_helper, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__gnu_uldivmod_helper,  ---  RETURN (register, 0x5c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__divdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x3c, 4) COPY (register, 0x28, 4)
__divdi3, (register, 0x34, 4) COPY (register, 0x2c, 4)
__divdi3, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
__divdi3,  ---  CBRANCH (ram, 0x148d0, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x40, 4) COPY (register, 0x20, 4)
__divdi3, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
__divdi3,  ---  CBRANCH (ram, 0x148d4, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x38, 4) COPY (register, 0x24, 4)
__divdi3, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2180, 1)
__divdi3,  ---  CBRANCH (ram, 0x148d8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x58, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
__divdi3,  ---  CBRANCH (ram, 0x148f0, 4) , (unique, 0x2180, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x20, 4)
__divdi3, (register, 0x20, 4) INT_SUB (const, 0x0, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x58, 4) INT_NEGATE (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (unique, 0x4e400, 4) INT_NEGATE (register, 0x24, 4)
__divdi3, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x37b80, 1) INT_CARRY (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
__divdi3, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
__divdi3, (unique, 0x37d00, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (unique, 0x4e400, 4)
__divdi3, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
__divdi3, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
__divdi3, (unique, 0x37f80, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
__divdi3, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
__divdi3, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38300, 4) INT_RIGHT (unique, 0x4e400, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38480, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
__divdi3, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
__divdi3, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
__divdi3, (unique, 0x4e480, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x4e500, 4) INT_ZEXT (unique, 0x4e480, 1)
__divdi3, (unique, 0x4e580, 4) INT_ADD (register, 0x24, 4) , (unique, 0x4e500, 4)
__divdi3, (register, 0x24, 4) INT_SUB (const, 0x0, 4) , (unique, 0x4e580, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x40, 4) COPY (register, 0x20, 4)
__divdi3, (register, 0x38, 4) COPY (register, 0x24, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2180, 1) INT_EQUAL (register, 0x60, 1) , (register, 0x63, 1)
__divdi3,  ---  CBRANCH (ram, 0x1490c, 4) , (unique, 0x2180, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x28, 4)
__divdi3, (register, 0x28, 4) INT_SUB (const, 0x0, 4) , (register, 0x28, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (unique, 0x4e400, 4) INT_NEGATE (register, 0x2c, 4)
__divdi3, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x37b80, 1) INT_CARRY (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
__divdi3, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
__divdi3, (unique, 0x37d00, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (unique, 0x4e400, 4)
__divdi3, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
__divdi3, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
__divdi3, (unique, 0x37f80, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
__divdi3, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
__divdi3, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38300, 4) INT_RIGHT (unique, 0x4e400, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38480, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
__divdi3, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
__divdi3, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
__divdi3, (unique, 0x4e480, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x4e500, 4) INT_ZEXT (unique, 0x4e480, 1)
__divdi3, (unique, 0x4e580, 4) INT_ADD (register, 0x2c, 4) , (unique, 0x4e500, 4)
__divdi3, (register, 0x2c, 4) INT_SUB (const, 0x0, 4) , (unique, 0x4e580, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x3c, 4) COPY (register, 0x28, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x58, 4) INT_NEGATE (register, 0x58, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x34, 4) COPY (register, 0x2c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (register, 0x2c, 4) COPY (register, 0x3c, 4)
__divdi3, (register, 0x24, 4) COPY (register, 0x40, 4)
__divdi3, (register, 0x44, 4) COPY (register, 0x38, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b48, 4) , (unique, 0x1a80, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x3c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x38, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x38, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149dc, 4) , (unique, 0x2080, 1)
__divdi3, (register, 0x28, 4) CALLOTHER (const, 0x0, 4) , (register, 0x3c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14934, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (const, 0x20, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x20, 4) INT_SUB (const, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14938, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x28, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x3c, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x2c, 4) COPY (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x1493c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x20, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14940, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x28, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x38, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x44, 4) INT_OR (register, 0x20, 4) , (unique, 0x5080, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
__divdi3, (register, 0x38, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
__divdi3, (register, 0x34, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x1494c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x28, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x40, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x24, 4) COPY (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x44, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x34, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x30, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x34, 4) , (register, 0x30, 4)
__divdi3, (register, 0x44, 4) INT_SUB (register, 0x44, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x20, 4) INT_MULT (register, 0x38, 4) , (register, 0x30, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x10, 4)
__divdi3, (register, 0x50, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x44, 4) , (const, 0x10, 4)
__divdi3, (register, 0x28, 4) INT_OR (register, 0x50, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14990, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14970, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14974, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x1497c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14980, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14988, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x1498c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x1, 4)
__divdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14990, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x2, 4)
__divdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x20, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x24, 4)
__divdi3, (register, 0x24, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x20, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x34, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x28, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x34, 4) , (register, 0x28, 4)
__divdi3, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x50, 4) INT_MULT (register, 0x38, 4) , (register, 0x28, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x10, 4)
__divdi3, (register, 0x24, 4) INT_OR (register, 0x24, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x149d4, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x149b8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x149bc, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x50, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x50, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x149c4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x149c8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x24, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149d0, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x149d4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x10, 4)
__divdi3, (register, 0x2c, 4) INT_OR (register, 0x28, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3,  ---  BRANCH (ram, 0x14c60, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x3c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149e4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149e8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x2c, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x34, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x2c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (register, 0x50, 4) CALLOTHER (const, 0x0, 4) , (register, 0x2c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149f4, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x38, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x38, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x149f8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3,  ---  CBRANCH (ram, 0x14ab0, 4) , (register, 0x61, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x2c, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x2c, 4) COPY (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (const, 0x20, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x50, 4)
__divdi3, (register, 0x20, 4) INT_SUB (const, 0x20, 4) , (register, 0x50, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x40, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x24, 4) COPY (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x34, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
__divdi3, (register, 0x3c, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x20, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x20, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x38, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x20, 4) INT_OR (register, 0x20, 4) , (unique, 0x5080, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x34, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x3c, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x38, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x3c, 4) , (register, 0x38, 4)
__divdi3, (register, 0x50, 4) INT_SUB (register, 0x34, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x40, 4) INT_MULT (register, 0x28, 4) , (register, 0x38, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x20, 4) , (const, 0x10, 4)
__divdi3, (register, 0x34, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x10, 4)
__divdi3, (register, 0x30, 4) INT_OR (register, 0x34, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a60, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a40, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a44, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a4c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a50, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a58, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a5c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x38, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x1, 4)
__divdi3, (register, 0x38, 4) INT_SUB (register, 0x38, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a60, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x38, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x2, 4)
__divdi3, (register, 0x38, 4) INT_SUB (register, 0x38, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0x40, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x20, 4)
__divdi3, (register, 0x20, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x30, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x3c, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x50, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x3c, 4) , (register, 0x50, 4)
__divdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x34, 4) INT_MULT (register, 0x28, 4) , (register, 0x50, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x10, 4)
__divdi3, (register, 0x28, 4) INT_OR (register, 0x20, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14aa8, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a88, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a8c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a94, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14a98, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) INT_AND (register, 0x20, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x20, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14aa0, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14aa4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
__divdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14aa8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x2, 4)
__divdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (register, 0x34, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x38, 4) , (const, 0x10, 4)
__divdi3, (register, 0x50, 4) INT_OR (register, 0x50, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x2c, 4) , (const, 0x10, 4)
__divdi3, (register, 0x38, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x2c, 4)
__divdi3, (register, 0x3c, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x10, 4)
__divdi3, (register, 0x30, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x28, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x38, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x34, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x38, 4) , (register, 0x34, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x20, 4) INT_MULT (register, 0x3c, 4) , (register, 0x34, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x10, 4)
__divdi3, (register, 0x28, 4) INT_OR (register, 0x30, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14afc, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14adc, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x30, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14ae0, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x30, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14ae8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x30, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14aec, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x30, 4) INT_AND (register, 0x30, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14af4, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14af8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x1, 4)
__divdi3, (register, 0x34, 4) INT_SUB (register, 0x34, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14afc, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (const, 0x2, 4)
__divdi3, (register, 0x34, 4) INT_SUB (register, 0x34, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x20, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x20, 4) INT_SUB (register, 0x28, 4) , (register, 0x20, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x24, 4)
__divdi3, (register, 0x24, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x20, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x38, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x28, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x38, 4) , (register, 0x28, 4)
__divdi3, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x30, 4) INT_MULT (register, 0x3c, 4) , (register, 0x28, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x10, 4)
__divdi3, (register, 0x24, 4) INT_OR (register, 0x24, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x30, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x30, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b40, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b24, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b28, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x30, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x30, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b30, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b34, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x24, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b3c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x1, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b40, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x2, 4)
__divdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x10, 4)
__divdi3, (register, 0x2c, 4) INT_OR (register, 0x28, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3,  ---  BRANCH (ram, 0x14c70, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x38, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x38, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c68, 4) , (unique, 0x1f00, 1)
__divdi3, (register, 0x50, 4) CALLOTHER (const, 0x0, 4) , (register, 0x34, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b7c, 4) , (unique, 0x1a80, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x38, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x34, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x38, 4) , (register, 0x34, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b64, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x3c, 4) , (register, 0x40, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (register, 0x3c, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x40, 4) , (register, 0x3c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b68, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x40, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b6c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x40, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14b70, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c70, 4) , (register, 0x62, 1)
__divdi3, (register, 0x50, 4) COPY (register, 0x40, 4)
__divdi3,  ---  BRANCH (ram, 0x14c6c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (const, 0x20, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x50, 4)
__divdi3, (register, 0x24, 4) INT_SUB (const, 0x20, 4) , (register, 0x50, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x24, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x44, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x34, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x44, 4) INT_OR (register, 0x44, 4) , (unique, 0x5080, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x24, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x2c, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x44, 4)
__divdi3, (register, 0x4c, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x44, 4) , (const, 0x10, 4)
__divdi3, (register, 0x30, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x5180, 4) INT_AND (register, 0x24, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5200, 4)
__divdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__divdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x5180, 4)
__divdi3, (register, 0x24, 4) COPY (unique, 0x5780, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x2c, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x30, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x48, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x38, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x28, 4) INT_OR (register, 0x24, 4) , (unique, 0x5080, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x30, 4) , (register, 0x48, 4)
__divdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x24, 4) INT_MULT (register, 0x4c, 4) , (register, 0x48, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3800, 4)
__divdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x28, 4) , (const, 0x10, 4)
__divdi3, (register, 0x38, 4) COPY (unique, 0x3b00, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x2c, 4) , (const, 0x10, 4)
__divdi3, (register, 0x34, 4) INT_OR (register, 0x38, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x3c, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x3c, 4) COPY (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3,  ---  CBRANCH (ram, 0x14be4, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14bc4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14bc8, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14bd0, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14bd4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14bdc, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (register, 0x44, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14be0, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x48, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x1, 4)
__divdi3, (register, 0x48, 4) INT_SUB (register, 0x48, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14be4, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x48, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x2, 4)
__divdi3, (register, 0x48, 4) INT_SUB (register, 0x48, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x48, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x48, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (register, 0x34, 4) INT_SUB (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x34, 4)
__divdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x30, 4)
__divdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__divdi3, (register, 0x2c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__divdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x30, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x34, 4) INT_SUB (register, 0x34, 4) , (unique, 0x3e880, 4)
__divdi3, (register, 0x4c, 4) INT_MULT (register, 0x4c, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x7100, 4) COPY (register, 0x28, 4)
__divdi3, (register, 0x30, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x34, 4) , (const, 0x10, 4)
__divdi3, (register, 0x24, 4) INT_OR (register, 0x30, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c2c, 4) , (register, 0x62, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c0c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x28, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c10, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x28, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c18, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x28, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c1c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x28, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c24, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_CARRY (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x67, 1) INT_SCARRY (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x24, 4) INT_ADD (register, 0x24, 4) , (register, 0x44, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c28, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c2c, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2, 4)
__divdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__divdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x48, 4) , (unique, 0x3280, 4)
__divdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__divdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x48, 4) , (const, 0x10, 4)
__divdi3, (register, 0x2c, 4) INT_OR (register, 0x2c, 4) , (unique, 0x3580, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x4c, 4) , (register, 0x24, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (register, 0x4c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x75f00, 8) INT_ZEXT (register, 0x3c, 4)
__divdi3, (unique, 0x76000, 8) INT_ZEXT (register, 0x2c, 4)
__divdi3, (unique, 0x76100, 8) INT_MULT (unique, 0x75f00, 8) , (unique, 0x76000, 8)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x76100, 8) , (const, 0x0, 8)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x76100, 8) , (const, 0x0, 8)
__divdi3, (register, 0x30, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x0, 4)
__divdi3, (register, 0x34, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x4, 4)
__divdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x34, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x34, 4) , (register, 0x24, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c5c, 4) , (unique, 0x1f00, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c44, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) COPY (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c48, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x20, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x4a80, 4) INT_AND (register, 0x50, 4) , (const, 0xff, 4)
__divdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__divdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x40, 4) , (unique, 0x4b00, 4)
__divdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__divdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x40, 4) , (unique, 0x4a80, 4)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x5080, 4) , (register, 0x30, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (unique, 0x5080, 4)
__divdi3, (unique, 0x3bb80, 4) INT_SUB (register, 0x30, 4) , (unique, 0x5080, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3bb80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3bb80, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c50, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c54, 4) , (unique, 0x2680, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) INT_AND (register, 0x20, 4) , (const, 0x1, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c70, 4) , (register, 0x61, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3,  ---  BRANCH (ram, 0x14c70, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__divdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__divdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__divdi3, (register, 0x2c, 4) COPY (register, 0x50, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x58, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x58, 4) , (const, 0x0, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (register, 0x20, 4) COPY (register, 0x2c, 4)
__divdi3, (register, 0x24, 4) COPY (register, 0x50, 4)
__divdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__divdi3,  ---  CBRANCH (ram, 0x14c80, 4) , (unique, 0x2680, 1)
__divdi3, (register, 0x80, 4) COPY (register, 0x54, 4)
__divdi3, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x54, 4) COPY (register, 0x80, 4)
__divdi3, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__divdi3, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__divdi3, (register, 0x69, 1) COPY (register, 0xb0, 1)
__divdi3, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__divdi3,  ---  RETURN (register, 0x5c, 4)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__divdi3, (register, 0x67, 1) INT_SBORROW (const, 0x0, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x20, 4) INT_SUB (const, 0x0, 4) , (register, 0x2c, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__divdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__divdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__divdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__divdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__divdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__divdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__divdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__divdi3, (unique, 0x4e400, 4) INT_NEGATE (register, 0x50, 4)
__divdi3, (unique, 0x37b00, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x0, 1)
__divdi3, (unique, 0x37b80, 1) INT_CARRY (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37c00, 1) BOOL_AND (unique, 0x37b00, 1) , (unique, 0x37b80, 1)
__divdi3, (unique, 0x37c80, 1) INT_EQUAL (register, 0x62, 1) , (const, 0x1, 1)
__divdi3, (unique, 0x37d00, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x37d80, 4) INT_ADD (unique, 0x37d00, 4) , (const, 0x1, 4)
__divdi3, (unique, 0x37e00, 1) INT_LESSEQUAL (unique, 0x37d80, 4) , (unique, 0x4e400, 4)
__divdi3, (unique, 0x37e80, 1) BOOL_AND (unique, 0x37c80, 1) , (unique, 0x37e00, 1)
__divdi3, (register, 0x66, 1) BOOL_OR (unique, 0x37c00, 1) , (unique, 0x37e80, 1)
__divdi3, (unique, 0x37f80, 4) INT_ADD (unique, 0x4e400, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38000, 4) INT_ZEXT (register, 0x62, 1)
__divdi3, (unique, 0x38100, 4) INT_ADD (unique, 0x37f80, 4) , (unique, 0x38000, 4)
__divdi3, (unique, 0x38180, 4) INT_RIGHT (unique, 0x38100, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38280, 1) INT_NOTEQUAL (unique, 0x38180, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38300, 4) INT_RIGHT (unique, 0x4e400, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38400, 1) INT_NOTEQUAL (unique, 0x38300, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38480, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__divdi3, (unique, 0x38580, 1) INT_NOTEQUAL (unique, 0x38480, 4) , (const, 0x0, 4)
__divdi3, (unique, 0x38600, 1) INT_EQUAL (unique, 0x38400, 1) , (unique, 0x38580, 1)
__divdi3, (unique, 0x38680, 1) INT_NOTEQUAL (unique, 0x38280, 1) , (unique, 0x38400, 1)
__divdi3, (register, 0x67, 1) BOOL_AND (unique, 0x38600, 1) , (unique, 0x38680, 1)
__divdi3, (unique, 0x4e480, 1) BOOL_NEGATE (register, 0x62, 1)
__divdi3, (unique, 0x4e500, 4) INT_ZEXT (unique, 0x4e480, 1)
__divdi3, (unique, 0x4e580, 4) INT_ADD (register, 0x50, 4) , (unique, 0x4e500, 4)
__divdi3, (register, 0x24, 4) INT_SUB (const, 0x0, 4) , (unique, 0x4e580, 4)
__divdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__divdi3, (register, 0x80, 4) COPY (register, 0x54, 4)
__divdi3, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__divdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__divdi3, (register, 0x54, 4) COPY (register, 0x80, 4)
__divdi3, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__divdi3, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__divdi3, (register, 0x69, 1) COPY (register, 0xb0, 1)
__divdi3, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__divdi3,  ---  RETURN (register, 0x5c, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x4c, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x48, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ecc, 4) , (unique, 0x1a80, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (register, 0x58, 4) COPY (register, 0x28, 4)
__udivdi3, (register, 0x38, 4) COPY (register, 0x20, 4)
__udivdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d60, 4) , (unique, 0x2080, 1)
__udivdi3, (register, 0x2c, 4) CALLOTHER (const, 0x0, 4) , (register, 0x28, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (register, 0x3c, 4) COPY (register, 0x24, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cb8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (const, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (const, 0x20, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cbc, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x28, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x58, 4) COPY (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cc0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x3c, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x3c, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cc4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x24, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x3c, 4) INT_OR (register, 0x3c, 4) , (unique, 0x5080, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x58, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x30, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ccc, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x2c, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x38, 4) COPY (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x58, 4)
__udivdi3, (register, 0x20, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x3c, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x30, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x50, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x28, 4) INT_MULT (register, 0x20, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x24, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x2c, 4) INT_OR (register, 0x24, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d14, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cf4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14cf8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d00, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d04, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) INT_AND (register, 0x24, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d0c, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x2c, 4) INT_ADD (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d10, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d14, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x28, 4) INT_SUB (register, 0x2c, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x38, 4)
__udivdi3, (register, 0x38, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x28, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x30, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x2c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x30, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x28, 4) INT_SUB (register, 0x28, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x24, 4) INT_MULT (register, 0x20, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x28, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x28, 4) INT_OR (register, 0x38, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d58, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x28, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x28, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x28, 4) INT_ADD (register, 0x28, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d3c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x58, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d40, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x58, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x28, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d48, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d4c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d54, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d58, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x2c, 4) INT_SUB (register, 0x2c, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x50, 4) INT_OR (register, 0x2c, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3,  ---  BRANCH (ram, 0x14fe8, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d68, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x58, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d6c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x58, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x28, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x58, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (register, 0x40, 4) CALLOTHER (const, 0x0, 4) , (register, 0x58, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d78, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x58, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x30, 4) INT_SUB (register, 0x24, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14d7c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e34, 4) , (register, 0x61, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x40, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x58, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x58, 4) COPY (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (const, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x34, 4) INT_SUB (const, 0x20, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x58, 4)
__udivdi3, (register, 0x30, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x34, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x44, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x58, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x34, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x34, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x40, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x24, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x34, 4) INT_OR (register, 0x34, 4) , (unique, 0x5080, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x44, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x2c, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x24, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x2c, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x44, 4) INT_SUB (register, 0x44, 4) , (unique, 0x3e880, 4)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x40, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x38, 4) COPY (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x50, 4) INT_MULT (register, 0x30, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x34, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x34, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x40, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x44, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x3c, 4) INT_OR (register, 0x40, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14de4, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14dc4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14dc8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14dd0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14dd4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x28, 4) INT_AND (register, 0x28, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ddc, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14de0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14de4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x24, 4) INT_SUB (register, 0x24, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x34, 4)
__udivdi3, (register, 0x34, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x3c, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x2c, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x40, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x2c, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x30, 4) INT_MULT (register, 0x30, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x50, 4) INT_OR (register, 0x34, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e2c, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e0c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e10, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e18, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e1c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e24, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x50, 4) INT_ADD (register, 0x50, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e28, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x40, 4) INT_SUB (register, 0x40, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e2c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x40, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x40, 4) INT_SUB (register, 0x40, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x30, 4) INT_SUB (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x24, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x24, 4) INT_OR (register, 0x40, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x58, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x58, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x28, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x58, 4)
__udivdi3, (register, 0x34, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x38, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x30, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x28, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x20, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x28, 4) , (register, 0x20, 4)
__udivdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x50, 4) INT_MULT (register, 0x34, 4) , (register, 0x20, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x30, 4) INT_OR (register, 0x2c, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e80, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e60, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e64, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e6c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e70, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e78, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e7c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14e80, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x20, 4) INT_SUB (register, 0x20, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x50, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x38, 4)
__udivdi3, (register, 0x38, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x30, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x28, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x50, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x28, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x30, 4) INT_SUB (register, 0x30, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x2c, 4) INT_MULT (register, 0x34, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x30, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x30, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x38, 4) INT_OR (register, 0x38, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x38, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x2c, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x38, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ec4, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x38, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x38, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x38, 4) INT_ADD (register, 0x38, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ea8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x58, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14eac, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x58, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x38, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x2c, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x38, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14eb4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x38, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14eb8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x38, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x38, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x38, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ec0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ec4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x50, 4) INT_OR (register, 0x50, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3,  ---  BRANCH (ram, 0x14ff8, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x24, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x24, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ff0, 4) , (unique, 0x1f00, 1)
__udivdi3, (register, 0x48, 4) CALLOTHER (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x48, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x48, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x48, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f04, 4) , (unique, 0x1a80, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x2c, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (register, 0x2c, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x24, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ee8, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x28, 4) , (register, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x20, 4) , (register, 0x28, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x20, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14eec, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x20, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ef0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x20, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x20, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ef4, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x24, 4) COPY (register, 0x48, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ef8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x50, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ff8, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x24, 4) COPY (register, 0x20, 4)
__udivdi3,  ---  BRANCH (ram, 0x14ff4, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x20, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x48, 4) , (const, 0x20, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (const, 0x20, 4) , (register, 0x48, 4)
__udivdi3, (register, 0x58, 4) INT_SUB (const, 0x20, 4) , (register, 0x48, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x58, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x44, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x48, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x2c, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x2c, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x44, 4) INT_OR (register, 0x44, 4) , (unique, 0x5080, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x44, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x58, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x50, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x44, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x44, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x2c, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x5180, 4) INT_AND (register, 0x58, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x5200, 4) INT_SUB (unique, 0x5180, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5280, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5200, 4)
__udivdi3, (unique, 0x5380, 4) INT_AND (unique, 0x5280, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x5400, 1) INT_EQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5480, 1) BOOL_AND (unique, 0x5400, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x5500, 1) INT_NOTEQUAL (unique, 0x5180, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5580, 1) SUBPIECE (unique, 0x5380, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x5600, 1) BOOL_AND (unique, 0x5500, 1) , (unique, 0x5580, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x5480, 1) , (unique, 0x5600, 1)
__udivdi3, (unique, 0x5780, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x5180, 4)
__udivdi3, (register, 0x58, 4) COPY (unique, 0x5780, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x50, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x2c, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x4c, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x48, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x24, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x24, 4) INT_OR (register, 0x58, 4) , (unique, 0x5080, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x44, 4)
__udivdi3, (register, 0x58, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x2c, 4) , (register, 0x4c, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x30, 4) INT_MULT (register, 0x58, 4) , (register, 0x4c, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3800, 4) INT_SUB (const, 0x10, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x3880, 4) INT_RIGHT (register, 0x24, 4) , (unique, 0x3800, 4)
__udivdi3, (unique, 0x3980, 4) INT_AND (unique, 0x3880, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3980, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b00, 4) INT_RIGHT (register, 0x24, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x40, 4) COPY (unique, 0x3b00, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x50, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x50, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x3c, 4) INT_OR (register, 0x40, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x48, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x28, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x28, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x28, 4) COPY (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x28, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f6c, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f4c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x50, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f50, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f58, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x50, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f5c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x50, 4) INT_AND (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f64, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x3c, 4) INT_ADD (register, 0x3c, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f68, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x4c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x4c, 4) INT_SUB (register, 0x4c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f6c, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x4c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x4c, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x4c, 4) INT_SUB (register, 0x4c, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x4c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x4c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x30, 4) , (register, 0x3c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (register, 0x30, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x3c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x7100, 4) COPY (register, 0x24, 4)
__udivdi3, (register, 0x38, 4) INT_AND (unique, 0x7100, 4) , (const, 0xffff, 4)
__udivdi3, (unique, 0x6fe80, 8) INT_ZEXT (register, 0x3c, 4)
__udivdi3, (unique, 0x6ff00, 8) INT_ZEXT (register, 0x2c, 4)
__udivdi3, (unique, 0x70000, 8) INT_DIV (unique, 0x6fe80, 8) , (unique, 0x6ff00, 8)
__udivdi3, (register, 0x50, 4) SUBPIECE (unique, 0x70000, 8) , (const, 0x0, 4)
__udivdi3, (unique, 0x3e880, 4) INT_MULT (register, 0x2c, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x3c, 4) INT_SUB (register, 0x3c, 4) , (unique, 0x3e880, 4)
__udivdi3, (register, 0x40, 4) INT_MULT (register, 0x58, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x40, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x3c, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x3c, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x58, 4) INT_OR (register, 0x38, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fb4, 4) , (register, 0x62, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f94, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14f98, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fa0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1b80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1b80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fa4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x2c, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x2c, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fac, 4) , (unique, 0x2680, 1)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_CARRY (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x67, 1) INT_SCARRY (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x58, 4) INT_ADD (register, 0x58, 4) , (register, 0x44, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fb0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fb4, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x2, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x2, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x2, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3280, 4) INT_SUB (const, 0x20, 4) , (const, 0x10, 4)
__udivdi3, (unique, 0x3300, 4) INT_RIGHT (register, 0x4c, 4) , (unique, 0x3280, 4)
__udivdi3, (unique, 0x3400, 4) INT_AND (unique, 0x3300, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x68, 1) SUBPIECE (unique, 0x3400, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3580, 4) INT_LEFT (register, 0x4c, 4) , (const, 0x10, 4)
__udivdi3, (register, 0x50, 4) INT_OR (register, 0x50, 4) , (unique, 0x3580, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x40, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x58, 4) INT_SUB (register, 0x58, 4) , (register, 0x40, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x58, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x75f00, 8) INT_ZEXT (register, 0x28, 4)
__udivdi3, (unique, 0x76000, 8) INT_ZEXT (register, 0x50, 4)
__udivdi3, (unique, 0x76100, 8) INT_MULT (unique, 0x75f00, 8) , (unique, 0x76000, 8)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x76100, 8) , (const, 0x0, 8)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x76100, 8) , (const, 0x0, 8)
__udivdi3, (register, 0x28, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x0, 4)
__udivdi3, (register, 0x2c, 4) SUBPIECE (unique, 0x76100, 8) , (const, 0x4, 4)
__udivdi3, (register, 0x68, 1) COPY (register, 0x62, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (register, 0x58, 4) , (register, 0x2c, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (unique, 0x3ba80, 4) INT_SUB (register, 0x2c, 4) , (register, 0x58, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fe4, 4) , (unique, 0x1f00, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fcc, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1a80, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fd0, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x4a80, 4) INT_AND (register, 0x48, 4) , (const, 0xff, 4)
__udivdi3, (unique, 0x4b00, 4) INT_SUB (const, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (unique, 0x4b80, 4) INT_RIGHT (register, 0x20, 4) , (unique, 0x4b00, 4)
__udivdi3, (unique, 0x4c80, 4) INT_AND (unique, 0x4b80, 4) , (const, 0x1, 4)
__udivdi3, (unique, 0x4d00, 1) INT_EQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4d80, 1) BOOL_AND (unique, 0x4d00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x4e00, 1) INT_NOTEQUAL (unique, 0x4a80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4e80, 1) SUBPIECE (unique, 0x4c80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x4f00, 1) BOOL_AND (unique, 0x4e00, 1) , (unique, 0x4e80, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x4d80, 1) , (unique, 0x4f00, 1)
__udivdi3, (unique, 0x5080, 4) INT_LEFT (register, 0x20, 4) , (unique, 0x4a80, 4)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (unique, 0x5080, 4) , (register, 0x28, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x28, 4) , (unique, 0x5080, 4)
__udivdi3, (unique, 0x3bb80, 4) INT_SUB (register, 0x28, 4) , (unique, 0x5080, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3bb80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3bb80, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3, (unique, 0x1f80, 1) BOOL_NEGATE (register, 0x62, 1)
__udivdi3, (unique, 0x2080, 1) BOOL_OR (unique, 0x1f80, 1) , (register, 0x61, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x2080, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fd8, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (unique, 0x1e00, 1) BOOL_NEGATE (register, 0x61, 1)
__udivdi3, (unique, 0x1f00, 1) BOOL_AND (register, 0x62, 1) , (unique, 0x1e00, 1)
__udivdi3, (unique, 0x2680, 1) BOOL_NEGATE (unique, 0x1f00, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14fdc, 4) , (unique, 0x2680, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) INT_AND (register, 0x24, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x0, 4) , (register, 0x24, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3b980, 4) INT_SUB (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (unique, 0x3b980, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x62, 1) COPY (register, 0x66, 1)
__udivdi3, (register, 0x61, 1) COPY (register, 0x65, 1)
__udivdi3, (register, 0x60, 1) COPY (register, 0x64, 1)
__udivdi3, (register, 0x63, 1) COPY (register, 0x67, 1)
__udivdi3,  ---  CBRANCH (ram, 0x14ff8, 4) , (register, 0x61, 1)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x66, 1) INT_LESSEQUAL (const, 0x1, 4) , (register, 0x50, 4)
__udivdi3, (register, 0x67, 1) INT_SBORROW (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x50, 4) INT_SUB (register, 0x50, 4) , (const, 0x1, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x50, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3,  ---  BRANCH (ram, 0x14ff8, 4)
__udivdi3, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__udivdi3, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__udivdi3, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__udivdi3, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__udivdi3, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__udivdi3, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__udivdi3, (register, 0x24, 4) COPY (const, 0x0, 4)
__udivdi3, (register, 0x64, 1) INT_SLESS (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x65, 1) INT_EQUAL (register, 0x24, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x66, 1) COPY (register, 0x68, 1)
__udivdi3, (register, 0x67, 1) COPY (register, 0x63, 1)
__udivdi3, (register, 0x50, 4) COPY (register, 0x24, 4)
__udivdi3, (register, 0x20, 4) COPY (register, 0x50, 4)
__udivdi3, (register, 0x80, 4) COPY (register, 0x54, 4)
__udivdi3, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x48, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x4c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__udivdi3, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__udivdi3, (register, 0x54, 4) COPY (register, 0x80, 4)
__udivdi3, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__udivdi3, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__udivdi3, (register, 0x69, 1) COPY (register, 0xb0, 1)
__udivdi3, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__udivdi3,  ---  RETURN (register, 0x5c, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x44, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x40, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x3c, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x30, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
__libc_csu_init, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x3c, 4) COPY (register, 0x20, 4)
__libc_csu_init, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (const, 0x15058, 4)
__libc_csu_init, (register, 0x40, 4) COPY (register, 0x24, 4)
__libc_csu_init, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (const, 0x1505c, 4)
__libc_csu_init, (register, 0x44, 4) COPY (register, 0x28, 4)
__libc_csu_init, (unique, 0x1780, 4) INT_ADD (const, 0x15018, 4) , (const, 0x8, 4)
__libc_csu_init, (register, 0x68, 1) COPY (register, 0x62, 1)
__libc_csu_init, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x38, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x58, 4) COPY (const, 0x15020, 4)
__libc_csu_init,  ---  CALL (ram, 0x10a2c, 4)
__libc_csu_init, (unique, 0x1780, 4) INT_ADD (const, 0x15020, 4) , (const, 0x8, 4)
__libc_csu_init, (register, 0x68, 1) COPY (register, 0x62, 1)
__libc_csu_init, (register, 0x66, 1) INT_CARRY (unique, 0x1780, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x67, 1) INT_SCARRY (unique, 0x1780, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x34, 4) INT_ADD (unique, 0x1780, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x34, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x34, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x68, 1) COPY (register, 0x62, 1)
__libc_csu_init, (register, 0x66, 1) INT_LESSEQUAL (register, 0x34, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x67, 1) INT_SBORROW (register, 0x38, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x38, 4) INT_SUB (register, 0x38, 4) , (register, 0x34, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x3e00, 4) INT_SUB (const, 0x2, 4) , (const, 0x1, 4)
__libc_csu_init, (unique, 0x3e80, 4) INT_RIGHT (register, 0x38, 4) , (unique, 0x3e00, 4)
__libc_csu_init, (unique, 0x3f80, 4) INT_AND (unique, 0x3e80, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0x68, 1) SUBPIECE (unique, 0x3f80, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x4100, 4) INT_SRIGHT (register, 0x38, 4) , (const, 0x2, 4)
__libc_csu_init, (register, 0x38, 4) COPY (unique, 0x4100, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x38, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x66, 1) COPY (register, 0x68, 1)
__libc_csu_init, (register, 0x67, 1) COPY (register, 0x63, 1)
__libc_csu_init, (register, 0x62, 1) COPY (register, 0x66, 1)
__libc_csu_init, (register, 0x61, 1) COPY (register, 0x65, 1)
__libc_csu_init, (register, 0x60, 1) COPY (register, 0x64, 1)
__libc_csu_init, (register, 0x63, 1) COPY (register, 0x67, 1)
__libc_csu_init, (unique, 0x2680, 1) BOOL_NEGATE (register, 0x61, 1)
__libc_csu_init,  ---  CBRANCH (ram, 0x15030, 4) , (unique, 0x2680, 1)
__libc_csu_init, (register, 0x80, 4) COPY (register, 0x54, 4)
__libc_csu_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x54, 4) COPY (register, 0x80, 4)
__libc_csu_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
__libc_csu_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__libc_csu_init,  ---  RETURN (register, 0x5c, 4)
__libc_csu_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x0, 4) , (const, 0x1f, 4)
__libc_csu_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__libc_csu_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__libc_csu_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__libc_csu_init, (register, 0x30, 4) COPY (const, 0x0, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x66, 1) COPY (register, 0x68, 1)
__libc_csu_init, (register, 0x67, 1) COPY (register, 0x63, 1)
__libc_csu_init, (unique, 0x8800, 4) COPY (register, 0x34, 4)
__libc_csu_init, (register, 0x34, 4) INT_ADD (register, 0x34, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (unique, 0x8800, 4)
__libc_csu_init, (unique, 0x2e80, 4) INT_RIGHT (const, 0x1, 4) , (const, 0x1f, 4)
__libc_csu_init, (unique, 0x2f00, 1) INT_EQUAL (const, 0x0, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x2f80, 1) BOOL_AND (unique, 0x2f00, 1) , (register, 0x62, 1)
__libc_csu_init, (unique, 0x3000, 1) INT_NOTEQUAL (const, 0x0, 1) , (const, 0x0, 1)
__libc_csu_init, (unique, 0x3080, 1) SUBPIECE (unique, 0x2e80, 4) , (const, 0x0, 4)
__libc_csu_init, (unique, 0x3100, 1) BOOL_AND (unique, 0x3000, 1) , (unique, 0x3080, 1)
__libc_csu_init, (register, 0x68, 1) BOOL_OR (unique, 0x2f80, 1) , (unique, 0x3100, 1)
__libc_csu_init, (register, 0x66, 1) INT_CARRY (register, 0x30, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0x67, 1) INT_SCARRY (register, 0x30, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0x30, 4) INT_ADD (register, 0x30, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (register, 0x30, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (register, 0x30, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x20, 4) COPY (register, 0x3c, 4)
__libc_csu_init, (register, 0x24, 4) COPY (register, 0x40, 4)
__libc_csu_init, (register, 0x28, 4) COPY (register, 0x44, 4)
__libc_csu_init, (unique, 0x0, 4) INT_AND (register, 0x2c, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
__libc_csu_init, (register, 0x5c, 4) INT_AND (register, 0x2c, 4) , (const, 0xfffffffe, 4)
__libc_csu_init, (register, 0x58, 4) COPY (const, 0x1504c, 4)
__libc_csu_init,  ---  CALLIND (register, 0x5c, 4)
__libc_csu_init, (register, 0x68, 1) COPY (register, 0x62, 1)
__libc_csu_init, (register, 0x66, 1) INT_LESSEQUAL (register, 0x38, 4) , (register, 0x30, 4)
__libc_csu_init, (register, 0x67, 1) INT_SBORROW (register, 0x30, 4) , (register, 0x38, 4)
__libc_csu_init, (unique, 0x3ba80, 4) INT_SUB (register, 0x30, 4) , (register, 0x38, 4)
__libc_csu_init, (register, 0x64, 1) INT_SLESS (unique, 0x3ba80, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x65, 1) INT_EQUAL (unique, 0x3ba80, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x62, 1) COPY (register, 0x66, 1)
__libc_csu_init, (register, 0x61, 1) COPY (register, 0x65, 1)
__libc_csu_init, (register, 0x60, 1) COPY (register, 0x64, 1)
__libc_csu_init, (register, 0x63, 1) COPY (register, 0x67, 1)
__libc_csu_init, (unique, 0x1a80, 1) BOOL_NEGATE (register, 0x61, 1)
__libc_csu_init,  ---  CBRANCH (ram, 0x15034, 4) , (unique, 0x1a80, 1)
__libc_csu_init, (register, 0x80, 4) COPY (register, 0x54, 4)
__libc_csu_init, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x30, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x34, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x38, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x3c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x40, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x44, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
__libc_csu_init, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
__libc_csu_init, (register, 0x54, 4) COPY (register, 0x80, 4)
__libc_csu_init, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
__libc_csu_init, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__libc_csu_init, (register, 0x69, 1) COPY (register, 0xb0, 1)
__libc_csu_init, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
__libc_csu_init,  ---  RETURN (register, 0x5c, 4)
__libc_csu_fini, (unique, 0x0, 4) INT_AND (register, 0x58, 4) , (const, 0x1, 4)
__libc_csu_fini, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
__libc_csu_fini, (register, 0x69, 1) COPY (register, 0xb0, 1)
__libc_csu_fini, (register, 0x5c, 4) INT_AND (register, 0x58, 4) , (const, 0xfffffffe, 4)
__libc_csu_fini,  ---  RETURN (register, 0x5c, 4)
_fini, (register, 0x80, 4) INT_SUB (register, 0x54, 4) , (const, 0x4, 4)
_fini,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x58, 4)
_fini, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_fini,  ---  STORE (const, 0x1a1, 8) , (register, 0x80, 4) , (register, 0x2c, 4)
_fini, (register, 0x80, 4) INT_SUB (register, 0x80, 4) , (const, 0x4, 4)
_fini, (register, 0x54, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_fini, (register, 0x80, 4) COPY (register, 0x54, 4)
_fini, (register, 0x2c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_fini, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_fini, (register, 0x5c, 4) LOAD (const, 0x1a1, 8) , (register, 0x80, 4)
_fini, (register, 0x80, 4) INT_ADD (register, 0x80, 4) , (const, 0x4, 4)
_fini, (register, 0x54, 4) COPY (register, 0x80, 4)
_fini, (unique, 0x0, 4) INT_AND (register, 0x5c, 4) , (const, 0x1, 4)
_fini, (register, 0xb0, 1) INT_NOTEQUAL (unique, 0x0, 4) , (const, 0x0, 4)
_fini, (register, 0x69, 1) COPY (register, 0xb0, 1)
_fini, (register, 0x5c, 4) INT_AND (register, 0x5c, 4) , (const, 0xfffffffe, 4)
_fini,  ---  RETURN (register, 0x5c, 4)
